Search.setIndex({"docnames": ["CONTRIBUTING", "_code/discocat", "_code/extend-lambeq", "_code/monoidal", "_code/parameterise", "_code/rewrite", "_code/sentence-input", "_code/trainer-classical", "_code/trainer-hybrid", "_code/trainer-quantum", "_code/training-symbols", "_code/training-usecase", "advanced", "bibliography", "cli", "examples/circuit", "examples/classical-pipeline", "examples/parser", "examples/pennylane", "examples/quantum-pipeline", "examples/quantum-pipeline-jax", "examples/reader", "examples/rewrite", "examples/rotosolve-optimizer", "examples/tensor", "examples/tokenisation", "examples/tree-reader", "examples/unk-words", "genindex", "glossary", "index", "installation", "lambeq.ansatz", "lambeq.backend", "lambeq.bobcat", "lambeq.rewrite", "lambeq.text2diagram", "lambeq.tokeniser", "lambeq.training", "manual-training", "models", "nlp-class", "nlp-data", "nlp-intro", "nlp-ml", "nlp-refs", "notebooks", "package-api", "parsing", "pipeline", "puml/README", "release-notes", "root-api", "string-diagrams", "training", "troubleshooting", "tutorials/discocat", "tutorials/extend-lambeq", "tutorials/monoidal", "tutorials/parameterise", "tutorials/rewrite", "tutorials/sentence-input", "tutorials/trainer-classical", "tutorials/trainer-hybrid", "tutorials/trainer-quantum", "tutorials/training-symbols", "tutorials/training-usecase", "uml-diagrams", "use-cases"], "filenames": ["CONTRIBUTING.rst", "_code/discocat.ipynb", "_code/extend-lambeq.ipynb", "_code/monoidal.ipynb", "_code/parameterise.ipynb", "_code/rewrite.ipynb", "_code/sentence-input.ipynb", "_code/trainer-classical.ipynb", "_code/trainer-hybrid.ipynb", "_code/trainer-quantum.ipynb", "_code/training-symbols.ipynb", "_code/training-usecase.ipynb", "advanced.rst", "bibliography.rst", "cli.rst", "examples/circuit.ipynb", "examples/classical-pipeline.ipynb", "examples/parser.ipynb", "examples/pennylane.ipynb", "examples/quantum-pipeline.ipynb", "examples/quantum-pipeline-jax.ipynb", "examples/reader.ipynb", "examples/rewrite.ipynb", "examples/rotosolve-optimizer.ipynb", "examples/tensor.ipynb", "examples/tokenisation.ipynb", "examples/tree-reader.ipynb", "examples/unk-words.ipynb", "genindex.rst", "glossary.rst", "index.rst", "installation.rst", "lambeq.ansatz.rst", "lambeq.backend.rst", "lambeq.bobcat.rst", "lambeq.rewrite.rst", "lambeq.text2diagram.rst", "lambeq.tokeniser.rst", "lambeq.training.rst", "manual-training.rst", "models.rst", "nlp-class.rst", "nlp-data.rst", "nlp-intro.rst", "nlp-ml.rst", "nlp-refs.rst", "notebooks.rst", "package-api.rst", "parsing.rst", "pipeline.rst", "puml/README.md", "release-notes.rst", "root-api.rst", "string-diagrams.rst", "training.rst", "troubleshooting.rst", "tutorials/discocat.ipynb", "tutorials/extend-lambeq.ipynb", "tutorials/monoidal.ipynb", "tutorials/parameterise.ipynb", "tutorials/rewrite.ipynb", "tutorials/sentence-input.ipynb", "tutorials/trainer-classical.ipynb", "tutorials/trainer-hybrid.ipynb", "tutorials/trainer-quantum.ipynb", "tutorials/training-symbols.ipynb", "tutorials/training-usecase.ipynb", "uml-diagrams.rst", "use-cases.rst"], "titles": ["Contributing to lambeq", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Advanced: low-level lambeq", "Bibliography", "Command-line interface", "Circuit", "Classical pipeline", "Parser", "Training hybrid models using the Pennylane backend", "Quantum pipeline using the Quantum Trainer", "Quantum pipeline using JAX backend", "Reader", "Rewrite", "Rotosolve optimizer", "Tensor", "Tokenisation", "Tree reader", "Handling unknown words", "Index", "Glossary", "lambeq", "Installation", "lambeq.ansatz", "lambeq.backend", "lambeq.bobcat", "lambeq.rewrite", "lambeq.text2diagram", "lambeq.tokeniser", "lambeq.training", "Advanced: Manual training", "Choosing a model", "Text classification", "Working with text data", "Introduction", "Machine learning best practices", "References for further study", "Examples", "Subpackages", "Syntactic parsing", "Pipeline", "Creating PNG files", "Release notes", "lambeq package", "String diagrams", "Step 4: Training", "Troubleshooting", "DisCoCat in lambeq", "Advanced: Extending lambeq", "Monoidal categories in lambeq", "Step 3. Parameterisation", "Step 2. Diagram rewriting", "Step 1. Sentence input", "Training: Classical case", "Training: Hybrid case", "Training: Quantum case", "Introduction to symbols", "A complete use case", "Class diagrams", "lambeq use cases"], "terms": {"ar": [0, 1, 2, 3, 14, 15, 18, 23, 25, 27, 29, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "welcom": 0, "especi": [0, 34, 53, 68], "regard": 0, "ad": [0, 14, 27, 34, 35, 38, 51, 52, 54, 59, 61], "support": [0, 14, 29, 34, 36, 40, 42, 48, 49, 51, 52, 54, 56, 61], "new": [0, 13, 14, 30, 33, 34, 35, 36, 38, 42, 44, 47, 51, 52, 56, 57, 68], "parser": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 15, 19, 20, 23, 24, 25, 27, 29, 30, 31, 34, 36, 40, 46, 47, 48, 49, 51, 52, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66], "extens": [0, 4, 9, 19, 30, 38, 40, 49, 51, 52, 59, 64, 68], "ccgparser": [0, 30, 36, 47, 48, 51, 52, 56], "class": [0, 1, 2, 7, 8, 12, 14, 18, 21, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 42, 44, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68], "composit": [0, 13, 14, 29, 30, 33, 35, 36, 47, 49, 51, 52, 53, 56, 57, 58, 61], "scheme": [0, 14, 29, 49, 51, 61], "reader": [0, 2, 6, 8, 16, 18, 27, 29, 30, 36, 45, 46, 47, 51, 52, 63], "rewrit": [0, 2, 5, 27, 29, 30, 33, 36, 46, 49, 51, 52, 53, 56], "rule": [0, 5, 27, 29, 30, 34, 35, 36, 40, 43, 46, 47, 49, 51, 52, 54, 58, 61], "rewriterul": [0, 2, 30, 35, 47, 52], "tensor": [0, 1, 2, 4, 7, 8, 10, 11, 12, 14, 16, 18, 22, 29, 30, 32, 34, 38, 39, 40, 43, 46, 47, 49, 51, 52, 57, 59, 60, 61, 62, 63, 66, 67], "circuit": [0, 1, 2, 4, 8, 10, 12, 13, 14, 29, 30, 32, 33, 35, 38, 39, 40, 43, 46, 47, 49, 51, 52, 53, 54, 57, 59], "ans\u00e4tz": [0, 29, 30, 38, 47, 49, 51, 52, 59], "tensoransatz": [0, 2, 4, 10, 24, 30, 32, 40, 47, 51, 52, 56, 59, 65], "circuitansatz": [0, 2, 30, 32, 47, 51, 52, 56, 59], "trainer": [0, 7, 8, 9, 18, 29, 30, 38, 46, 47, 49, 51, 52, 54, 68], "model": [0, 7, 8, 9, 13, 16, 19, 20, 23, 29, 30, 31, 34, 36, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 60, 66], "optim": [0, 7, 8, 9, 13, 16, 18, 19, 20, 30, 34, 38, 40, 46, 47, 51, 52, 54, 62, 63, 64], "train": [0, 7, 8, 9, 14, 23, 27, 29, 30, 34, 35, 36, 40, 41, 42, 43, 44, 46, 49, 51, 52, 57, 60, 61], "packag": [0, 25, 30, 39, 40, 42, 44, 47, 48, 51, 54, 57, 59, 60, 61, 64, 66, 67], "all": [0, 1, 14, 18, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 49, 51, 52, 54, 56, 57, 59, 61, 62, 63, 64], "accept": [0, 14, 34, 38, 51, 52], "includ": [0, 14, 25, 27, 29, 31, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 54, 55, 59, 61, 68], "next": [0, 7, 8, 9, 14, 16, 19, 20, 23, 29, 34, 43, 62, 63, 64], "offici": [0, 34], "releas": [0, 14, 30, 33, 34, 38, 47, 48, 49, 55, 62], "contributor": 0, "properli": [0, 14, 15, 30, 33, 34, 43, 57, 61], "attribut": [0, 32, 33, 34, 35, 36, 38, 51, 52, 54, 56, 65, 67, 68], "correspond": [0, 8, 14, 25, 27, 29, 33, 34, 35, 36, 38, 39, 40, 42, 51, 52, 53, 54, 56, 59, 61, 63, 68], "note": [0, 13, 14, 25, 27, 30, 34, 35, 36, 38, 40, 42, 52, 53, 55, 56, 57, 59, 60, 61, 64, 66], "If": [0, 14, 30, 31, 33, 34, 35, 36, 38, 40, 52, 55, 57, 62, 63, 64, 66, 68], "you": [0, 1, 12, 14, 15, 27, 30, 31, 34, 38, 40, 42, 44, 50, 54, 55, 56, 57, 60, 61, 63, 64, 65, 68], "have": [0, 1, 2, 12, 14, 18, 27, 29, 30, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 56, 57, 58, 62, 63, 64, 65, 68], "alreadi": [0, 14, 34, 36, 38, 52, 57, 64], "implement": [0, 13, 29, 32, 33, 34, 35, 36, 38, 40, 43, 47, 48, 49, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 68], "test": [0, 7, 8, 9, 11, 16, 17, 19, 20, 27, 34, 35, 42, 43, 44, 46, 51, 52, 54, 58, 62, 64, 66, 68], "propos": 0, "can": [0, 1, 3, 6, 14, 18, 21, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68], "review": [0, 42, 43], "": [0, 1, 2, 4, 5, 10, 11, 13, 14, 15, 22, 23, 24, 27, 29, 30, 32, 33, 34, 35, 36, 38, 40, 41, 43, 44, 45, 47, 48, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68], "develop": [0, 7, 8, 9, 16, 19, 20, 29, 30, 43, 44, 45, 51, 53, 62, 63, 64, 67], "team": [0, 9, 30, 64], "keep": [0, 14, 34, 36, 48, 52], "mind": [0, 68], "follow": [0, 14, 25, 27, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 42, 43, 44, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68], "guidelin": [0, 57], "pleas": [0, 15, 30, 34, 38, 52, 55], "provid": [0, 8, 14, 23, 25, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 67, 68], "detail": [0, 30, 33, 34, 38, 42, 44, 48, 49, 51, 52, 54, 56, 57, 60, 61, 68], "descript": [0, 34, 51, 52, 59, 60, 68], "your": [0, 5, 14, 15, 27, 30, 34, 35, 38, 40, 44, 52, 54, 57, 60, 61, 63, 68], "refer": [0, 18, 25, 27, 29, 34, 38, 42, 51, 52, 54, 56, 57, 59, 61, 63, 68], "public": [0, 68], "other": [0, 27, 29, 30, 33, 34, 36, 38, 39, 40, 41, 42, 43, 51, 52, 59, 60, 67, 68], "materi": [0, 45, 51], "when": [0, 1, 14, 25, 27, 32, 33, 34, 35, 36, 38, 39, 41, 42, 48, 51, 52, 53, 55, 56, 58, 61, 63, 65, 66, 68], "appropri": [0, 33, 44, 49, 57, 61, 68], "suggest": 0, "untest": 0, "hoc": [0, 34], "compon": [0, 67], "whose": [0, 29, 34, 38], "motiv": 0, "i": [0, 1, 2, 3, 6, 8, 9, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "well": [0, 29, 34, 36, 38, 41, 43, 44, 47, 48, 52, 53, 58], "defin": [0, 4, 7, 10, 14, 29, 33, 34, 38, 39, 40, 43, 46, 49, 51, 53, 54, 56, 57, 58, 59, 65], "cannot": [0, 14, 36, 52, 56, 58, 66], "sure": [0, 15, 34], "about": [0, 13, 14, 18, 30, 34, 45, 57, 61, 63], "idea": [0, 44], "would": [0, 14, 25, 27, 34, 36, 38, 41, 42, 51, 52, 60, 61, 63, 67, 68], "prefer": [0, 14, 34, 40, 43, 48, 58], "contact": 0, "discuss": [0, 14, 34, 42], "befor": [0, 1, 10, 14, 27, 33, 34, 35, 36, 38, 52, 56, 57, 64, 65], "examin": [0, 27, 43, 61, 65], "exist": [0, 29, 34, 38, 43, 52, 56, 58, 62], "try": [0, 21, 30, 33, 34, 42, 51], "appli": [0, 1, 5, 10, 14, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 43, 51, 52, 56, 57, 58, 59, 60, 63, 64, 65, 66], "same": [0, 1, 8, 14, 18, 27, 29, 33, 34, 35, 36, 38, 52, 55, 56, 57, 61, 62, 63, 68], "convent": [0, 33, 34, 36, 52], "style": [0, 29], "format": [0, 8, 14, 18, 33, 34, 36, 38, 42, 43, 48, 52, 56, 59, 60, 63], "document": [0, 14, 30, 33, 34, 36, 38, 42, 46, 51, 52, 57, 59], "In": [0, 1, 14, 18, 25, 27, 29, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68], "gener": [0, 14, 27, 29, 32, 33, 34, 35, 36, 38, 39, 41, 43, 47, 48, 49, 50, 51, 52, 56, 57, 58, 60, 61], "we": [0, 1, 2, 6, 14, 18, 22, 23, 25, 27, 29, 31, 33, 34, 38, 39, 40, 43, 45, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68], "standard": [0, 29, 33, 34, 36, 40, 41, 46, 48, 51, 52, 54, 57, 58, 59, 60, 64, 66], "pep": 0, "8": [0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 15, 16, 18, 19, 20, 22, 23, 24, 27, 34, 56, 57, 58, 61, 62, 63, 64, 65, 66], "python": [0, 13, 29, 30, 31, 34, 40, 45, 48, 51], "guid": [0, 34, 45], "familiar": [0, 34], "look": [0, 27, 34, 38, 51, 56, 60, 61, 63], "docstr": [0, 34, 38], "us": [0, 6, 8, 9, 11, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67], "numpydoc": 0, "The": [0, 2, 13, 14, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "signatur": [0, 34, 38, 51, 62, 64], "method": [0, 12, 13, 21, 25, 27, 29, 33, 34, 35, 36, 38, 40, 42, 43, 44, 51, 52, 54, 56, 57, 58, 61, 62, 63, 64, 65, 67], "privat": [0, 34], "need": [0, 14, 23, 25, 27, 30, 33, 34, 38, 39, 40, 42, 43, 44, 48, 50, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68], "type": [0, 1, 2, 3, 4, 10, 13, 14, 16, 27, 29, 30, 32, 33, 34, 35, 36, 38, 39, 42, 44, 47, 48, 51, 52, 53, 56, 57, 58, 59, 60, 61, 65], "annot": [0, 29, 34, 36, 48, 52, 53, 59], "modul": [0, 12, 33, 34, 38, 47, 51, 52, 56, 60, 62], "more": [0, 14, 18, 27, 29, 30, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 49, 51, 52, 53, 54, 56, 57, 59, 60, 61, 63, 64, 66, 67, 68], "inform": [0, 13, 29, 30, 32, 33, 34, 38, 40, 42, 43, 52, 57, 59, 60, 61, 66], "accompani": [0, 30], "ani": [0, 3, 14, 27, 29, 30, 32, 33, 34, 35, 36, 38, 42, 43, 44, 49, 52, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64], "function": [0, 8, 13, 14, 18, 23, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 51, 52, 54, 55, 56, 57, 59, 60, 63, 68], "set": [0, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 23, 25, 27, 29, 33, 34, 35, 36, 38, 42, 44, 51, 52, 56, 59, 61, 62, 63, 64, 65, 66], "coverag": [0, 48, 51], "close": [0, 13, 29, 53, 56, 60, 68], "100": [0, 6, 8, 9, 18, 23, 25, 34, 38, 42, 61, 63, 64], "like": [0, 14, 29, 33, 34, 38, 42, 48, 51, 55, 56, 58, 60, 61, 62, 67], "wai": [0, 14, 29, 30, 33, 34, 39, 41, 42, 43, 53, 56, 58, 60, 61, 63, 68], "get": [0, 1, 4, 14, 18, 23, 33, 34, 36, 38, 39, 43, 44, 47, 51, 52, 56, 59, 60, 61, 63, 66, 68], "dev": [0, 8, 18, 63], "guidanc": 0, "matter": [0, 27], "how": [0, 27, 29, 34, 38, 39, 41, 42, 43, 51, 56, 57, 58, 61, 67], "small": [0, 14, 18, 29, 33, 63, 68], "long": [0, 14, 34, 56, 57, 60], "improv": [0, 38, 40, 42, 51, 52, 60, 63, 64, 66], "pragmat": 0, "clear": [0, 34, 38], "howev": [0, 25, 33, 34, 38, 40, 42, 44, 48, 51, 55, 57, 61, 62], "up": [0, 29, 34, 38, 40, 52, 56, 58, 59], "maintain": [0, 51], "project": [0, 30, 38, 43, 52], "decid": 0, "sole": [0, 34, 43, 60], "purpos": [0, 14, 29, 34, 42, 43, 51, 60, 65], "add": [0, 1, 2, 14, 34, 35, 38, 51, 52, 56, 57, 62], "author": [0, 30, 34], "name": [0, 1, 2, 29, 30, 32, 33, 34, 35, 36, 38, 43, 48, 51, 52, 56, 57, 61], "list": [0, 8, 14, 18, 25, 30, 32, 33, 34, 35, 36, 37, 38, 40, 42, 52, 55, 56, 57, 58, 61, 63], "without": [0, 33, 34, 35, 38, 51, 52, 57, 60, 61, 63, 66], "actual": [0, 1, 25, 33, 35, 41, 52, 56, 57, 58, 61, 65, 68], "valu": [0, 1, 2, 14, 23, 24, 29, 33, 34, 36, 38, 40, 52, 54, 56, 62, 63, 68], "regret": 0, "case": [0, 14, 18, 25, 27, 29, 30, 33, 34, 35, 36, 38, 39, 41, 44, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 60, 61, 65], "exampl": [0, 7, 8, 9, 11, 12, 14, 15, 18, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 48, 49, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68], "chang": [0, 14, 29, 33, 34, 35, 36, 38, 51, 52, 55, 57, 61], "variabl": [0, 34], "appar": 0, "reason": [0, 13, 33, 34, 38, 43, 60, 68], "rephras": 0, "comment": 0, "unnecessari": [0, 51, 58], "As": [0, 18, 34, 58, 62, 63, 68], "mention": [0, 51, 58], "abov": [0, 14, 33, 34, 35, 38, 42, 43, 51, 52, 53, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68], "genuin": 0, "state": [0, 1, 22, 23, 29, 31, 32, 33, 34, 35, 38, 40, 47, 48, 49, 51, 52, 53, 56, 60, 63], "For": [0, 3, 14, 27, 29, 34, 36, 38, 40, 41, 42, 45, 48, 51, 52, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "fix": [0, 11, 34, 36, 51, 52, 53, 56, 65, 66], "typo": [0, 51], "miss": [0, 25, 34, 38, 41, 51, 52, 61], "A": [0, 3, 9, 13, 14, 18, 19, 20, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 45, 49, 51, 52, 53, 54, 56, 57, 58, 59, 61, 63, 64, 68], "minor": [0, 51, 64], "complianc": 0, "question": [0, 13, 30], "relat": [0, 14, 29, 31, 34, 43, 48, 53, 67], "send": [0, 14, 30, 33, 48, 51, 53, 56], "email": [0, 30, 41, 63, 68], "cambridgequantum": [0, 30], "com": [0, 30, 34, 48], "ey": 0, "answer": [0, 13], "from": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68], "help": [0, 14, 18, 27, 30, 34, 38, 41, 43, 44, 45, 51, 52, 63], "them": [0, 1, 14, 27, 29, 33, 34, 35, 36, 38, 40, 42, 43, 51, 52, 54, 56, 58, 60, 61, 63, 65, 66, 68], "understand": [0, 12, 42, 43, 44, 45, 58], "better": [0, 43, 51, 61], "remain": [0, 29, 34, 36, 44, 52, 53], "inact": 0, "than": [0, 14, 27, 34, 35, 38, 40, 41, 42, 43, 51, 52, 56, 59, 60, 63, 68], "week": 0, "mark": [0, 9, 25, 29, 34, 42, 61, 64], "stale": 0, "eventu": 0, "who": [0, 48, 51, 67], "wish": 0, "good": [0, 14, 38, 41, 45, 52], "point": [0, 34, 35, 38, 41, 45, 52, 53, 57, 59], "uml": [0, 47, 50, 51, 57, 67], "diagram": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 22, 24, 25, 27, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 43, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 65, 68], "each": [0, 14, 27, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 51, 52, 53, 56, 57, 58, 59, 60, 61, 63, 65, 67, 68], "sub": [0, 33, 34, 36, 51, 52, 57, 67], "which": [0, 8, 14, 18, 27, 29, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68], "give": [0, 18, 24, 40, 52, 56, 63, 68], "high": [0, 13, 30, 34, 38, 41, 43, 45, 51, 52, 54, 57, 67, 68], "level": [0, 13, 25, 29, 30, 35, 36, 38, 39, 40, 43, 45, 49, 51, 52, 53, 54, 57, 59, 61, 67, 68], "overview": [0, 34, 45, 54], "structur": [0, 13, 29, 33, 36, 38, 40, 42, 43, 48, 51, 52, 53, 56, 60, 61, 68], "regad": 0, "import": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 33, 34, 38, 40, 41, 42, 43, 44, 45, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "extern": [0, 48, 51, 67], "depend": [0, 13, 14, 18, 27, 29, 31, 33, 34, 35, 39, 43, 44, 51, 52, 53, 54, 59, 61, 63, 68], "also": [0, 14, 18, 27, 29, 30, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 48, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68], "found": [0, 29, 30, 32, 34, 36, 38, 40, 42, 43, 52, 66], "thi": [0, 1, 6, 8, 14, 15, 17, 18, 20, 21, 22, 25, 27, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "page": [0, 30, 51], "polit": 0, "respect": [0, 14, 29, 33, 34, 36, 38, 42, 48, 52, 53, 54, 56, 57, 61, 63], "form": [0, 1, 14, 22, 27, 29, 33, 34, 35, 36, 38, 42, 48, 51, 52, 53, 56, 57, 58, 59, 60, 61, 64, 68], "commun": [0, 30, 34, 43, 48], "expect": [0, 14, 18, 23, 29, 31, 34, 38, 51, 52, 53, 60, 62, 63, 68], "take": [0, 14, 18, 29, 32, 34, 35, 36, 38, 42, 49, 52, 53, 54, 56, 60, 61, 63, 66, 68], "fair": 0, "correct": [0, 34, 41, 61], "action": [0, 50, 51], "respons": [0, 34, 51, 55], "instanc": [0, 14, 33, 34, 35, 38, 41, 51, 52, 54, 58, 59, 61, 65], "unaccept": 0, "behaviour": [0, 34, 35, 43, 51, 52, 63], "right": [0, 1, 29, 30, 33, 34, 36, 39, 40, 44, 51, 52, 53, 56, 57, 58, 61, 62], "remov": [0, 14, 34, 35, 36, 38, 42, 43, 46, 49, 51, 52, 55, 60, 63, 64], "edit": 0, "reject": 0, "commit": [0, 34], "wiki": 0, "align": 0, "ban": 0, "temporarili": [0, 34], "perman": 0, "thei": [0, 15, 18, 27, 29, 33, 34, 35, 36, 38, 42, 51, 52, 53, 56, 58, 61, 63, 65, 67], "deem": 0, "inappropri": 0, "threaten": 0, "offens": 0, "harm": 0, "see": [0, 22, 27, 29, 30, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68], "low": [0, 29, 30, 40, 51, 53, 54, 57, 59], "tutori": [0, 12, 39, 40, 41, 42, 43, 44, 45, 51, 56, 57, 61, 63, 64], "extend": [0, 30, 33, 34, 48, 51, 58, 59, 60, 61], "1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 48, 49, 52, 53, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68], "lambeq": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 39, 40, 41, 42, 43, 44, 48, 49, 51, 53, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66], "backend": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 16, 17, 19, 22, 24, 29, 30, 32, 34, 35, 36, 38, 39, 46, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68], "draw": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 51, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "grammar": [1, 2, 3, 5, 6, 12, 13, 14, 22, 29, 32, 34, 35, 36, 47, 48, 51, 52, 57, 58, 60, 61, 62, 66, 67], "cap": [1, 3, 29, 33, 47, 56, 58, 60], "cup": [1, 3, 5, 6, 14, 29, 30, 33, 35, 46, 47, 51, 52, 53, 56, 58, 59, 60, 63, 64], "id": [1, 2, 3, 22, 32, 33, 34, 36, 38, 52, 56, 57, 58], "ty": [1, 3, 5, 32, 33, 34, 35, 36, 47, 52, 56, 58, 60], "word": [1, 2, 5, 13, 14, 22, 29, 30, 33, 34, 35, 36, 39, 43, 46, 47, 48, 49, 51, 52, 53, 56, 57, 59, 60, 66], "n": [1, 2, 4, 5, 6, 9, 10, 11, 14, 15, 22, 24, 25, 27, 29, 30, 33, 34, 35, 36, 38, 40, 41, 42, 44, 52, 53, 56, 57, 59, 60, 61, 63, 64, 65, 66], "she": [1, 33, 56], "goe": [1, 33, 49, 56], "r": [1, 2, 3, 5, 10, 11, 13, 14, 15, 22, 27, 29, 33, 35, 36, 52, 53, 56, 57, 58, 60, 65, 66], "l": [1, 2, 3, 5, 10, 14, 22, 27, 29, 30, 33, 34, 35, 36, 38, 52, 53, 56, 57, 58, 60, 65], "home": [1, 33, 56], "assert": [1, 3, 34, 56, 58], "0": [1, 2, 3, 7, 8, 9, 10, 11, 14, 15, 16, 18, 19, 20, 23, 30, 32, 33, 34, 36, 38, 40, 48, 49, 52, 55, 56, 57, 58, 62, 63, 64, 65, 66], "2": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 32, 33, 34, 36, 38, 39, 40, 41, 48, 49, 52, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68], "draw_equ": [1, 2, 3, 9, 33, 56, 57, 58, 64], "origin": [1, 14, 27, 29, 32, 33, 34, 35, 36, 48, 51, 52, 56, 57, 65], "appear": [1, 27, 33, 34, 36, 42, 52, 56], "print": [1, 3, 7, 8, 9, 10, 11, 16, 18, 19, 20, 21, 22, 27, 33, 34, 36, 38, 51, 52, 56, 58, 62, 63, 64, 65, 66], "normal": [1, 8, 22, 29, 33, 34, 36, 38, 52, 56, 63, 68], "join": [1, 9, 30, 56, 64], "map": [1, 2, 3, 22, 29, 32, 33, 34, 35, 36, 38, 42, 47, 51, 52, 53, 56, 57, 58, 59, 60], "str": [1, 27, 32, 33, 34, 35, 36, 37, 38, 52, 56], "box": [1, 2, 3, 10, 29, 30, 32, 33, 34, 35, 36, 40, 41, 47, 51, 52, 53, 56, 57, 58, 61, 62, 65, 67], "diagram_nf": [1, 56], "normal_form": [1, 3, 5, 9, 22, 29, 33, 51, 56, 58, 60, 64], "after": [1, 10, 12, 31, 33, 34, 38, 40, 43, 44, 52, 56, 60, 65], "symbol": [1, 2, 3, 8, 9, 15, 25, 29, 30, 32, 33, 36, 38, 39, 42, 47, 51, 52, 53, 54, 56, 57, 58, 61, 63, 64, 66], "figsiz": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 18, 19, 20, 23, 24, 25, 27, 33, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "10": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 16, 18, 19, 20, 22, 24, 27, 34, 38, 51, 52, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66], "4": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 33, 34, 36, 38, 39, 40, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68], "draw_as_pregroup": [1, 3, 33, 56, 58], "fals": [1, 2, 3, 7, 8, 9, 14, 16, 18, 19, 20, 27, 32, 33, 34, 35, 36, 38, 40, 41, 51, 52, 56, 57, 58, 61, 62, 63, 64], "foliat": [1, 33, 56], "true": [1, 6, 7, 8, 9, 16, 18, 19, 20, 23, 25, 27, 29, 33, 34, 36, 38, 40, 41, 51, 52, 54, 56, 61, 62, 63, 64, 68], "3": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 33, 34, 36, 38, 39, 42, 43, 47, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66], "bobcatpars": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 30, 36, 40, 47, 51, 52, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66], "verbos": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 16, 18, 19, 20, 23, 25, 34, 36, 38, 52, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66], "suppress": [1, 5, 6, 10, 11, 23, 25, 30, 36, 52, 56, 60, 61, 65, 66], "functor": [1, 2, 12, 29, 33, 46, 47], "determin": [1, 5, 14, 29, 32, 35, 36, 42, 43, 46, 51, 52, 53, 56, 59, 60, 62, 63, 65], "adject": [1, 27, 42, 56], "shouldn": [1, 56], "t": [1, 3, 6, 7, 8, 9, 11, 13, 14, 16, 18, 19, 20, 21, 25, 27, 29, 33, 34, 36, 38, 42, 52, 56, 57, 58, 61, 62, 63, 64, 66], "veri": [1, 12, 34, 42, 57, 59, 60, 63, 66], "behind": [1, 44, 56], "my": [1, 6, 25, 34, 42, 56, 61], "hi": [1, 56], "her": [1, 56], "an": [1, 11, 13, 14, 20, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68], "adj": [1, 2, 56, 57], "def": [1, 2, 7, 8, 9, 11, 16, 18, 19, 20, 23, 34, 38, 40, 56, 57, 62, 63, 64, 66], "very_ob": [1, 56], "_": [1, 23, 32, 33, 34, 52, 56, 62], "return": [1, 2, 7, 8, 9, 11, 14, 15, 16, 18, 19, 20, 23, 29, 32, 33, 34, 35, 36, 37, 38, 40, 51, 52, 53, 56, 57, 58, 61, 62, 63, 64, 66], "very_ar": [1, 56], "cod": [1, 2, 3, 22, 32, 33, 35, 36, 51, 52, 56, 57, 58], "very_functor": [1, 56], "ob": [1, 33, 56, 57], "sentence2diagram": [1, 2, 4, 5, 6, 10, 15, 17, 21, 23, 24, 25, 26, 30, 36, 40, 51, 52, 56, 57, 59, 60, 61, 65], "big": [1, 34, 56, 68], "bad": [1, 56], "wolf": [1, 56], "new_diagram": [1, 56], "5": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 33, 34, 36, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "categori": [1, 12, 13, 14, 29, 30, 32, 34, 36, 41, 42, 47, 48, 51, 52, 53, 56, 62, 64, 66, 68], "layer": [1, 2, 14, 29, 32, 33, 34, 35, 47, 51, 52, 54, 56, 57, 59, 60, 63], "swap": [1, 3, 14, 29, 33, 35, 47, 51, 52, 56, 58, 60], "twist": [1, 12], "twisteddiagram": [1, 56], "twistedti": [1, 56], "twistedbox": [1, 56], "twistedlay": [1, 56], "twistedcup": [1, 56], "twistedcap": [1, 56], "register_special_box": [1, 33, 56], "twistedswap": [1, 56], "twisted_cap_factori": [1, 56], "left": [1, 29, 30, 33, 34, 36, 51, 52, 53, 56, 57, 58, 61, 62], "is_revers": [1, 33, 56], "twisted_cup_factori": [1, 56], "twist_functor": [1, 56], "lambda": [1, 9, 19, 20, 30, 32, 33, 52, 56, 64], "func": [1, 38, 52, 56], "dom": [1, 2, 3, 32, 33, 36, 51, 52, 56, 57, 58], "target_categori": [1, 33, 56], "twisted_diagram": [1, 56], "snake": [1, 3, 29, 33, 56, 58], "to_diagram": [1, 3, 30, 33, 36, 52, 56, 58], "6": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 18, 19, 20, 22, 23, 24, 27, 34, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "7": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 16, 18, 19, 20, 22, 23, 24, 25, 27, 34, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "numpi": [1, 2, 7, 8, 9, 10, 11, 16, 18, 19, 20, 23, 29, 32, 33, 34, 38, 51, 52, 54, 56, 57, 62, 63, 64, 65, 66], "np": [1, 2, 7, 8, 9, 10, 11, 16, 18, 19, 20, 23, 32, 33, 34, 36, 38, 52, 56, 57, 62, 63, 64, 65, 66], "dim": [1, 2, 4, 7, 8, 10, 11, 16, 18, 24, 32, 33, 40, 47, 52, 56, 57, 59, 62, 63, 65, 66], "unit": [1, 3, 25, 29, 33, 34, 42, 49, 53, 56, 58, 61], "object": [1, 3, 13, 14, 22, 29, 30, 33, 34, 35, 36, 38, 47, 51, 52, 53, 56, 57, 58, 61, 62, 64], "so": [1, 3, 14, 18, 27, 29, 33, 34, 36, 38, 40, 44, 48, 51, 52, 54, 56, 57, 58, 60, 61, 63, 64, 66, 68], "disappear": [1, 56], "anoth": [1, 6, 25, 29, 34, 45, 56, 58, 59, 60, 61, 68], "f": [1, 3, 7, 8, 9, 11, 14, 16, 18, 19, 20, 29, 33, 34, 36, 41, 52, 56, 58, 62, 63, 64, 66], "id_box": [1, 56], "data": [1, 10, 11, 13, 14, 27, 29, 30, 33, 35, 36, 38, 39, 40, 41, 43, 44, 46, 51, 52, 53, 54, 56, 61, 65], "id_tensor": [1, 56], "arrai": [1, 2, 8, 10, 11, 20, 23, 24, 32, 33, 38, 51, 52, 56, 57, 62, 63, 64, 65, 66], "reshap": [1, 56], "equal": [1, 27, 33, 34, 41, 44, 56, 58], "eval": [1, 2, 8, 10, 11, 24, 33, 34, 38, 56, 57, 63, 65, 66], "9": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 16, 18, 19, 20, 22, 23, 27, 30, 38, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66], "dtype": [1, 8, 10, 11, 18, 23, 24, 33, 34, 38, 51, 52, 56, 63, 65, 66], "int64": [1, 56], "11": [1, 2, 3, 5, 7, 8, 9, 11, 16, 18, 19, 20, 22, 27, 51, 56, 57, 58, 60, 62, 63, 64, 66], "one_ob": [1, 56], "len": [1, 7, 8, 9, 11, 16, 18, 19, 20, 23, 56, 62, 63, 64, 66], "doe": [1, 14, 15, 18, 23, 27, 29, 33, 34, 35, 36, 38, 42, 52, 56, 57, 63], "one_ar": [1, 56], "ones": [1, 2, 24, 34, 36, 38, 43, 52, 56, 57, 62, 66], "becom": [1, 35, 36, 38, 42, 51, 52, 56, 57, 58, 59, 60], "one_functor": [1, 56], "one_diagram": [1, 56], "34": [1, 6, 8, 25, 56, 61, 63], "gt": [1, 3, 56, 58], "12": [1, 2, 3, 6, 7, 8, 9, 10, 14, 18, 19, 20, 22, 23, 25, 33, 34, 51, 56, 57, 58, 59, 61, 62, 63, 64, 65], "quantum": [1, 2, 4, 12, 13, 14, 29, 30, 32, 38, 39, 40, 43, 46, 47, 49, 51, 52, 53, 54, 57, 58, 60, 62, 65, 67], "cx": [1, 2, 33, 56, 57], "qubit": [1, 8, 14, 29, 32, 33, 38, 39, 40, 51, 52, 53, 56, 57, 59, 63, 64, 65, 68], "rz": [1, 32, 33, 47, 52, 56, 59], "x": [1, 3, 8, 11, 18, 32, 33, 34, 36, 38, 51, 52, 56, 58, 63, 66], "same_circuit": [1, 56], "draw_type_label": [1, 33, 56], "to_tk": [1, 4, 15, 33, 56, 59], "tk": [1, 51, 56], "13": [1, 2, 4, 5, 6, 7, 8, 9, 11, 13, 18, 22, 34, 56, 57, 59, 60, 61, 62, 63, 64, 66], "cnot": [1, 2, 32, 52, 56, 57, 59], "circuit1": [1, 33, 56], "do": [1, 5, 27, 30, 34, 35, 36, 38, 39, 41, 42, 44, 50, 51, 52, 56, 60, 61, 64, 65, 68], "perm": [1, 56], "permut": [1, 33, 56], "circuit2": [1, 33, 56], "introduc": [1, 14, 27, 32, 35, 42, 51, 52, 56, 62, 66, 68], "convert": [1, 4, 6, 11, 14, 29, 32, 33, 34, 36, 38, 40, 42, 43, 48, 49, 51, 52, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66], "tket": [1, 29, 33, 38, 51, 52, 54, 56, 64, 66, 68], "14": [1, 2, 6, 7, 8, 9, 18, 22, 23, 32, 34, 52, 56, 57, 59, 61, 62, 63, 64], "control": [1, 14, 33, 34, 36, 43, 47, 52, 56, 62], "distanc": [1, 33, 54, 56], "15": [1, 4, 7, 8, 9, 16, 18, 32, 34, 52, 56, 59, 62, 63, 64], "discard": [1, 2, 32, 33, 34, 40, 47, 51, 52, 56, 57, 64], "measur": [1, 23, 29, 33, 38, 40, 41, 47, 52, 56, 68], "ket": [1, 23, 29, 33, 38, 40, 47, 51, 52, 56], "bra": [1, 33, 40, 47, 51, 56], "longer": [1, 31, 51, 56, 60], "unitari": [1, 29, 32, 33, 40, 51, 52, 56, 57, 59], "j": [1, 2, 13, 34, 35, 38, 52, 56, 57, 60], "16": [1, 8, 9, 10, 14, 18, 34, 38, 56, 63, 64, 65], "mix": [1, 33, 51, 56, 68], "17": [1, 8, 9, 18, 56, 63, 64], "shape": [1, 2, 23, 29, 32, 34, 36, 38, 40, 52, 56, 57], "18": [1, 8, 10, 18, 56, 63, 65], "cnot_ob": [1, 56], "implicitli": [1, 56, 58], "rigid": [1, 12, 29, 51, 56, 57], "cnot_ar": [1, 56], "width": [1, 56], "max": [1, 56], "rang": [1, 2, 8, 11, 18, 23, 32, 34, 38, 42, 43, 45, 48, 51, 52, 54, 56, 57, 59, 62, 63, 66, 68], "post": [1, 29, 32, 33, 34, 35, 38, 51, 52, 56, 60, 63, 64], "select": [1, 14, 29, 32, 33, 34, 35, 45, 47, 49, 51, 52, 54, 56, 60, 63, 64], "amount": [1, 33, 40, 53, 56, 63], "input": [1, 7, 14, 18, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 51, 52, 54, 56, 60], "output": [1, 18, 30, 33, 34, 35, 36, 38, 40, 41, 46, 48, 49, 51, 52, 56, 57, 60, 61, 62, 63, 68], "wire": [1, 18, 22, 29, 32, 33, 35, 36, 51, 52, 53, 56, 57, 58, 59, 60, 63, 64, 65], "els": [1, 34, 38, 52, 56], "cnot_functor": [1, 56], "warn": [2, 9, 10, 11, 19, 20, 34, 38, 52, 57, 64, 65, 66], "filterwarn": [2, 9, 10, 11, 19, 20, 57, 64, 65, 66], "ignor": [2, 9, 10, 11, 14, 16, 19, 20, 27, 33, 34, 38, 51, 52, 57, 64, 65, 66, 68], "atomictyp": [2, 4, 5, 7, 8, 9, 10, 11, 15, 16, 18, 19, 20, 22, 23, 24, 30, 36, 40, 51, 52, 57, 59, 60, 62, 63, 64, 65, 66], "noun": [2, 4, 5, 7, 8, 9, 10, 11, 14, 15, 16, 18, 19, 20, 22, 23, 24, 27, 29, 30, 36, 40, 42, 51, 52, 53, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66], "combread": [2, 57], "self": [2, 7, 8, 18, 33, 34, 36, 38, 40, 52, 57, 62, 63], "sentenc": [2, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 29, 30, 33, 34, 36, 37, 40, 42, 46, 47, 48, 49, 51, 52, 53, 56, 57, 59, 60, 62, 63, 64, 65, 66, 68], "w": [2, 11, 14, 38, 52, 57, 66], "split": [2, 14, 30, 32, 33, 36, 37, 42, 44, 46, 52, 57, 59, 62, 66], "john": [2, 4, 5, 6, 10, 14, 25, 26, 27, 42, 57, 59, 60, 61, 65], "gave": [2, 6, 14, 25, 42, 57, 61], "mari": [2, 6, 14, 25, 42, 57, 61], "flower": [2, 6, 14, 24, 25, 42, 57, 61], "text": [2, 4, 6, 7, 8, 9, 14, 16, 18, 19, 20, 25, 30, 33, 36, 37, 38, 43, 45, 51, 52, 57, 59, 61, 62, 63, 64], "d": [2, 3, 11, 13, 14, 24, 27, 35, 36, 38, 52, 56, 57, 58, 59, 66], "food": [2, 6, 25, 42, 57, 61, 62, 63, 66], "fresh": [2, 34, 57], "simplerewriterul": [2, 30, 35, 47, 52], "NOT": [2, 34, 57], "negation_rewrit": [2, 57], "templat": [2, 34, 35, 52, 57], "placehold": [2, 30, 35, 52, 57], "wa": [2, 27, 29, 34, 42, 51, 55, 57, 58, 60, 63], "ha": [2, 14, 27, 29, 33, 34, 36, 38, 40, 41, 43, 51, 52, 53, 56, 57, 58, 60, 63, 65], "not_d": [2, 57], "pastrewriterul": [2, 57], "were": [2, 14, 18, 27, 34, 42, 51, 57, 63], "had": [2, 51, 57], "match": [2, 3, 29, 30, 34, 35, 36, 38, 51, 52, 57, 58], "new_nam": [2, 57], "past_d": [2, 57], "go": [2, 22, 30, 34, 39, 57, 60, 63], "ry": [2, 33, 47, 57], "real_ansatz_circuit": [2, 57], "n_qubit": [2, 32, 52, 57], "param": [2, 32, 33, 34, 38, 52, 57], "n_layer": [2, 4, 8, 9, 10, 14, 15, 18, 19, 20, 23, 32, 52, 57, 59, 63, 64, 65], "sym": [2, 11, 24, 57, 66], "y": [2, 3, 7, 8, 9, 13, 14, 16, 18, 19, 20, 33, 34, 36, 38, 48, 52, 57, 58, 62, 63, 64], "rotat": [2, 29, 32, 33, 38, 39, 47, 52, 56, 57, 59, 65], "ladder": [2, 32, 52, 57, 59], "final": [2, 8, 25, 36, 44, 46, 48, 52, 57, 61, 62, 63, 64, 66], "realansatz": [2, 51, 57], "__init__": [2, 7, 8, 18, 30, 32, 33, 34, 35, 36, 37, 38, 40, 52, 57, 62, 63], "ob_map": [2, 32, 52, 57], "n_single_qubit_param": [2, 8, 9, 14, 18, 19, 20, 23, 32, 52, 57, 63, 64], "super": [2, 7, 40, 57, 62], "params_shap": [2, 30, 32, 52, 57], "real_d": [2, 57], "math": [2, 57], "positiveansatz": [2, 57], "_ar": [2, 57], "step": [2, 8, 9, 18, 29, 30, 33, 34, 38, 39, 42, 43, 44, 49, 51, 52, 56, 57, 62, 63, 64, 66], "obtain": [2, 33, 34, 36, 49, 52, 57, 58, 59, 61, 68], "label": [2, 7, 8, 9, 16, 18, 19, 20, 29, 33, 34, 36, 38, 40, 41, 42, 43, 51, 52, 53, 57, 62, 63, 64], "_summarise_box": [2, 57], "domain": [2, 3, 32, 33, 36, 42, 43, 52, 57, 58], "codomain": [2, 3, 32, 33, 35, 36, 52, 57, 58, 60, 62], "construct": [2, 32, 33, 34, 38, 40, 52, 53, 56, 57, 59, 63], "ansatz": [2, 4, 7, 8, 9, 10, 11, 14, 15, 16, 18, 19, 20, 23, 29, 30, 40, 51, 52, 59, 62, 63, 64, 65, 66], "prod": [2, 57], "positive_d": [2, 57], "sympi": [2, 10, 11, 15, 24, 32, 33, 51, 52, 57, 65, 66], "default_sort_kei": [2, 10, 11, 15, 24, 57, 65, 66], "sort": [2, 10, 11, 15, 24, 32, 38, 52, 57, 65, 66], "free_symbol": [2, 10, 11, 15, 24, 33, 57, 65, 66], "kei": [2, 10, 11, 14, 15, 24, 32, 34, 38, 52, 57, 58, 65, 66], "sym_dict": [2, 24, 57], "k": [2, 11, 13, 24, 38, 44, 57, 66], "size": [2, 10, 11, 14, 24, 30, 32, 33, 34, 35, 36, 38, 40, 44, 47, 52, 57, 62, 63, 64, 65, 66], "subbed_diagram": [2, 24, 57], "lambdifi": [2, 10, 11, 24, 33, 57, 65, 66], "b": [3, 8, 13, 14, 18, 29, 32, 36, 52, 53, 56, 58, 63], "c": [3, 9, 11, 14, 19, 20, 36, 38, 51, 52, 56, 58, 64, 66], "abcd": [3, 58], "g": [3, 13, 14, 27, 33, 34, 36, 38, 42, 50, 51, 52, 53, 54, 56, 57, 58, 68], "h": [3, 13, 14, 30, 33, 41, 58], "compos": [3, 29, 34, 38, 52, 58, 61], "associ": [3, 14, 29, 34, 35, 36, 38, 39, 52, 58, 59, 65, 66, 67], "ident": [3, 29, 33, 57, 58], "onli": [3, 14, 18, 27, 32, 33, 34, 35, 36, 38, 40, 41, 51, 52, 56, 57, 58, 61, 64, 68], "arrow": [3, 29, 36, 52, 57, 58], "check": [3, 33, 34, 35, 36, 38, 51, 52, 58], "index": [3, 30, 33, 34, 38, 52, 58], "slice": [3, 58], "revers": [3, 33, 58], "dagger": [3, 33, 47, 58], "combin": [3, 8, 14, 18, 29, 33, 34, 35, 36, 38, 40, 41, 42, 51, 52, 56, 57, 58, 61, 63, 68], "monoid": [3, 12, 13, 14, 29, 30, 33, 43, 53, 56, 57, 60, 68], "repr": [3, 33, 58], "ndagger": [3, 58], "oper": [3, 23, 29, 33, 34, 36, 38, 51, 52, 56, 57, 58, 60, 61], "drawn": [3, 33, 56, 58], "trapezium": [3, 58], "demonstr": [3, 54, 58, 60, 61, 64], "reflect": [3, 29, 49, 58], "along": [3, 29, 34, 58], "horizont": [3, 36, 52, 58], "axi": [3, 23, 29, 33, 34, 58], "asymmetri": [3, 9, 33, 58, 64], "repres": [3, 25, 29, 32, 33, 34, 39, 40, 41, 42, 43, 52, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68], "snake1": [3, 58], "snake2": [3, 58], "equat": [3, 13, 29, 33, 56, 58, 60], "nested_cup": [3, 58], "nested_cap": [3, 58], "nested_snak": [3, 58], "walk": [4, 5, 6, 10, 26, 59, 60, 61, 65], "park": [4, 5, 6, 10, 26, 59, 60, 61, 65], "string": [4, 6, 14, 29, 30, 33, 34, 35, 36, 37, 38, 40, 43, 47, 48, 49, 51, 52, 56, 57, 59, 60, 61, 62, 63, 64, 66, 68], "iqpansatz": [4, 8, 9, 10, 14, 15, 18, 19, 20, 30, 32, 47, 51, 52, 59, 63, 64, 65], "atom": [4, 10, 14, 29, 33, 34, 35, 36, 51, 52, 53, 57, 59, 65], "pytket": [4, 9, 15, 19, 29, 33, 40, 56, 59, 64, 68], "displai": [4, 14, 15, 33, 52, 59], "render_circuit_jupyt": [4, 15, 59], "tket_circuit": [4, 15, 59], "qiskit": [4, 8, 9, 19, 29, 40, 59, 63, 64, 68], "tk_to_qiskit": [4, 59], "qiskit_circuit": [4, 59], "tensor_ansatz": [4, 59], "tensor_diagram": [4, 10, 40, 59, 65], "fontsiz": [4, 5, 6, 9, 10, 11, 14, 25, 33, 59, 60, 61, 64, 65, 66], "spideransatz": [4, 7, 11, 14, 16, 24, 30, 32, 40, 47, 52, 59, 62, 66], "spider_ansatz": [4, 59], "spider_diagram": [4, 59], "mpsansatz": [4, 24, 30, 32, 40, 47, 52, 59], "mps_ansatz": [4, 59], "bond_dim": [4, 14, 24, 32, 52, 59], "mps_diagram": [4, 59], "pars": [5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 19, 20, 30, 34, 36, 45, 49, 51, 52, 56, 60, 61, 62, 63, 64, 65, 66], "preposit": [5, 42, 46, 51, 59, 60, 65], "phrase": [5, 36, 42, 46, 51, 52, 53, 60, 61, 64], "prepositional_phras": [5, 14, 22, 30, 36, 51, 52, 60], "rewritten_diagram": [5, 60], "normalised_diagram": [5, 60], "curry_functor": [5, 60], "curri": [5, 14, 33, 46, 51, 60], "curried_diagram": [5, 60], "homework": [5, 60], "now": [5, 14, 27, 49, 51, 59, 60, 62, 63, 64, 65, 66], "morphism": [5, 29, 33, 35, 52, 56, 58, 60], "create_pregroup_diagram": [5, 33, 56, 60], "unifycodomainrewrit": [5, 30, 35, 47, 51, 52, 60], "output_typ": [5, 30, 35, 52, 60], "spacytokenis": [6, 25, 30, 37, 42, 47, 52, 61], "tokenis": [6, 14, 30, 36, 42, 46, 51, 52], "isn": [6, 25, 34, 42, 61], "worth": [6, 25, 42, 56, 61], "token": [6, 14, 25, 27, 30, 34, 35, 36, 37, 43, 52, 57, 61, 63, 64], "tokenise_sent": [6, 25, 30, 37, 52, 61], "39": [6, 7, 8, 9, 11, 21, 25, 27, 61, 62, 63, 64, 66], "23": [6, 8, 18, 61, 63], "tok_sent": [6, 25, 61], "love": [6, 22, 23, 25, 27, 42, 61], "pizza": [6, 25, 42, 61], "It": [6, 14, 18, 25, 29, 32, 34, 36, 38, 41, 42, 43, 44, 51, 52, 54, 56, 61, 63, 68], "favorit": [6, 25, 42, 61], "could": [6, 18, 25, 27, 33, 34, 41, 42, 44, 61, 63, 64, 68], "eat": [6, 22, 25, 42, 61], "everi": [6, 18, 25, 27, 29, 33, 34, 36, 38, 42, 52, 56, 58, 59, 61, 63, 68], "dai": [6, 25, 34, 42, 61, 63], "split_sent": [6, 14, 25, 30, 37, 52, 61], "spiders_read": [6, 14, 21, 27, 36, 47, 51, 61], "creat": [6, 11, 27, 29, 30, 33, 34, 35, 36, 38, 39, 42, 43, 46, 48, 51, 52, 53, 54, 56, 58, 59, 60, 61, 65], "base": [6, 13, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 46, 47, 48, 49, 51, 52, 54, 56, 57, 59, 64, 65, 66], "spider": [6, 14, 27, 29, 30, 32, 33, 35, 36, 47, 51, 52, 59, 60], "spiders_diagram": [6, 61], "Not": [6, 14, 36, 52, 61], "pregroup": [6, 12, 29, 30, 33, 35, 36, 40, 43, 48, 51, 52, 60, 61, 68], "cups_read": [6, 21, 36, 47, 61], "cups_diagram": [6, 61], "stairs_read": [6, 14, 21, 36, 40, 47, 61], "stairs_diagram": [6, 61], "treeread": [6, 14, 26, 30, 36, 40, 47, 51, 52, 61], "tree_diagram": [6, 61], "treereadermod": [6, 26, 30, 36, 47, 51, 52, 61], "mode": [6, 26, 30, 34, 36, 38, 40, 51, 52, 61], "rule_onli": [6, 26, 30, 36, 52, 61], "torch": [7, 8, 16, 18, 24, 34, 38, 40, 47, 51, 52, 62, 63], "batch_siz": [7, 8, 9, 16, 18, 19, 20, 34, 36, 38, 52, 62, 63, 64], "30": [7, 8, 11, 16, 18, 19, 20, 62, 63, 66], "epoch": [7, 8, 9, 11, 16, 18, 19, 20, 23, 38, 52, 62, 63, 64, 66], "learning_r": [7, 8, 16, 18, 20, 38, 52, 62, 63], "3e": [7, 16, 20, 62], "seed": [7, 8, 9, 11, 16, 18, 19, 20, 23, 34, 38, 52, 62, 63, 64, 66], "read_data": [7, 8, 9, 11, 16, 18, 19, 20, 62, 63, 64, 66], "filenam": [7, 8, 9, 16, 18, 19, 20, 34, 36, 62, 63, 64], "open": [7, 8, 9, 11, 16, 18, 19, 20, 29, 30, 32, 40, 45, 51, 52, 62, 63, 64, 66], "line": [7, 8, 9, 11, 16, 18, 19, 20, 30, 34, 36, 38, 51, 52, 57, 62, 63, 64, 66], "float": [7, 8, 10, 11, 16, 18, 33, 34, 36, 38, 52, 62, 63, 65, 66], "append": [7, 8, 9, 11, 16, 18, 19, 20, 23, 35, 52, 62, 63, 64, 66], "strip": [7, 8, 9, 11, 16, 18, 19, 20, 62, 63, 64, 66], "train_label": [7, 8, 9, 16, 18, 19, 20, 62, 63, 64], "train_data": [7, 8, 9, 11, 16, 18, 19, 20, 27, 62, 63, 64, 66], "dataset": [7, 8, 9, 11, 14, 16, 19, 20, 23, 27, 30, 35, 38, 41, 43, 44, 45, 46, 47, 52, 54, 66], "mc_train_data": [7, 8, 11, 16, 18, 19, 20, 62, 63, 66], "txt": [7, 8, 9, 11, 14, 16, 18, 19, 20, 62, 63, 64, 66], "val_label": [7, 9, 62, 64], "val_data": [7, 9, 62, 64], "mc_dev_data": [7, 8, 16, 18, 19, 20, 62, 63], "test_label": [7, 8, 16, 18, 19, 20, 62, 63], "test_data": [7, 8, 11, 16, 18, 19, 20, 27, 62, 63, 66], "mc_test_data": [7, 8, 11, 16, 18, 19, 20, 62, 63, 66], "skill": [7, 8, 11, 43, 62, 63, 66], "man": [7, 8, 11, 62, 63, 66], "prepar": [7, 8, 11, 14, 33, 34, 39, 40, 42, 46, 54], "sauc": [7, 8, 11, 62, 63, 66], "bake": [7, 8, 11, 62, 63, 66], "dinner": [7, 8, 11, 62, 63, 66], "woman": [7, 8, 11, 62, 63, 66], "cook": [7, 8, 11, 18, 62, 63, 66], "tasti": [7, 8, 11, 62, 63, 66], "meal": [7, 8, 11, 62, 63, 66], "debug": [7, 8, 11, 62, 63, 66], "program": [7, 8, 11, 14, 29, 42, 45, 53, 62, 63, 66], "train_diagram": [7, 8, 9, 11, 16, 18, 19, 20, 23, 27, 62, 63, 64, 66], "sentences2diagram": [7, 8, 9, 11, 16, 18, 19, 20, 27, 30, 36, 52, 62, 63, 64, 66], "val_diagram": [7, 9, 62, 64], "test_diagram": [7, 8, 11, 16, 18, 19, 20, 27, 62, 63, 66], "tag": [7, 8, 9, 16, 18, 19, 20, 34, 36, 42, 43, 45, 52, 62, 63, 64], "turn": [7, 8, 9, 16, 18, 19, 20, 33, 36, 52, 59, 61, 62, 63, 64], "tree": [7, 8, 9, 14, 16, 18, 19, 20, 29, 30, 34, 36, 43, 46, 47, 48, 49, 51, 52, 56, 62, 63, 64, 68], "train_circuit": [7, 8, 9, 11, 16, 18, 19, 20, 23, 62, 63, 64, 66, 68], "val_circuit": [7, 9, 62, 64], "test_circuit": [7, 8, 11, 16, 18, 19, 20, 62, 63, 66, 68], "pytorchmodel": [7, 16, 30, 38, 47, 51, 52, 54, 62, 68], "all_circuit": [7, 8, 9, 11, 16, 18, 19, 20, 40, 62, 63, 64, 66, 68], "from_diagram": [7, 8, 9, 16, 18, 19, 20, 23, 27, 30, 33, 35, 38, 40, 51, 52, 62, 63, 64, 68], "sig": [7, 16, 62], "sigmoid": [7, 8, 11, 16, 18, 62, 63, 66], "accuraci": [7, 8, 9, 11, 16, 19, 20, 40, 41, 43, 46, 54, 62, 64, 66], "y_hat": [7, 8, 9, 16, 18, 19, 20, 38, 52, 62, 63, 64], "sum": [7, 8, 9, 11, 16, 18, 19, 20, 34, 62, 63, 64, 66], "eq": [7, 16, 62], "round": [7, 8, 9, 16, 18, 19, 20, 23, 33, 62, 63, 64], "half": [7, 9, 16, 19, 20, 34, 38, 62, 64], "due": [7, 9, 16, 19, 20, 34, 36, 48, 51, 52, 62, 64], "doubl": [7, 9, 16, 18, 19, 20, 34, 38, 51, 56, 62, 64], "count": [7, 9, 16, 19, 20, 33, 34, 40, 62, 64], "eval_metr": [7, 9, 62, 64], "acc": [7, 8, 9, 16, 18, 19, 20, 62, 63, 64], "pytorchtrain": [7, 8, 16, 30, 38, 40, 46, 47, 52, 54, 62, 63, 68], "loss_funct": [7, 8, 9, 16, 18, 19, 20, 23, 38, 52, 62, 63, 64], "nn": [7, 8, 16, 18, 34, 38, 40, 47, 52, 62, 63], "bcewithlogitsloss": [7, 16, 62], "adamw": [7, 16, 38, 52, 62], "evaluate_funct": [7, 8, 9, 16, 18, 19, 20, 38, 52, 62, 63, 64], "evaluate_on_train": [7, 8, 9, 16, 18, 19, 20, 23, 38, 52, 62, 63, 64], "train_dataset": [7, 8, 9, 16, 18, 19, 20, 23, 38, 52, 62, 63, 64], "val_dataset": [7, 8, 9, 18, 19, 20, 38, 52, 62, 63, 64], "shuffl": [7, 9, 19, 20, 38, 52, 54, 62, 63, 64], "fit": [7, 8, 9, 16, 18, 19, 20, 23, 30, 34, 38, 51, 52, 54, 62, 63, 64], "eval_interv": [7, 38, 52, 62], "log_interv": [7, 16, 19, 20, 23, 38, 52, 62], "loss": [7, 8, 9, 11, 16, 18, 19, 20, 23, 29, 30, 38, 39, 40, 47, 51, 52, 54, 55, 60, 62], "6518": [7, 62], "valid": [7, 8, 9, 14, 16, 18, 19, 20, 30, 34, 35, 36, 38, 43, 51, 52, 62, 63, 64, 68], "7119": [7, 62], "5643": [7, 9, 62, 64], "5500": [7, 62], "5804": [7, 62], "6197": [7, 62], "5714": [7, 9, 62, 64], "6167": [7, 20, 62], "3311": [7, 62], "4577": [7, 62], "8643": [7, 62], "7667": [7, 20, 62], "20": [7, 8, 11, 16, 18, 23, 44, 62, 63, 66], "1054": [7, 62], "2346": [7, 62], "9500": [7, 16, 62], "9333": [7, 8, 18, 62, 63], "25": [7, 8, 16, 18, 33, 62, 63], "1346": [7, 62], "0438": [7, 62], "9857": [7, 8, 16, 62, 63], "0000": [7, 8, 18, 62, 63], "0005": [7, 8, 62, 63], "0283": [7, 62], "9929": [7, 16, 62], "complet": [7, 8, 9, 16, 18, 19, 20, 30, 39, 42, 44, 57, 60, 62, 63, 64, 67, 68], "matplotlib": [7, 8, 9, 16, 19, 20, 23, 33, 62, 63, 64], "pyplot": [7, 8, 9, 16, 19, 20, 23, 62, 63, 64], "plt": [7, 8, 9, 16, 19, 20, 23, 33, 62, 63, 64], "fig1": [7, 16, 62], "ax_tl": [7, 8, 9, 16, 19, 20, 62, 63, 64], "ax_tr": [7, 8, 9, 16, 19, 20, 62, 63, 64], "ax_bl": [7, 8, 9, 16, 19, 20, 62, 63, 64], "ax_br": [7, 8, 9, 16, 19, 20, 62, 63, 64], "subplot": [7, 8, 9, 16, 19, 20, 23, 62, 63, 64], "sharei": [7, 8, 9, 16, 19, 20, 62, 63, 64], "row": [7, 8, 9, 16, 19, 20, 38, 52, 62, 63, 64], "set_titl": [7, 8, 9, 16, 19, 20, 23, 62, 63, 64], "set_xlabel": [7, 8, 9, 16, 19, 20, 23, 62, 63, 64], "set_ylabel": [7, 8, 9, 16, 19, 20, 23, 62, 63, 64], "colour": [7, 8, 9, 16, 19, 20, 23, 62, 63, 64], "iter": [7, 8, 9, 16, 19, 20, 23, 33, 34, 35, 36, 37, 38, 47, 52, 62, 63, 64, 66], "rcparam": [7, 8, 9, 16, 19, 20, 23, 62, 63, 64], "ax": [7, 8, 9, 16, 19, 20, 23, 33, 62, 63, 64], "prop_cycl": [7, 8, 9, 16, 19, 20, 23, 62, 63, 64], "by_kei": [7, 8, 9, 16, 19, 20, 23, 62, 63, 64], "color": [7, 8, 9, 16, 19, 20, 23, 33, 62, 63, 64, 67], "range_": [7, 8, 9, 16, 19, 20, 62, 63, 64], "arang": [7, 8, 9, 16, 19, 20, 62, 63, 64], "plot": [7, 8, 9, 16, 19, 20, 23, 62, 63, 64], "train_epoch_cost": [7, 8, 9, 16, 19, 20, 23, 30, 52, 62, 63, 64], "train_eval_result": [7, 8, 9, 16, 19, 20, 30, 52, 62, 63, 64], "val_cost": [7, 8, 9, 16, 19, 20, 30, 52, 62, 63, 64], "val_eval_result": [7, 8, 9, 16, 19, 20, 30, 52, 62, 63, 64], "test_acc": [7, 16, 19, 20, 62], "item": [7, 8, 9, 14, 16, 18, 29, 34, 38, 62, 63, 64], "mycustommodel": [7, 40, 62], "net": [7, 34, 38, 40, 62, 68], "linear": [7, 8, 18, 29, 34, 36, 38, 40, 52, 56, 58, 62, 63, 68], "forward": [7, 8, 16, 18, 30, 34, 36, 38, 40, 51, 52, 54, 61, 62, 63], "custom": [7, 34, 38, 40, 43, 51, 54, 55, 56], "pass": [7, 18, 25, 27, 33, 34, 35, 36, 38, 40, 49, 51, 52, 54, 56, 57, 60, 61, 62, 63, 64], "here": [7, 25, 29, 30, 32, 34, 40, 41, 43, 45, 52, 55, 56, 57, 61, 62, 63, 64], "pred": [7, 8, 11, 40, 62, 63, 66], "get_diagram_output": [7, 8, 18, 30, 38, 40, 52, 62, 63], "custom_model": [7, 62], "custom_model_train": [7, 62], "6729": [7, 62], "7965": [7, 62], "6429": [7, 62], "3833": [7, 62], "4602": [7, 62], "0563": [7, 62], "7500": [7, 16, 19, 62], "4333": [7, 62], "4580": [7, 62], "0329": [7, 62], "8286": [7, 19, 62], "4667": [7, 20, 62], "1645": [7, 62], "0594": [7, 62], "9429": [7, 8, 18, 20, 62, 63], "1098": [7, 62], "2642": [7, 62], "7333": [7, 18, 19, 62], "1957": [7, 62], "3476": [7, 62], "42": [8, 63], "random": [8, 10, 11, 18, 38, 51, 52, 63, 65, 66], "manual_se": [8, 18, 63], "dev_label": [8, 16, 18, 19, 20, 63], "dev_data": [8, 16, 18, 19, 20, 63], "raw_train_diagram": [8, 9, 18, 19, 20, 63, 64], "raw_dev_diagram": [8, 18, 19, 20, 63], "raw_test_diagram": [8, 18, 19, 20, 63], "removecupsrewrit": [8, 9, 18, 19, 20, 22, 30, 35, 47, 51, 52, 60, 63, 64], "remove_cup": [8, 9, 18, 19, 20, 22, 51, 63, 64], "dev_diagram": [8, 16, 18, 19, 20, 63], "dev_circuit": [8, 16, 18, 19, 20, 63, 68], "pennylanemodel": [8, 18, 30, 38, 47, 51, 52, 54, 63, 68], "backend_config": [8, 9, 19, 33, 38, 40, 52, 63, 64, 68], "default": [8, 14, 25, 29, 31, 32, 33, 34, 35, 36, 38, 40, 51, 52, 57, 61, 62, 63, 64, 68], "below": [8, 14, 25, 34, 36, 38, 40, 41, 48, 52, 54, 56, 57, 59, 61, 63, 64, 66, 68], "pennylan": [8, 29, 30, 32, 38, 40, 44, 46, 51, 52, 59, 63, 68], "simul": [8, 20, 33, 38, 40, 51, 52, 54, 63], "probabl": [8, 18, 23, 29, 33, 34, 36, 38, 40, 41, 51, 52, 63, 68], "initialise_weight": [8, 18, 23, 30, 38, 52, 62, 63], "qml": [8, 35, 44, 51, 52, 63, 68], "default_config": [8, 63, 68], "ibmq": [8, 40, 63], "ibmqx_token": [8, 63], "my_api_token": [8, 63], "save": [8, 9, 18, 30, 33, 34, 38, 51, 52, 63, 64, 68], "path": [8, 33, 34, 36, 38, 52, 55, 58, 63, 68], "devic": [8, 29, 33, 34, 36, 38, 40, 52, 56, 63, 68], "ibmq_manila": [8, 63], "shot": [8, 9, 19, 29, 33, 38, 40, 52, 63, 64], "1000": [8, 38, 40, 52, 63, 68], "q_model": [8, 63], "honeywel": [8, 33, 40, 63, 68], "global": [8, 33, 34, 38, 51, 52, 63, 68], "user_email": [8, 63, 68], "my_honeywel": [8, 63, 68], "quantinuum_": [8, 63], "account_email": [8, 63], "hq": [8, 40, 63, 68], "h1": [8, 40, 63, 68], "1e": [8, 38, 40, 52, 63], "h_model": [8, 63], "argmax": [8, 9, 11, 18, 63, 64, 66], "mse_loss": [8, 18, 63], "adam": [8, 18, 62, 63], "use_tensorboard": [8, 18, 38, 52, 63], "1207": [8, 63], "0919": [8, 63], "7857": [8, 19, 63], "8667": [8, 18, 63], "0486": [8, 63], "1035": [8, 63], "9286": [8, 18, 63], "9000": [8, 18, 63], "0364": [8, 63], "0621": [8, 63], "0466": [8, 63], "0392": [8, 63], "0120": [8, 16, 63], "0126": [8, 63], "0014": [8, 18, 63], "0178": [8, 63], "0022": [8, 63], "0079": [8, 63], "0041": [8, 63], "0061": [8, 63], "0003": [8, 63], "0108": [8, 63], "0001": [8, 18, 63], "0205": [8, 63], "9667": [8, 18, 63], "0281": [8, 63], "0309": [8, 63], "0004": [8, 63], "0314": [8, 63], "0308": [8, 63], "0011": [8, 63], "0286": [8, 63], "19": [8, 18, 63], "fig": [8, 9, 19, 20, 23, 48, 49, 53, 63, 64, 68], "sharex": [8, 9, 19, 20, 63, 64], "9666666666666667": [8, 18, 63], "circ": [8, 11, 18, 56, 58, 63, 66], "prob": [8, 18, 63], "21": [8, 18, 63], "paramet": [8, 10, 13, 14, 15, 27, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 51, 52, 54, 62, 63, 64, 65, 66], "lr": [8, 18, 63], "best": [8, 9, 14, 18, 30, 33, 38, 43, 51, 52, 63, 64], "epoch_loss": [8, 18, 63], "zero_grad": [8, 18, 30, 34, 38, 52, 63], "backward": [8, 18, 30, 34, 38, 52, 58, 61, 63], "dev_acc": [8, 18, 63], "lt": [8, 9, 18, 23, 38, 52, 63, 64], "elif": [8, 18, 63], "earli": [8, 9, 18, 34, 38, 51, 52, 63, 64, 68], "stop": [8, 9, 18, 34, 36, 38, 42, 51, 52, 63, 64], "break": [8, 18, 25, 34, 38, 42, 61, 63], "load": [8, 9, 14, 18, 30, 34, 38, 51, 52, 63, 64], "8359988629817963": [8, 63], "5333333333333333": [8, 63], "19099989160895348": [8, 63], "059448788000736386": [8, 63], "22": [8, 18, 63], "50": [8, 11, 18, 34, 63, 66], "24": [8, 18, 19, 20, 34, 63], "xorsentencemodel": [8, 18, 63], "kwarg": [8, 18, 33, 34, 36, 38, 40, 51, 52, 63], "xor_net": [8, 18, 63], "sequenti": [8, 18, 34, 38, 63], "relu": [8, 18, 63], "diagram_pair": [8, 18, 63], "first_d": [8, 63], "second_d": [8, 63], "zip": [8, 9, 18, 34, 63, 64], "evaluated_pair": [8, 18, 63], "cat": [8, 18, 27, 34, 36, 41, 52, 63], "itertool": [8, 18, 63], "make_pair_data": [8, 18, 63], "pair_diag": [8, 18, 63], "pair_label": [8, 18, 63], "int": [8, 9, 11, 14, 18, 19, 20, 32, 33, 34, 35, 36, 38, 52, 63, 64, 66], "train_pair_circuit": [8, 18, 63], "train_pair_label": [8, 18, 63], "dev_pair_circuit": [8, 18, 63], "dev_pair_label": [8, 18, 63], "test_pair_circuit": [8, 18, 63], "test_pair_label": [8, 18, 63], "26": [8, 18, 63], "train_sampl": [8, 18, 63], "dev_sampl": [8, 18, 63], "test_sampl": [8, 18, 63], "300": [8, 18, 63], "200": [8, 18, 34, 38, 63], "27": [8, 18, 63], "sampl": [8, 18, 34, 42, 44, 63, 68], "28": [8, 18, 25, 63], "all_pair_circuit": [8, 18, 63], "train_pair_dataset": [8, 18, 63], "29": [8, 18, 63], "predict": [8, 11, 18, 29, 38, 41, 42, 51, 52, 54, 63, 64, 66], "flatten": [8, 18, 63], "binary_cross_entropi": [8, 18, 63], "xor_model": [8, 18, 63], "2918784618377686": [8, 63], "53": [8, 18, 63], "722463011741638": [8, 63], "54": [8, 63], "5063610002398491": [8, 63], "019097626209259": [8, 63], "56": [8, 63], "7006355822086334": [8, 63], "31": [8, 63], "95": [8, 63], "32": [8, 63], "xor_label": [8, 63], "first": [8, 18, 27, 29, 34, 36, 39, 42, 43, 48, 49, 51, 52, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68], "two": [8, 14, 25, 27, 29, 32, 33, 34, 36, 38, 40, 41, 51, 52, 56, 58, 59, 60, 61, 62, 63, 66], "entri": [8, 34, 36, 38, 52, 57, 63, 64], "both": [8, 11, 14, 18, 27, 29, 30, 33, 34, 35, 36, 38, 41, 43, 49, 52, 57, 63, 66], "last": [8, 63], "differ": [8, 14, 18, 23, 27, 29, 32, 33, 34, 36, 38, 41, 42, 43, 44, 52, 57, 59, 60, 61, 63, 64, 66, 68], "xor_tensor": [8, 63], "detach": [8, 34, 35, 38, 52, 63], "9858948": [8, 63], "91964245": [8, 63], "03415415": [8, 63], "15316254": [8, 63], "float32": [8, 11, 23, 24, 33, 34, 63, 66], "33": [8, 13, 34, 38, 63], "food_idx": [8, 63], "it_idx": [8, 63], "symbol_weight_map": [8, 30, 52, 63], "dict": [8, 32, 33, 34, 36, 38, 52, 63], "weight": [8, 18, 29, 30, 34, 36, 38, 52, 54, 62, 63], "p_circ": [8, 63], "to_pennylan": [8, 33, 63], "initialise_concrete_param": [8, 63], "unnorm": [8, 33, 34, 63], "3952476": [8, 63], "60475236": [8, 63], "35": [8, 9, 63, 64], "person": [8, 11, 63, 66], "run": [8, 11, 13, 15, 18, 31, 33, 34, 36, 38, 40, 42, 52, 53, 54, 59, 64, 66, 68], "softwar": [8, 29, 30, 62, 63, 66], "92366177": [8, 63], "07633827": [8, 63], "o": [9, 14, 16, 19, 20, 34, 36, 38, 50, 52, 64], "environ": [9, 16, 19, 20, 34, 64], "tokenizers_parallel": [9, 16, 19, 20, 64], "rp_train_data": [9, 64], "rp_test_data": [9, 64], "organ": [9, 34, 43, 64], "church": [9, 64], "establish": [9, 64], "compani": [9, 64], "sell": [9, 64], "soldier": [9, 64], "serv": [9, 64, 68], "sailor": [9, 64], "root_cat": [9, 14, 34, 36, 52, 64], "suppress_except": [9, 36, 52, 64], "raw_val_diagram": [9, 64], "none": [9, 14, 23, 32, 33, 34, 35, 36, 37, 38, 51, 52, 64, 68], "original_diagram": [9, 64], "removed_cups_diagram": [9, 64], "aerbackend": [9, 19, 40, 64], "tketmodel": [9, 19, 30, 38, 47, 51, 52, 54, 64, 68], "compil": [9, 19, 29, 34, 38, 40, 49, 51, 52, 64, 66, 68], "default_compilation_pass": [9, 19, 40, 64, 68], "8192": [9, 19, 50, 64, 68], "binarycrossentropyloss": [9, 19, 20, 30, 38, 41, 47, 51, 52, 54, 64], "builtin": [9, 19, 20, 64], "binari": [9, 11, 19, 20, 30, 34, 36, 38, 40, 50, 52, 62, 63, 64, 66], "cross": [9, 11, 14, 19, 20, 29, 30, 35, 36, 38, 41, 52, 62, 64, 66], "entropi": [9, 11, 19, 20, 38, 41, 52, 62, 64, 66], "error": [9, 19, 20, 29, 34, 36, 38, 51, 52, 60, 63, 64, 68], "bce": [9, 19, 20, 38, 52, 64], "quantumtrain": [9, 19, 20, 23, 30, 38, 40, 47, 51, 52, 54, 64, 68], "spsaoptim": [9, 19, 20, 30, 38, 40, 47, 51, 52, 54, 64], "optim_hyperparam": [9, 19, 20, 23, 38, 52, 64], "05": [9, 19, 33, 64], "06": [9, 19, 20, 64], "001": [9, 15, 38, 52, 64], "log_dir": [9, 38, 52, 64], "relpron": [9, 13, 64], "log": [9, 34, 36, 38, 41, 46, 52, 54, 64], "early_stopping_criterion": [9, 38, 51, 52, 64], "early_stopping_interv": [9, 38, 51, 52, 64], "minimize_criterion": [9, 38, 52, 64], "5620": [9, 64], "4878": [9, 64], "6214": [9, 64], "6613": [9, 64], "7484": [9, 64], "3023": [9, 64], "4786": [9, 64], "4355": [9, 64], "5687": [9, 20, 64], "1669": [9, 64], "4839": [9, 64], "5116": [9, 64], "7920": [9, 64], "6071": [9, 64], "6935": [9, 64], "6042": [9, 64], "9361": [9, 64], "7286": [9, 64], "7742": [9, 64], "6296": [9, 64], "4529": [9, 64], "6000": [9, 18, 19, 20, 64], "5000": [9, 64], "5425": [9, 64], "4265": [9, 64], "5806": [9, 64], "1077": [9, 64], "3139": [9, 64], "3871": [9, 64], "2571": [9, 64], "4732": [9, 64], "6643": [9, 64], "6129": [9, 64], "7144": [9, 64], "9791": [9, 64], "6929": [9, 64], "best_model": [9, 64], "circl": [9, 64], "best_epoch": [9, 64], "black": [9, 64], "fillstyl": [9, 64], "va": [9, 64], "center": [9, 64], "val_acc": [9, 64], "7419354838709677": [9, 64], "john__n": [10, 65], "in__": [10, 65], "park__n": [10, 65], "the__n": [10, 65], "walks__n": [10, 65], "256": [10, 24, 65], "iqp_ansatz": [10, 65], "john__n_0": [10, 65], "john__n_1": [10, 65], "john__n_2": [10, 65], "l_0": [10, 65], "l_1": [10, 65], "l_2": [10, 65], "l_3": [10, 65], "park__n_0": [10, 65], "park__n_1": [10, 65], "park__n_2": [10, 65], "s_0": [10, 15, 65], "rand": [10, 11, 65, 66], "p": [10, 13, 14, 15, 29, 30, 36, 38, 41, 52, 53, 65], "20328544": [10, 65], "6856217": [10, 65], "6337871": [10, 65], "57768928": [10, 65], "tensor_diagram_np": [10, 65], "result": [10, 14, 25, 27, 30, 33, 34, 35, 36, 38, 39, 40, 42, 43, 46, 49, 51, 52, 54, 55, 56, 57, 59, 60, 61, 65, 66, 68], "41306384": [10, 65], "09003165": [10, 65], "jax": [11, 23, 30, 33, 38, 40, 46, 49, 51, 52, 56, 66], "numerical_backend": [11, 38, 51, 52, 66], "set_backend": [11, 33, 66], "read": [11, 14, 30, 34, 36, 46, 51, 52, 58, 62, 63, 64, 66], "fname": [11, 66], "readlin": [11, 66], "target": [11, 32, 33, 34, 35, 36, 38, 52, 62, 63, 64, 66], "ln": [11, 66], "train_target": [11, 66], "test_target": [11, 66], "applic": [11, 13, 14, 29, 30, 34, 36, 38, 41, 49, 52, 53, 56, 61, 66], "assign": [11, 14, 33, 34, 38, 39, 41, 45, 51, 53, 56, 59, 63, 65, 66], "dimens": [11, 14, 29, 32, 33, 34, 38, 51, 52, 53, 56, 57, 59, 60, 62, 65, 66], "space": [11, 13, 25, 29, 32, 33, 36, 38, 52, 53, 56, 59, 61, 65, 66], "vocabulari": [11, 14, 27, 34, 35, 39, 42, 52], "vocab": [11, 66], "5488135": [11, 66], "71518937": [11, 66], "exp": [11, 23, 34, 66], "np_circuit": [11, 66], "comput": [11, 13, 18, 29, 30, 32, 33, 34, 38, 39, 40, 42, 45, 49, 51, 52, 53, 54, 56, 57, 61, 64, 65, 66], "cost": [11, 41, 66], "log2": [11, 66], "jit": [11, 23, 40, 51, 66], "grad": [11, 34, 38, 66], "training_loss": [11, 66], "gradient": [11, 18, 33, 34, 38, 39, 40, 51, 52, 54, 63, 66], "90": [11, 66], "gr": [11, 66], "1838509440422058": [11, 66], "029141228646039963": [11, 66], "014427061192691326": [11, 66], "40": [11, 34, 66], "009020495228469372": [11, 66], "006290055345743895": [11, 66], "60": [11, 19, 20, 44, 66], "004701168276369572": [11, 66], "70": [11, 66], "0036874753423035145": [11, 66], "80": [11, 66], "0029964144341647625": [11, 66], "0025011023972183466": [11, 66], "np_test_circuit": [11, 66], "test_predict": [11, 66], "hit": [11, 66], "8666666666666667": [11, 66], "To": [12, 14, 25, 30, 31, 34, 38, 40, 41, 48, 56, 57, 59, 61, 62, 63, 64, 65, 68], "further": [12, 14, 27, 30, 34, 41, 42, 53, 56, 59, 61, 68], "depth": [12, 14, 35, 52], "necessari": [12, 14, 33, 40, 44, 48, 51, 68], "familiaris": 12, "yourself": [12, 14], "its": [12, 14, 29, 31, 33, 34, 35, 36, 38, 41, 42, 43, 45, 52, 53, 55, 56, 57, 58, 60, 61, 65, 68], "avail": [12, 14, 30, 33, 34, 36, 45, 48, 51, 54, 56, 57, 60, 62, 64, 68], "knowledg": [12, 60], "contribut": [12, 30, 51, 67], "discocat": [12, 13, 27, 29, 30, 36, 42, 48, 51, 52, 59, 60], "classic": [12, 13, 14, 20, 29, 30, 33, 38, 39, 40, 43, 46, 47, 49, 51, 52, 53, 54, 57, 60, 63, 64, 66], "network": [12, 14, 18, 29, 32, 33, 34, 38, 40, 43, 49, 51, 52, 57, 59, 60, 61, 63, 65, 66, 68], "ac2004": [13, 29], "abramski": [13, 29], "coeck": [13, 29, 30], "categor": [13, 29, 36, 41, 52, 56], "semant": [13, 29, 53, 56], "protocol": [13, 33, 34, 47], "lic": 13, "2004": [13, 29], "sc2021": [13, 29, 48, 51], "clark": [13, 29, 30], "someth": [13, 34, 38], "old": [13, 51], "ccg": [13, 14, 29, 34, 35, 36, 47, 48, 49, 51, 52, 56, 61], "transform": [13, 18, 29, 33, 34, 47, 49, 56, 60, 63], "arxiv": [13, 30, 32, 33, 34, 52], "2109": 13, "10044": 13, "2021": [13, 30], "csc2010": [13, 29, 56], "m": [13, 14, 34, 38, 40, 41], "sadrzadeh": [13, 29], "mathemat": [13, 29, 43, 53, 58], "foundat": [13, 29], "distribut": [13, 29, 34, 38, 44, 51, 52, 56, 62, 68], "mean": [13, 23, 27, 29, 33, 34, 36, 38, 41, 42, 44, 52, 53, 60, 62, 63, 66, 68], "lambek": [13, 29, 35, 52, 56, 60], "festschirft": 13, "special": [13, 27, 29, 34, 35, 42, 45, 51, 52, 56, 58], "issu": [13, 30, 34, 44, 55, 64], "linguist": [13, 42, 43, 45], "analysi": [13, 25, 41, 42, 43, 61], "2010": [13, 34], "cw2021": [13, 57], "v": [13, 14, 30, 50], "wang": 13, "semspac": 13, "ftc2020": [13, 29], "de": [13, 30], "felic": [13, 30], "toumi": [13, 30], "discopi": [13, 29, 30, 32, 33, 47, 51, 52], "act": [13, 29, 60], "2020": 13, "gl2012": [13, 54], "gao": [13, 38, 52], "lix": [13, 38, 52], "nelder": [13, 38, 51, 52, 54], "mead": [13, 38, 51, 52, 54], "simplex": [13, 38, 52], "algorithm": [13, 29, 33, 34, 38, 43, 52, 54], "adapt": [13, 32, 33, 34, 38, 52, 59], "51": [13, 38, 52], "259": [13, 38, 52], "277": [13, 38, 52], "1007": [13, 38, 52], "s10589": [13, 38, 52], "010": [13, 34, 38, 52], "9329": [13, 38, 52], "2012": [13, 38, 52], "hea2019": [13, 59], "havl\u00ed\u010dek": 13, "c\u00f3rcole": 13, "temm": 13, "harrow": 13, "kandala": 13, "chow": 13, "gambetta": 13, "supervis": [13, 29, 39, 44, 47, 48, 49, 51, 54], "learn": [13, 18, 27, 29, 30, 38, 39, 40, 42, 43, 45, 48, 49, 51, 52, 54, 63, 64, 68], "enhanc": [13, 68], "featur": [13, 14, 29, 31, 34, 42, 43, 45, 47, 48, 49, 51, 58, 68], "natur": [13, 29, 30, 42, 43, 45], "567": 13, "2019": 13, "hs2007": [13, 29, 48], "hockenmai": [13, 29], "steedman": [13, 29], "ccgbank": [13, 29, 36, 51, 52], "corpu": [13, 29, 36, 42, 48, 52], "deriv": [13, 14, 29, 30, 34, 35, 36, 41, 47, 48, 51, 52, 56, 60, 61, 65], "extract": [13, 39, 42, 43, 45, 51, 55, 64], "penn": [13, 29, 48], "treebank": [13, 29, 48], "volum": [13, 41, 43], "number": [13, 14, 29, 32, 33, 34, 36, 38, 39, 41, 42, 44, 51, 52, 53, 54, 56, 57, 59, 60, 61, 63, 64, 65], "septemb": 13, "2007": 13, "hv2013": [13, 56], "heunen": 13, "vicari": 13, "introduct": [13, 14, 30, 39, 45], "mechan": [13, 29, 34, 38, 51, 58], "cours": [13, 30], "oxford": 13, "univers": [13, 34], "2013": 13, "kar2016": [13, 29, 35, 51, 52, 57], "kartsakli": [13, 30], "coordin": [13, 14, 33, 34, 35, 38, 46, 51, 52, 57, 60], "2016": 13, "kea2014": [13, 29, 57], "pulman": 13, "languag": [13, 29, 30, 34, 36, 41, 42, 43, 45, 48, 52, 57, 68], "compact": [13, 29, 56, 60], "frobeniu": [13, 29], "algebra": [13, 29, 58, 68], "logic": [13, 29, 34, 56], "2014": 13, "kea2021": [13, 30], "fan": [13, 30], "yeung": [13, 30], "pearson": [13, 30], "lorenz": [13, 30], "meichanetzidi": [13, 30], "effici": [13, 40, 42, 43, 51, 59, 63, 64], "librari": [13, 29, 30, 33, 34, 40, 44, 49, 51, 59, 67], "nlp": [13, 25, 29, 41, 42, 44, 45, 48, 51, 53, 61, 66, 68], "2110": [13, 30], "04236": [13, 30], "lam1999": [13, 14, 29, 51, 53, 56], "revisit": 13, "aspect": [13, 33, 41], "1999": [13, 29, 56], "lea2021": [13, 62, 64, 66], "qnlp": [13, 29, 30, 68], "practic": [13, 27, 29, 30, 42, 43, 48, 51, 53, 58, 68], "2102": 13, "12846": 13, "nm1965": [13, 54], "minim": [13, 38, 51, 52], "journal": [13, 30], "308": 13, "1965": 13, "mea2020": [13, 66], "awar": [13, 33, 40, 68], "03756": 13, "oea2021": [13, 54], "ostaszewski": [13, 38, 52], "e": [13, 14, 21, 27, 30, 32, 33, 34, 35, 36, 38, 42, 50, 51, 52, 53, 54, 56, 57, 58, 59, 62, 65, 68], "grant": 13, "benedetti": 13, "parameter": [13, 34], "rea2016": [13, 64], "rimel": 13, "maillard": 13, "polajnar": 13, "rel": [13, 14, 34, 36, 46, 51, 52, 57, 60, 64], "claus": [13, 33, 47, 64], "evalu": [13, 18, 27, 29, 30, 33, 34, 38, 39, 40, 42, 43, 44, 46, 51, 52, 54, 56], "scc2014a": [13, 29, 51, 57], "anatomi": 13, "subject": [13, 22, 34, 60, 61, 64], "pronoun": [13, 46, 51, 57, 60, 64], "scc2014b": [13, 29, 51, 57], "ii": 13, "possess": 13, "sja2019": [13, 51, 57, 59], "sim": [13, 32, 51, 52], "johnson": 13, "aspuru": 13, "guzik": 13, "express": [13, 29, 34, 41, 51, 53, 57], "entangl": [13, 29, 32, 43, 52], "capabl": [13, 14, 34, 40, 42, 43, 51, 68], "hybrid": [13, 30, 38, 40, 46, 51, 52, 54, 62, 64], "1905": [13, 32, 52], "10876": [13, 32, 52], "spa1998": [13, 54], "spall": 13, "simultan": [13, 18, 33, 38, 41, 52, 63, 66], "perturb": [13, 38, 52, 66], "stochast": [13, 38, 52, 66], "ieee": [13, 38, 52], "transact": [13, 51], "aerospac": 13, "electron": [13, 29], "system": [13, 29, 34, 43, 60, 63, 64], "1998": 13, "ste2000": [13, 29], "syntact": [13, 14, 29, 30, 47, 60, 61], "process": [13, 14, 25, 27, 29, 30, 33, 34, 36, 38, 39, 40, 41, 43, 44, 45, 49, 52, 53, 54, 66], "mit": 13, "press": 13, "2000": 13, "yk2021": [13, 29, 48, 56, 61], "version": [13, 14, 29, 33, 34, 36, 38, 41, 51, 52, 56, 66], "framework": [13, 29, 34, 56], "ynm2017": [13, 29, 48], "yoshikawa": 13, "noji": 13, "matsumoto": 13, "supertag": [13, 34, 47], "factor": [13, 29, 33, 38, 39, 52, 64], "acl": 13, "2017": 13, "while": [14, 29, 33, 34, 36, 38, 39, 40, 42, 43, 44, 49, 52, 53, 54, 57, 60, 61, 68], "primarili": [14, 29, 36, 52, 68], "aim": [14, 43, 44, 68], "programmat": 14, "sinc": [14, 25, 27, 29, 30, 33, 34, 35, 36, 38, 42, 43, 48, 49, 51, 52, 55, 56, 57, 60, 61, 62, 64, 65, 68], "equip": [14, 29, 49, 53, 58, 59], "immedi": [14, 34, 38, 48], "easi": [14, 51, 53, 54], "access": [14, 34, 36, 38, 40, 43, 52, 60, 63, 65, 68], "most": [14, 29, 33, 34, 36, 41, 42, 43, 44, 45, 47, 48, 51, 52, 55, 56, 67, 68], "toolkit": [14, 31, 45, 48, 51, 54, 57, 61, 67, 68], "addit": [14, 29, 33, 34, 36, 38, 45, 48, 51, 52, 53, 56, 57, 59, 62], "allow": [14, 18, 29, 30, 33, 34, 36, 38, 40, 42, 48, 51, 52, 53, 58, 59, 60, 63, 68], "dual": [14, 29], "summari": 14, "given": [14, 18, 29, 30, 32, 33, 34, 35, 36, 37, 38, 51, 52, 54, 56, 57, 61, 63, 68], "input_fil": 14, "json": [14, 33, 34, 36, 52], "pickl": [14, 18, 34, 38, 51], "unicod": [14, 33], "ascii": [14, 33, 36, 51, 52], "imag": [14, 33, 41], "png": [14, 33], "pdf": [14, 34], "jpeg": 14, "jpg": 14, "ep": 14, "pgf": 14, "raw": [14, 25, 42, 43, 61], "rgba": 14, "svg": 14, "svgz": 14, "tif": 14, "tiff": 14, "u": [14, 18, 30, 36, 52, 60, 62, 63], "var": [14, 34, 38], "output_fil": 14, "output_dir": 14, "bobcat": [14, 25, 29, 30, 31, 36, 48, 51, 52, 61], "depccg": [14, 29, 36, 48, 51, 52], "stair": [14, 27, 30, 36, 52], "rewrite_rul": 14, "iqp": [14, 29, 32, 52, 59], "mp": [14, 29, 34], "store_arg": 14, "load_arg": 14, "input_sent": 14, "section": [14, 27, 34, 36, 40, 42, 43, 45, 48, 51, 52, 54, 60, 61, 62, 63, 65, 66, 67], "via": [14, 40, 50, 60, 61, 67, 68], "specif": [14, 25, 29, 34, 35, 40, 41, 42, 43, 44, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68], "describ": [14, 29, 33, 34, 54, 66], "straightforward": [14, 41], "formal": [14, 29, 35, 43, 48, 52, 53, 56], "produc": [14, 29, 35, 36, 42, 51, 52, 59, 60, 61, 62, 66, 68], "faithfulli": [14, 48], "mai": [14, 31, 34, 35, 36, 38, 40, 41, 42, 43, 44, 52, 55, 57, 60, 61], "certain": [14, 29, 30, 34, 38, 42, 43, 57, 59, 60, 61], "unari": [14, 30, 34, 35, 36, 51, 52], "order": [14, 25, 27, 29, 32, 33, 34, 38, 40, 42, 48, 49, 51, 52, 53, 56, 58, 59, 60, 61, 63, 64, 65, 66, 68], "later": [14, 56, 61], "instead": [14, 32, 33, 34, 36, 38, 42, 51, 52, 56, 57, 58, 62, 66], "consol": 14, "charact": [14, 33, 34, 36, 51, 52], "entir": [14, 34, 48, 61], "file": [14, 34, 36, 38, 51, 52, 63, 68], "store": [14, 34, 38, 40, 51, 52, 54, 59], "rest": [14, 33, 34, 36, 40, 52, 61, 62], "contain": [14, 29, 33, 34, 35, 36, 37, 38, 40, 47, 49, 51, 52, 53, 54, 56, 57, 60, 64, 67], "one": [14, 27, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 48, 51, 52, 54, 56, 57, 59, 60, 62, 63, 64, 68], "per": [14, 32, 33, 36, 51, 52, 59], "written": [14, 42], "flag": [14, 33, 34, 36, 38, 51, 52], "enough": [14, 29], "ask": [14, 30, 34, 60], "varieti": [14, 29, 41, 42, 44, 47, 54], "folder": [14, 31, 34, 42, 50], "image_fold": 14, "diagram_1": 14, "diagram_2": 14, "current": [14, 29, 33, 34, 36, 38, 48, 51, 52, 54, 61, 68], "possibl": [14, 27, 30, 34, 35, 36, 38, 40, 41, 51, 52, 55, 60, 61, 63, 68], "singl": [14, 27, 32, 33, 34, 36, 37, 38, 41, 52, 56, 57, 59, 60, 61], "paper": [14, 30, 32, 34, 45, 51, 52, 66], "exact": [14, 20, 34, 36, 38, 40, 43, 44, 52, 63], "figur": [14, 33, 68], "font": [14, 33], "specifi": [14, 33, 34, 35, 36, 38, 42, 51, 52, 57, 62, 63, 64], "fig_width": 14, "fig_height": 14, "There": [14, 18, 34, 43, 44, 61, 63], "third": [14, 27], "conform": [14, 35, 52], "definit": [14, 43, 51, 58, 60], "consid": [14, 25, 27, 34, 35, 38, 42, 49, 52, 55, 56, 61], "movi": [14, 42], "ve": 14, "ever": 14, "seen": [14, 29, 53, 57, 59], "bx": [14, 33, 36, 52], "avoid": [14, 18, 33, 34, 38, 44, 51, 63], "mani": [14, 25, 27, 29, 39, 40, 42, 43, 45, 48, 51, 53, 61, 63, 68], "even": [14, 27, 35, 36, 39, 52, 58, 59, 61], "relativeri": 14, "short": [14, 39], "difficult": [14, 61], "where": [14, 27, 29, 30, 33, 34, 36, 37, 38, 39, 40, 41, 44, 45, 51, 52, 56, 58, 59, 61, 62, 63, 64, 68], "diagrammat": [14, 29, 33, 35, 36, 51, 52, 58], "clariti": 14, "been": [14, 34, 36, 43, 51, 52, 56, 63, 65], "requir": [14, 32, 34, 35, 36, 38, 39, 40, 44, 48, 51, 52, 53, 55, 57, 58, 59, 60, 61, 66, 68], "interwoven": [14, 35, 52], "merg": [14, 35, 52, 60], "trade": [14, 29, 35, 41, 52], "off": [14, 29, 35, 41, 52], "simplic": [14, 35, 52], "larger": [14, 35, 42, 51, 52], "might": [14, 27, 34, 35, 36, 39, 42, 49, 52, 53, 55, 61, 68], "lead": [14, 18, 34, 35, 41, 52, 60, 61, 63], "sparsiti": [14, 35, 52], "problem": [14, 29, 34, 35, 38, 41, 43, 48, 51, 52, 55, 57, 59, 60, 63], "dure": [14, 27, 34, 35, 38, 41, 42, 44, 51, 52], "removeswapsrewrit": [14, 30, 35, 47, 51, 52, 60], "user": [14, 34, 36, 38, 40, 48, 51, 52, 56, 59, 60, 67, 68], "encod": [14, 33, 34, 40, 47, 48, 56, 58, 61], "start": [14, 32, 33, 36, 38, 43, 45, 52, 57, 61, 62, 63, 64, 66], "batch": [14, 33, 34, 36, 38, 52, 54, 62, 63, 64], "exactli": [14, 25, 34, 38, 44, 61], "some": [14, 29, 30, 33, 34, 38, 40, 41, 42, 43, 45, 53, 56, 57, 59, 60, 61, 62, 63, 64, 68], "linearread": [14, 30, 36, 47, 52, 61], "too": [14, 57], "complic": [14, 27, 42, 57, 58, 60], "render": [14, 15, 30, 33], "stage": [14, 34, 39, 68], "pipelin": [14, 29, 30, 38, 46, 52, 56, 57, 59, 62, 64, 66], "dim_n": 14, "dim_": 14, "pure": [14, 46, 56, 63], "done": [14, 27, 34, 42, 60, 63, 65, 68], "ccgtree": [14, 30, 36, 47, 48, 51, 52], "____": 14, "_____________": 14, "_____": 14, "_______": 14, "______": 14, "repeat": [14, 33, 44], "yaml": 14, "conf": 14, "time": [14, 27, 33, 34, 35, 38, 40, 41, 42, 44, 51, 52, 60, 63, 64, 66, 68], "taken": [14, 27, 34, 42], "prioriti": [14, 34, 36, 52], "show": [14, 27, 33, 34, 38, 39, 46, 48, 53, 67], "exit": 14, "choic": [14, 29, 30, 40, 41, 49, 53, 59, 61, 64], "output_format": 14, "directli": [14, 23, 29, 30, 34, 35, 36, 51, 52, 57, 58, 61, 68], "image_format": 14, "effect": [14, 33, 34, 38, 43, 64, 68], "output_opt": 14, "keyword": [14, 34, 36, 38, 51, 52, 64], "write": [14, 53], "stdout": 14, "directori": [14, 34, 36, 52], "mutual": 14, "excluss": 14, "assum": [14, 25, 34, 38, 42, 50, 52, 61], "spaci": [14, 25, 36, 37, 42, 52, 61], "exclus": 14, "root_categori": 14, "root": [14, 33, 36, 42, 51, 52, 64], "auxiliari": [14, 42, 46, 57, 60], "connector": [14, 46, 60], "postadverb": [14, 22, 60], "preadverb": [14, 22, 60], "object_rel_pronoun": [14, 22, 60], "subject_rel_pronoun": [14, 22, 60], "ansatz_opt": 14, "max_ord": [14, 24, 32, 52], "futur": [14, 34, 38, 51], "alic": [15, 23, 24, 27], "github": [15, 30, 34, 40, 42, 48, 50, 51], "view": [15, 34, 38, 51, 53], "http": [15, 32, 33, 34, 38, 47, 48, 52], "cqcl": 15, "io": 15, "html": [15, 33, 34], "make": [15, 29, 30, 33, 34, 36, 38, 41, 42, 43, 44, 46, 48, 49, 51, 52, 54, 55, 57, 58, 59, 61, 64], "param_dict": 15, "enumer": [15, 34, 36, 38, 52], "alice__n_0": 15, "alice__n_1": 15, "alice__n_2": 15, "002": 15, "runs__n": 15, "003": 15, "s_1": 15, "004": 15, "symbol_substitut": 15, "dev_dataset": 16, "6386": 16, "7189": 16, "5786": 16, "5333": [16, 18], "5280": 16, "6392": 16, "5857": 16, "5833": 16, "4138": 16, "4924": 16, "1306": 16, "2794": 16, "0595": 16, "9833": 16, "9833333492279053": 16, "classifi": [18, 41, 51, 62, 63, 66, 68], "whether": [18, 33, 34, 35, 36, 38, 43, 52, 63, 64], "talk": [18, 61, 63], "topic": [18, 41, 45, 63], "1542": 18, "2271": 18, "5571": 18, "1318": 18, "2877": 18, "8571": 18, "0677": 18, "1879": 18, "8429": [18, 19], "1274": 18, "1289": 18, "8333": 18, "0604": 18, "1909": 18, "6667": [18, 19, 20], "0572": 18, "1599": 18, "8857": 18, "0147": 18, "1156": 18, "8000": [18, 19, 20], "0057": 18, "0661": 18, "0987": 18, "1099": 18, "0067": 18, "0927": 18, "9714": [18, 20], "0855": 18, "0410": 18, "0431": 18, "0415": 18, "0365": 18, "0260": 18, "0007": 18, "0238": 18, "0002": 18, "0110": 18, "0077": 18, "0047": 18, "0070": 18, "0020": 18, "0059": 18, "0050": 18, "0045": 18, "0053": 18, "0055": 18, "0056": 18, "0058": 18, "prevent": [18, 38, 51, 52, 63], "overfit": [18, 44, 63], "d_type": 18, "8844525516033173": 18, "19278545631095767": 18, "014469785994151607": 18, "9333333333333333": 18, "0006354562428896315": 18, "attempt": [18, 34, 36, 52], "ouput": 18, "simpl": [18, 27, 34, 35, 38, 52, 57, 59, 60, 62, 63, 66, 68], "neural": [18, 40, 43, 61, 63, 68], "xor": [18, 63], "should": [18, 33, 34, 35, 36, 38, 40, 44, 51, 52, 56, 57, 58, 61, 68], "autograd": [18, 34, 38, 51, 63], "our": [18, 30, 56, 62, 63, 68], "guarante": [18, 34, 38, 63], "posit": [18, 30, 33, 34, 36, 38, 41, 42, 51, 52, 63], "dy": [18, 63], "otherwis": [18, 33, 34, 36, 38, 41, 49, 51, 52, 63], "occur": [18, 27, 33, 34, 35, 36, 38, 41, 42, 52, 59, 63], "neuron": [18, 63], "neg": [18, 33, 34, 36, 38, 41, 42, 52, 63, 68], "being": [18, 27, 29, 34, 36, 38, 43, 51, 52, 63], "coupl": [18, 63, 68], "altern": [18, 48, 50, 51, 56, 63, 66], "approach": [18, 43, 44, 63], "involv": [18, 29, 39, 40, 41, 42, 43, 48, 54, 57, 63], "leakyrelu": [18, 63], "activ": [18, 31, 34, 63, 67], "out": [18, 34, 38, 41, 42, 43, 44, 64, 67], "lot": [18, 51, 63], "2415": [18, 63], "ll": [18, 34, 56, 63], "subset": [18, 34, 44, 63], "quickli": [18, 22, 63], "five": 18, "expens": [18, 44, 62], "250532686710358": 18, "1775649935007095": 18, "79": 18, "184345841407776": 18, "74": 18, "0829660682938993": 18, "88": 18, "0021069025970064104": 18, "815": 18, "0008974437660071999": 18, "78": 18, "120": [19, 20], "01": [19, 20, 38, 52, 64], "7806": 19, "7370": 19, "6143": [19, 20], "8200": 19, "3029": 19, "5143": 19, "4167": 19, "36": [19, 20, 34], "5799": 19, "7074": 19, "6357": 19, "48": [19, 20], "2536": 19, "6971": 19, "3525": 19, "6221": 19, "7000": [19, 20], "72": [19, 20], "4108": 19, "4954": 19, "84": [19, 20], "3844": 19, "5546": 19, "8143": [19, 20], "96": [19, 20], "4692": 19, "6456": 19, "6333": [19, 20], "108": [19, 20], "3136": 19, "6517": 19, "1469": 19, "6978": 19, "7666666666666667": 19, "perform": [20, 29, 33, 34, 36, 38, 39, 40, 41, 43, 44, 51, 52, 58, 61, 62, 63, 64, 68], "numpymodel": [20, 23, 30, 38, 47, 51, 52, 54, 68], "use_jit": [20, 23, 38, 40, 51, 52], "use_jax": [20, 38, 52], "6305": 20, "7275": 20, "8510": 20, "6093": 20, "6571": 20, "7777": 20, "2073": 20, "7530": 20, "6857": 20, "2046": 20, "6212": 20, "1950": 20, "7029": 20, "3449": 20, "9571": 20, "2179": 20, "6687": 20, "2575": 20, "6051": 20, "1563": 20, "5788": 20, "6666667": 20, "except": [21, 34, 36, 38, 51, 52], "typeerror": 21, "instanti": [21, 32, 34, 35, 36, 40, 52, 53, 54, 55, 56, 57, 59], "abstract": [21, 29, 32, 33, 35, 36, 37, 38, 43, 47, 49, 52, 53, 54, 57, 58, 59, 68], "hope": 22, "succe": 22, "book": [22, 42, 45], "bed": 22, "cow": 22, "that_subj": 22, "that_obj": 22, "grass": 22, "egg": 22, "ham": 22, "chees": 22, "bend": 22, "dead": 22, "peopl": [22, 43], "dualiti": [22, 35, 51, 52, 60], "bob": [23, 27, 29, 30], "stronglyentanglingansatz": [23, 30, 32, 38, 47, 52, 59], "y_pred": [23, 38, 52], "goal": [23, 41, 43, 62, 64, 66], "minimis": [23, 29, 54], "pauli": [23, 51], "z": [23, 33, 34, 36, 51, 52], "calcul": [23, 32, 33, 34, 38, 40, 41, 52, 54], "therefor": [23, 34, 38, 52, 53, 57], "eigenvalu": 23, "p0": 23, "p1": 23, "21474883": 23, "rotosolveoptim": [23, 30, 38, 47, 52, 54], "tqdm": [23, 64], "trang": 23, "initial_loss": 23, "00": [23, 48], "02": 23, "96it": 23, "std": [23, 34], "mean_loss": 23, "std_loss": 23, "fill_between": 23, "alpha": 23, "clair": 24, "th": [24, 38, 41, 52], "tensornetwork": [24, 33, 38, 51, 52], "tn": [24, 33], "contractor": [24, 33, 56], "auto": [24, 33, 34, 36, 52], "term": [25, 27, 29, 33, 42, 51, 61], "down": [25, 29, 42, 61], "smaller": [25, 29, 34, 40, 42, 44, 61, 62, 66], "call": [25, 29, 33, 34, 35, 36, 38, 42, 48, 49, 52, 56, 58, 61, 64], "know": [25, 30, 45, 61, 64, 66], "what": [25, 34, 36, 52, 57, 61, 68], "kind": [25, 59, 60, 61, 68], "punctuat": [25, 30, 34, 36, 42, 51, 52, 61], "accur": [25, 41, 42, 43, 44, 61, 63], "grammat": [25, 27, 29, 42, 51, 53, 56, 61], "By": [25, 32, 33, 34, 36, 40, 41, 43, 44, 52, 61, 64, 68], "delimit": [25, 61], "whitespac": [25, 36, 51, 52, 61], "work": [25, 27, 29, 30, 31, 33, 34, 38, 39, 47, 52, 53, 55, 61], "rare": [25, 27, 42, 61], "na\u00efv": [25, 61], "white": [25, 33, 61], "proper": [25, 35, 42, 52, 60, 61, 68], "through": [25, 33, 34, 39, 40, 42, 49, 55, 60, 61, 64, 67], "hierarci": [25, 61], "popular": [25, 44, 61, 68], "argument": [25, 29, 30, 34, 36, 38, 51, 52, 56, 57, 61, 64], "onc": [25, 27, 34, 38, 43, 44, 57, 61, 68], "ccg_parser": [26, 36, 47, 52], "no_typ": [26, 30, 36, 52, 61], "rule_typ": [26, 30, 36, 52, 61], "present": [27, 32, 33, 42, 52, 56, 61, 62, 64, 66, 68], "represent": [27, 29, 33, 34, 36, 38, 42, 43, 47, 49, 51, 52, 53, 54, 56, 60, 61, 65, 68], "toi": [27, 63], "dislik": 27, "hate": 27, "charli": 27, "jim": 27, "common": [27, 29, 33, 40, 41, 42, 43, 51, 57], "techniqu": [27, 42, 43, 44, 66], "replac": [27, 30, 32, 34, 35, 36, 38, 42, 51, 52, 57, 59, 60, 66], "less": [27, 35, 42, 44, 52, 63], "unk": [27, 35, 36, 42, 52], "place": [27, 29, 34, 36, 38, 49, 51, 52, 54, 66], "simplifi": [27, 29, 40, 42, 47, 49, 51, 53, 54, 58, 60, 61], "unknownwordsrewriterul": [27, 30, 35, 42, 47, 51, 52], "minimum": [27, 35, 36, 51, 52], "frequenc": [27, 35, 52], "usual": [27, 29, 38, 41, 42, 52, 68], "slightli": 27, "role": [27, 41, 42], "plai": [27, 41], "although": [27, 34, 48], "verb": [27, 29, 42, 56, 57, 60, 61], "typic": [27, 30, 33, 34, 38, 42, 44, 57], "just": [27, 34, 35, 36, 38, 40, 51, 52, 56, 57, 58, 66], "let": [27, 30, 34, 38, 43, 62, 63, 64, 65, 66], "concret": [27, 29, 33, 34, 39, 47, 49, 53, 54, 56, 57, 59, 66], "equival": [27, 33, 34, 36, 38, 52, 62], "bag": [27, 29, 30, 43, 51], "dog": [27, 41, 42], "mice": 27, "unknownwordrewriterul": 27, "least": [27, 32, 35, 52, 60], "unk_wrd_rul": 27, "min_freq": [27, 35, 52], "ignore_typ": [27, 35, 52], "doesn": [27, 34, 64], "meet": [27, 42], "inclus": 27, "condit": [27, 29, 34, 58, 68], "notic": 27, "forc": [27, 34, 36, 52], "rewritten_train_diagram": 27, "rewritten_test_diagram": 27, "thu": [27, 36, 43, 52, 53, 55, 57], "surfac": 27, "under": [27, 30, 33, 34, 36, 38, 47, 48, 52, 54], "occurr": [27, 36, 52], "children": [27, 34, 36, 38, 51, 52], "hide": 27, "seek": [27, 43], "musician": 27, "music": 27, "theatric": 27, "ball": 27, "nice": [27, 29], "account": [27, 29, 40, 42, 51, 63, 68], "tok": [27, 34], "typ": 27, "transit": [27, 29, 34, 38, 53, 56], "These": [27, 34, 38, 41, 42, 43, 56, 58, 60], "becaus": [27, 31, 34, 36, 41, 52, 62, 65], "unseen": [27, 42, 43, 44], "adjoint": [29, 33, 51, 53, 56, 58, 60], "cdot": [29, 41, 53, 56, 60, 65], "side": [29, 35, 36, 52], "plural": 29, "parameteris": [29, 30, 32, 33, 39, 46, 49, 52, 54, 56, 57, 65], "larg": [29, 32, 40, 41, 42, 43, 48, 52, 57, 59, 62, 66], "matrix": [29, 32, 33, 34, 40, 51, 52], "product": [29, 32, 33, 43, 51, 52, 53, 56, 57, 58], "multiset": 29, "relationship": [29, 49], "between": [29, 32, 33, 34, 36, 38, 41, 43, 48, 49, 52, 53, 54, 56, 58, 63, 68], "art": [29, 31, 47, 48, 49, 51], "statist": [29, 31, 38, 43, 48, 49, 52, 68], "togeth": [29, 35, 52, 56, 59, 63, 68], "obei": 29, "depict": 29, "downward": 29, "concav": 29, "context": [29, 33, 34, 38, 41, 42, 56, 60, 62, 66], "mostli": 29, "bridg": [29, 60], "disconnect": 29, "alter": 29, "flow": [29, 51, 62], "rais": [29, 33, 34, 35, 36, 38, 51, 52], "theori": [29, 43, 56, 58], "consist": [29, 34, 36, 38, 42, 48, 51, 52, 56, 58, 60, 62, 64, 66], "collect": [29, 33, 38, 42, 43, 47, 52, 55, 58], "direct": [29, 30, 34, 35, 36, 38, 51, 52, 58, 61], "graph": [29, 33], "basic": [29, 30, 44, 51, 54, 56], "properti": [29, 32, 33, 34, 36, 38, 43, 52, 53, 56, 58], "abil": [29, 43, 51, 53], "cqm": 29, "studi": [29, 30, 43], "paradigm": [29, 53], "scienc": 29, "primit": 29, "physic": [29, 53, 57], "field": [29, 34, 36, 38, 43, 45, 51, 52], "samson": 29, "over": [29, 30, 34, 36, 38, 40, 42, 52, 64], "49": [29, 48], "000": [29, 48], "human": [29, 41, 42, 43, 48, 53], "julia": 29, "combinatori": [29, 36, 48, 52], "inspir": [29, 34, 57], "lexic": [29, 30, 36, 52], "deduct": 29, "proof": [29, 68], "categoris": [29, 41], "mildli": 29, "sensit": [29, 35, 41, 52], "stand": 29, "free": [29, 34, 36, 40, 45, 46, 52, 56, 58, 60, 62, 66, 68], "chomski": 29, "hierarchi": [29, 42, 44, 49, 51, 68], "power": [29, 42, 51, 56], "complex": [29, 33, 34, 36, 38, 40, 43, 44, 52, 68], "symmetr": [29, 51, 58, 62], "symmetri": 29, "caus": [29, 35, 36, 44, 51, 52, 63], "coincid": 29, "often": [29, 41, 68], "non": [29, 33, 34, 36, 38, 40, 51, 52, 56], "within": [29, 34, 38, 42, 52, 57, 60, 64], "upward": [29, 33], "contract": [29, 33, 38, 39, 40, 42, 51, 52, 53, 56, 57, 62, 65, 68], "english": [29, 36, 52], "japanes": [29, 31, 36, 51, 52], "mehrnoosh": 29, "steve": 29, "textrm": 29, "hand": [29, 36, 39, 41, 42, 43, 45, 49, 52, 54], "partial": 29, "sequenc": [29, 30, 33, 34, 36, 43, 51, 52, 59, 60], "gate": [29, 32, 33, 40, 51, 52, 53, 56, 57, 59, 68], "build": [29, 33, 34, 38, 40, 42, 51, 52, 58], "addition": [29, 44, 48, 62], "delta": 29, "otim": [29, 53, 56, 58], "mu": 29, "satisfi": [29, 36, 52, 56, 58, 68], "notion": [29, 58], "preserv": [29, 34, 38, 56], "essenti": [29, 66], "chain": [29, 34, 40, 62, 66], "functori": [29, 56, 60], "accommod": [29, 57, 61], "instantan": [29, 32, 52, 59], "polynomi": [29, 32, 52, 59], "interleav": [29, 32, 35, 52, 59, 60], "hadamard": [29, 32, 51, 52, 59], "diagon": [29, 32, 52, 59], "machin": [29, 30, 40, 41, 42, 43, 45, 51, 54, 55, 68], "estim": [29, 34, 44], "far": [29, 56], "variou": [29, 40, 42, 43, 48, 51, 59, 61], "execut": [29, 34, 38, 59, 60, 68], "hardwar": [29, 33, 34, 38, 39, 40, 43, 52, 53, 56, 60, 66], "hold": [29, 53, 58], "trainabl": [29, 34], "alwai": [29, 34, 38, 51, 52, 57, 68], "pytorch": [29, 33, 34, 38, 40, 44, 45, 46, 49, 51, 52, 54, 56, 62, 66, 68], "pair": [29, 33, 34, 38, 46, 52, 54, 61], "suitabl": [29, 33, 36, 43, 52], "solv": [29, 41, 43, 63, 64], "nisq": [29, 68], "noisi": [29, 40, 68], "intermedi": 29, "scale": [29, 33, 36, 38, 51, 52, 64], "characteris": 29, "processor": [29, 34], "still": [29, 31, 36, 42, 51, 52, 59, 68], "advanc": [29, 30, 34, 54, 58, 62, 63, 64], "reach": [29, 34], "fault": 29, "toler": 29, "nor": 29, "profit": 29, "substanti": [29, 51, 59, 60], "supremaci": 29, "nois": [29, 68], "undesir": 29, "artefact": 29, "outcom": [29, 68], "deviat": 29, "ideal": [29, 53, 68], "tool": [29, 30, 43, 48, 51, 68], "hierarch": 29, "syntax": [29, 30, 42, 43, 45, 46, 48, 49, 51, 68], "differenti": [29, 33, 63, 66], "xanadu": 29, "enabl": [29, 34, 38, 40, 43, 51, 52, 62, 63, 64], "particular": [29, 34, 36, 38, 41, 51, 52, 57], "event": 29, "disregard": 29, "joachim": [29, 56], "theoret": [29, 43], "sometim": [29, 42, 57], "interfac": [29, 30, 33, 36, 47, 48, 51, 52, 54, 57, 62], "sourc": [29, 30, 32, 33, 34, 35, 36, 37, 38, 42, 45, 50, 52, 57], "meta": [29, 34], "ai": [29, 43], "sdk": 29, "ibm": [29, 33, 40, 45, 63, 68], "research": [29, 30, 41, 42, 45], "puls": 29, "initi": [29, 33, 34, 38, 40, 46, 51, 52, 63, 64], "block": [29, 32, 42, 51, 52, 59], "design": [29, 34, 38, 42, 43, 52, 53, 68], "exploit": [29, 43, 51, 68], "phenomena": [29, 43], "superposit": [29, 43], "interfer": [29, 43, 68], "task": [29, 30, 34, 39, 41, 42, 49, 53, 61, 62, 64, 66, 68], "analogu": 29, "bit": [29, 33, 40, 47, 67], "carrier": 29, "spin": 29, "live": [29, 34, 38], "dimension": [29, 38, 40, 52, 59, 62, 63, 64, 65, 66], "vector": [29, 32, 34, 38, 40, 51, 52, 53, 56, 61], "translat": [29, 34, 43, 45, 48, 51, 68], "amen": [29, 49], "procedur": [29, 60, 62], "yank": 29, "simplif": 29, "stretch": [29, 60], "suit": [29, 53], "nativ": [29, 34, 51, 61, 62, 63, 64], "yet": [29, 53], "independ": [29, 49, 53, 59, 60], "decis": [29, 41, 49, 53, 59], "enrich": [29, 53], "part": [29, 31, 34, 35, 36, 38, 39, 42, 43, 45, 52, 61, 63, 65, 66, 68], "angl": [29, 39, 65], "cong": 29, "acycl": 29, "multi": [29, 30, 34, 38, 51, 56], "vertic": [29, 36, 38, 52], "edg": [29, 33, 40], "connect": [29, 33, 48, 59], "predefin": [29, 41], "stylis": 29, "rangl": 29, "platform": [29, 68], "cambridg": 29, "heart": 29, "agnost": 29, "optimis": [29, 38, 40, 49, 51, 52, 62, 66], "code": [29, 32, 33, 34, 36, 47, 51, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "sever": [29, 34, 38, 40, 43, 44, 49, 51, 52, 54], "influenc": 29, "explicit": [29, 51, 61], "modular": 30, "experiment": [30, 34, 68], "quantinuum": [30, 40, 63], "At": [30, 39], "convers": [30, 34, 35, 48, 49, 51, 52, 59, 61], "facilit": [30, 33, 57, 62, 63, 64], "experi": [30, 35, 38, 39, 40, 49, 51, 52, 53, 57, 59, 60, 62, 63, 64, 66, 68], "latest": 30, "higher": [30, 53, 59, 62], "linux": 30, "maco": 30, "window": [30, 51], "instal": [30, 34, 40, 48, 50, 51, 55, 59], "pip": [30, 31, 40, 55, 59], "notebook": [30, 42, 51, 59, 60, 61, 64], "command": [30, 31, 36, 40, 50, 51, 52], "own": [30, 33, 34, 38, 41, 52, 55, 57, 61], "preview": 30, "repositori": [30, 31, 34, 40, 42, 51], "think": 30, "bug": [30, 51], "someon": [30, 39], "respond": [30, 43], "soon": [30, 68], "furthermor": [30, 51, 60, 63, 64, 68], "want": [30, 31, 34, 39, 42, 64], "subscrib": 30, "mail": 30, "touch": 30, "discord": 30, "server": [30, 34, 36, 52], "notifi": 30, "announc": 30, "chat": 30, "licens": [30, 33, 47, 51], "apach": [30, 32, 52], "articl": [30, 45], "kartsaklis2021lambeq": 30, "titl": 30, "fficient": 30, "igh": 30, "evel": 30, "ython": 30, "ibrari": 30, "q": [30, 36, 41, 52], "uantum": 30, "dimitri": 30, "ian": 30, "richi": 30, "anna": 30, "robin": 30, "alexi": 30, "giovanni": 30, "konstantino": 30, "stephen": 30, "year": 30, "preprint": 30, "troubleshoot": [30, 51], "lingust": 30, "workflow": 30, "corpora": [30, 48], "pre": [30, 34, 36, 38, 40, 43, 49, 52, 64], "handl": [30, 34, 38, 44, 46, 51, 61], "unknown": [30, 34, 35, 36, 46, 51, 52], "classif": [30, 40, 43, 51, 62, 64, 66], "metric": [30, 38, 40, 43, 44, 46, 52, 54], "onlin": [30, 36, 48, 51, 52], "organis": [30, 42, 51], "choos": [30, 34, 35, 44, 52, 54, 60, 62, 63], "manual": [30, 34, 36, 50, 52, 54, 62, 63, 64, 66], "rotosolv": [30, 38, 46, 51, 52, 54], "conjunct": [30, 35, 36, 42, 51, 52, 59, 68], "noun_phras": [30, 36, 52], "baseansatz": [30, 32, 47, 52, 57], "__call__": [30, 32, 33, 34, 35, 36, 38, 52], "calculate_loss": [30, 38, 52], "bobcatparseerror": [30, 36, 52], "available_model": [30, 36, 52], "sentences2tre": [30, 36, 52], "ccgbankparseerror": [30, 36, 52], "ccgbankpars": [30, 36, 47, 48, 51, 52], "section2diagram": [30, 36, 52], "section2diagrams_gen": [30, 36, 52], "section2tre": [30, 36, 52], "section2trees_gen": [30, 36, 52], "sentence2tre": [30, 36, 52], "ccgrule": [30, 36, 47, 51, 52], "backward_appl": [30, 36, 52], "backward_composit": [30, 36, 52], "backward_crossed_composit": [30, 36, 52], "backward_type_rais": [30, 36, 52], "forward_appl": [30, 36, 52], "forward_composit": [30, 36, 52], "forward_crossed_composit": [30, 36, 52], "forward_type_rais": [30, 36, 52], "generalized_backward_composit": [30, 36, 52], "generalized_backward_crossed_composit": [30, 36, 52], "generalized_forward_composit": [30, 36, 52], "generalized_forward_crossed_composit": [30, 36, 52], "remove_punctuation_left": [30, 36, 51, 52], "remove_punctuation_right": [30, 36, 52], "check_match": [30, 36, 52], "infer_rul": [30, 36, 51, 52], "resolv": [30, 34, 36, 38, 51, 52, 55], "ccgruleuseerror": [30, 36, 52], "child": [30, 34, 36, 38, 52], "collapse_noun_phras": [30, 36, 51, 52], "from_json": [30, 33, 36, 52], "to_json": [30, 33, 36, 51, 52], "without_trivial_unary_rul": [30, 36, 52], "ccgtype": [30, 36, 47, 51, 52], "conj_tag": [30, 36, 52], "is_atom": [30, 33, 36, 52], "is_complex": [30, 33, 36, 52], "is_conjoin": [30, 36, 52], "is_empti": [30, 33, 36, 52], "is_ov": [30, 36, 52], "is_und": [30, 36, 52], "replace_result": [30, 36, 52], "slash": [30, 34, 36, 52], "to_grammar": [30, 36, 52], "to_str": [30, 36, 52], "checkpoint": [30, 34, 38, 47, 51, 52, 62, 63, 64], "add_mani": [30, 38, 52], "from_fil": [30, 38, 52], "to_fil": [30, 38, 52], "ob_siz": [30, 32, 52], "coordinationrewriterul": [30, 35, 47, 52], "crossentropyloss": [30, 38, 41, 47, 51, 52, 54], "curryrewriterul": [30, 35, 47, 51, 52, 60], "shuffle_data": [30, 38, 52], "depccgparseerror": [30, 36, 52], "depccgpars": [30, 36, 47, 51, 52], "diagramrewrit": [30, 35, 47, 51, 52, 60], "lossfunct": [30, 38, 47, 51, 52, 54], "bond_typ": [30, 32, 52], "mseloss": [30, 38, 41, 47, 51, 52, 54], "from_checkpoint": [30, 38, 52, 62, 64], "neldermeadoptim": [30, 38, 47, 52, 54], "bound": [30, 34, 38, 52], "load_state_dict": [30, 34, 38, 52], "state_dict": [30, 34, 38, 52], "update_hyper_param": [30, 38, 52], "circuit_map": [30, 38, 52], "train_cost": [30, 52], "training_step": [30, 38, 52], "validation_step": [30, 38, 52], "quantummodel": [30, 38, 47, 51, 52, 55], "add_rul": [30, 35, 52], "available_rul": [30, 35, 52], "sim14ansatz": [30, 32, 38, 47, 52, 59], "sim15ansatz": [30, 32, 38, 47, 52, 59], "sim4ansatz": [30, 32, 47, 51, 52, 59], "default_assumpt": [30, 32, 52], "directed_cod": [30, 32, 52], "directed_dom": [30, 32, 52], "sort_kei": [30, 32, 52], "load_training_checkpoint": [30, 38, 52], "save_checkpoint": [30, 38, 52], "available_mod": [30, 36, 52], "tree2diagram": [30, 36, 51, 52], "height": [30, 36, 51, 52], "verbositylevel": [30, 36, 38, 52], "progress": [30, 34, 36, 51, 52], "has_valu": [30, 52], "webparseerror": [30, 36, 52], "webpars": [30, 36, 47, 51, 52, 55], "subpackag": 30, "text2diagram": [30, 48, 51, 52, 61], "usag": [30, 42, 51, 54], "strict": [30, 34, 38, 51, 58, 68], "option": [30, 31, 32, 33, 34, 35, 36, 38, 54, 59, 62, 64, 68], "configur": [30, 34, 38, 51, 52, 63, 64, 68], "glossari": [30, 51], "bibliographi": 30, "resourc": [30, 33, 40, 45, 48, 60, 68], "web": [30, 36, 43, 48, 51, 52], "demo": 30, "fulli": [31, 34, 38, 48, 49, 51, 61], "integr": [31, 34, 38, 47, 48, 51, 68], "extra": [31, 32, 34, 38, 40, 51, 52, 58, 60, 61], "strongli": [31, 32, 48, 52, 63], "recommend": [31, 39, 40, 43, 48, 51, 62, 68], "come": [31, 34, 35, 42, 48, 52, 59, 60], "plan": [31, 51, 68], "separ": [31, 33, 42, 63], "instruct": [31, 40], "homepag": 31, "download": [31, 34, 36, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "script": [31, 34, 51], "contrib": 31, "download_depccg_model": 31, "py": [31, 38, 52], "abc": [32, 33, 35, 36, 37, 38, 47, 52], "callabl": [32, 33, 34, 36, 38, 52, 62, 64], "ndarrai": [32, 33, 38, 52, 65], "bool": [32, 33, 34, 35, 36, 38, 52], "single_qubit_rot": [32, 52], "postselection_basi": [32, 52], "__hash__": [32, 33, 52], "affect": [32, 34, 36, 38, 40, 51, 52], "constructor": [32, 51, 52, 61], "basi": [32, 33, 51, 52], "seri": [32, 52, 61], "cycl": [32, 38, 52], "pg_type": [32, 52], "tupl": [32, 33, 34, 35, 36, 38, 52], "adjac": [32, 33, 52, 59], "crz": [32, 33, 52, 59], "bond": [32, 52, 59], "maximum": [32, 34, 36, 38, 51, 52], "must": [32, 33, 34, 36, 38, 40, 52, 55, 63, 64], "modif": [32, 34, 38, 52, 53, 59], "et": [32, 38, 51, 52], "al": [32, 38, 51, 52], "ring": [32, 52, 59], "crx": [32, 33, 52, 59], "opposit": [32, 33, 52, 59], "orient": [32, 52, 59], "org": [32, 33, 34, 38, 47, 52], "ab": [32, 34, 52], "rx": [32, 33, 47, 52, 59], "three": [32, 36, 51, 52, 59, 61, 64, 68], "rzryrz": [32, 52, 59], "stronglyentanglinglay": [32, 52, 59], "pursuant": [32, 52], "licenc": [32, 52], "architectur": [32, 40, 52, 68], "increas": [32, 34, 41, 42, 51, 52, 68], "subsequ": [32, 34, 38, 42, 52], "assumpt": [32, 52], "augment": [32, 52], "total": [32, 34, 41, 52], "liter": [32, 52], "sqrt": [32, 33, 47, 52, 62], "intern": [33, 34, 47, 49, 51, 54, 67], "bsd": [33, 47], "revis": [33, 34, 47], "entiti": [33, 34, 43, 47], "wind": 33, "apply_functor": 33, "diagramm": [33, 35, 47, 52], "classvar": [33, 36, 52], "classmethod": [33, 34, 35, 36, 38, 52], "_jsondictt": [33, 36, 52], "decod": [33, 34, 51], "is_top_level": 33, "indic": [33, 34, 35, 38, 42, 52, 53, 56, 59], "top": [33, 51, 56], "metadata": [33, 36, 51, 52], "duplic": [33, 34, 38], "said": [33, 34], "unwind": 33, "adjunct": 33, "initialis": [33, 35, 36, 38, 39, 40, 46, 51, 52, 54, 57, 65, 68], "Then": 33, "again": [33, 38, 52, 58, 60, 61, 63], "back": [33, 34, 51], "initvar": 33, "to_left": 33, "to_right": 33, "name_or_ent": 33, "_entitytyp": 33, "subclass": [33, 34, 40, 48, 51, 56, 57], "counit": 33, "ba": [33, 36, 52, 61], "bc": [33, 36, 52], "middl": 33, "morph": 33, "start_wire_idx": 33, "end_wire_idx": 33, "valueerror": [33, 35, 36, 38, 52], "draw_as_nod": 33, "node": [33, 36, 52], "ffffff": 33, "red": 33, "ff0000": 33, "textpad": 33, "pad": [33, 34], "draw_box_label": 33, "ratio": [33, 41], "margin": 33, "nodes": 33, "boxnod": 33, "fontsize_typ": 33, "to_tikz": 33, "tikz": 33, "mirror": [33, 34], "is_dagg": 33, "fa": [33, 36, 52, 61], "fc": [33, 36, 52], "from_discopi": [33, 51], "fx": [33, 36, 52], "is_id": 33, "is_pregroup": 33, "lift": 33, "1804": 33, "07832": 33, "interchang": [33, 42], "notimplementederror": 33, "whenev": [33, 68], "yield": [33, 34, 36, 38, 52], "twice": 33, "offset": 33, "length": [33, 34, 38, 48, 52, 62, 63, 64], "pregroup_normal_form": [33, 35, 52], "normalis": [33, 51, 60], "seper": [33, 63], "diagram_factori": 33, "_diagrammablefactoryt": 33, "render_as_str": 33, "word_spac": [33, 36, 52], "use_at_separ": 33, "dot": 33, "compress_lay": 33, "use_ascii": [33, 36, 52], "compat": [33, 34, 36, 38, 40, 48, 51, 52, 63], "special_box": 33, "then_at": 33, "to_discopi": 33, "export": [33, 56, 59], "transpos": [33, 51], "shown": [33, 49], "arg": [33, 34, 36, 38, 52], "behavior": [33, 34, 38], "static": [33, 34, 36, 38, 52], "checker": 33, "recogn": 33, "duck": 33, "explicitli": [33, 39, 56], "co": [33, 34], "diag": 33, "doc": [33, 34, 38, 42, 50, 51], "_static": 33, "ar_with_cach": 33, "cach": [33, 34, 36, 52], "ob_with_cach": 33, "unpack": 33, "n_legs_in": 33, "n_legs_out": 33, "leg": 33, "factori": 33, "either": [33, 34, 36, 38, 42, 52, 56, 57, 63], "empti": [33, 36, 38, 51, 52], "itself": [33, 34, 38, 45, 58], "conjug": [33, 51], "core": [33, 34, 36, 51, 52], "concretis": 33, "invok": [33, 34, 38, 62], "inherit": [33, 34, 62, 63, 65, 67], "chosen": 33, "_diagrammablefactori": 33, "to_tn": 33, "dangl": 33, "copi": [33, 34, 35, 38, 52], "accord": [33, 36, 52, 53, 54, 61], "easier": [33, 42, 43, 51], "anticonjug": [33, 47], "is_mix": 33, "self_adjoint": 33, "anti": 33, "is_class": 33, "bitstr": 33, "bit_valu": 33, "selfconjug": [33, 47], "phi": 33, "cry": 33, "parametr": [33, 34, 38, 47, 52], "decompos": [33, 51], "phase": 33, "__repr__": 33, "apply_g": 33, "apply_parametrized_g": 33, "Be": 33, "init_and_discard": 33, "generate_cap": 33, "generate_cup": 33, "generate_spid": 33, "diff_method": [33, 38, 52], "pennylanecircuit": [33, 52], "probabilti": [33, 40], "dictionari": [33, 34, 36, 38, 42, 52, 56, 57, 62, 64], "configr": 33, "etc": [33, 34, 38, 50, 54], "plugin": 33, "tk_circuit": 33, "bell_test": 33, "circuit0": 33, "circuit3": 33, "post_select": 33, "known": [33, 41, 44, 48, 55, 58], "densiti": [33, 40, 51], "output_edge_ord": 33, "mixedst": [33, 47], "proport": [33, 41], "real": [33, 40, 41, 43, 54, 68], "around": 33, "bloch": 33, "sphere": 33, "aound": 33, "scalar": [33, 38, 47, 51, 52], "amplifi": 33, "squar": [33, 38, 52, 57, 63], "unus": [33, 38, 51, 52], "unifi": [33, 35, 36, 51, 52], "tensorflow": [33, 34, 45, 51], "moduletyp": [33, 38, 52], "main": [33, 34, 51, 54, 60], "_stack": 33, "_cach": 33, "manag": [33, 54], "get_backend": 33, "overrid": [33, 34, 38, 51, 52], "drawablediagram": 33, "drawabl": 33, "wire_endpoint": 33, "wireendpoint": 33, "carri": [33, 42], "endpoint": [33, 34], "compress": 33, "scale_and_pad": 33, "multipl": [33, 34, 36, 37, 38, 41, 44, 51, 52, 56], "draw_pregroup": 33, "to_gif": 33, "timestep": 33, "500": 33, "loop": [33, 34, 39, 40, 60, 63, 66], "html_ty": 33, "gif": 33, "millisecond": 33, "ipython": 33, "bertforchartclassif": [34, 47], "config": 34, "chartclassifierconfig": 34, "bertpretrainedmodel": [34, 47], "t_destin": [34, 38], "share": [34, 57], "scriptmodul": 34, "active_adapt": 34, "peft": [34, 47], "invit": 34, "huggingfac": 34, "infer": [34, 36, 52], "deal": [34, 42, 43, 57, 64], "accordingli": [34, 43], "previou": [34, 51, 56, 61], "add_adapt": 34, "adapter_config": 34, "adapter_nam": 34, "peftconfig": 34, "prefix": [34, 38, 42, 52], "tune": [34, 44], "prompt": [34, 63], "add_memory_hook": 34, "memori": [34, 38, 40, 52], "hook": [34, 38, 51], "record": [34, 38], "consumpt": 34, "mem_rss_diff": 34, "reset": [34, 38, 52], "zero": [34, 38, 52], "reset_memory_hooks_st": 34, "add_model_tag": 34, "push": 34, "hug": 34, "face": 34, "hub": [34, 47], "Will": 34, "overwrit": [34, 62], "union": [34, 51], "desir": [34, 38, 51], "inject": 34, "automodel": 34, "from_pretrain": 34, "googl": 34, "bert": [34, 36, 43, 47, 52], "namespac": [34, 51], "push_to_hub": 34, "add_modul": [34, 38], "fn": [34, 38], "recurs": [34, 38], "submodul": [34, 38], "init": [34, 38], "no_grad": [34, 38], "init_weight": [34, 38], "fill_": [34, 38], "in_featur": [34, 38], "out_featur": [34, 38], "bia": [34, 38, 44], "requires_grad": [34, 38], "assisted_decod": 34, "base_model": 34, "bodi": 34, "base_model_prefix": 34, "beam_sampl": 34, "beam_search": 34, "bfloat16": [34, 38], "cast": [34, 38], "buffer": [34, 38], "datatyp": [34, 38, 51], "modifi": [34, 38, 40, 54, 56], "member": [34, 38], "xdoctest": [34, 38], "skip": [34, 38], "undefin": [34, 38], "buf": [34, 38], "20l": [34, 38], "1l": [34, 38], "5l": [34, 38], "call_super_init": [34, 38], "can_gener": 34, "compute_transition_scor": 34, "score": [34, 36, 41, 43, 52], "beam_indic": 34, "normalize_logit": 34, "beam": [34, 36, 52], "search": [34, 42, 43], "conveni": [34, 48, 53, 54], "quicki": 34, "longtensor": 34, "second": [34, 36, 39, 52], "sequence_length": 34, "max_length": 34, "shorter": 34, "finish": 34, "eos_token_id": 34, "floattensor": [34, 52], "softmax": 34, "previous": [34, 51, 68], "max_new_token": 34, "element": [34, 38, 42, 52, 57, 59], "num_beam": 34, "vocab_s": 34, "num_return_sequ": 34, "logit": 34, "legaci": [34, 51], "gpt2token": 34, "automodelforcausallm": 34, "gpt2": 34, "openai": 34, "pad_token_id": 34, "todai": 34, "return_tensor": 34, "pt": 34, "greedi": 34, "return_dict_in_gener": 34, "output_scor": 34, "transition_scor": 34, "input_length": 34, "gpt": [34, 43], "famili": 34, "bart": 34, "t5": 34, "is_encoder_decod": 34, "input_id": 34, "generated_token": 34, "5d": 34, "3f": 34, "262": 34, "414": 34, "1110": 34, "609": 34, "618": 34, "356": 34, "859": 34, "58": 34, "460": 34, "508": 34, "reconstruct": 34, "penalti": 34, "tip": 34, "recomput": 34, "output_length": 34, "length_penalti": 34, "generation_config": 34, "reconstructed_scor": 34, "allclos": 34, "sequences_scor": 34, "config_class": 34, "alia": [34, 38], "constrained_beam_search": 34, "contrastive_search": 34, "cpu": [34, 36, 38, 52], "move": [34, 38], "create_extended_attention_mask_for_decod": 34, "input_shap": 34, "attention_mask": 34, "cuda": [34, 38, 52], "gpu": [34, 36, 38, 40, 52], "disable_adapt": 34, "disabl": [34, 38, 64], "attach": 34, "disable_input_require_grad": 34, "_require_grads_hook": 34, "dummy_input": 34, "dummi": 34, "dump_patch": [34, 38], "enable_adapt": 34, "enable_input_require_grad": 34, "embed": [34, 43, 68], "fine": 34, "estimate_token": 34, "input_dict": 34, "helper": [34, 35, 51, 52], "dropout": [34, 38], "batchnorm": [34, 38], "local": [34, 36, 38, 40, 48, 51, 52, 56], "comparison": [34, 38, 68], "similar": [34, 38, 42, 44, 56, 66, 67, 68], "confus": [34, 38], "extra_repr": [34, 38], "re": [34, 38, 60], "floating_point_op": 34, "exclude_embed": 34, "approxim": [34, 38, 51, 52, 62, 63, 66, 68], "neglect": 34, "quadrat": 34, "d_model": 34, "laid": 34, "2001": 34, "08361": 34, "overridden": 34, "albert": 34, "token_type_id": 34, "position_id": 34, "head_mask": 34, "inputs_emb": 34, "tag_label": 34, "span_label": 34, "word_mask": 34, "booltensor": 34, "output_attent": 34, "output_hidden_st": 34, "return_dict": 34, "chartclassifieroutput": 34, "recip": 34, "afterward": 34, "former": 34, "care": [34, 44], "regist": [34, 38], "latter": [34, 38], "silent": 34, "identifi": [34, 41, 42, 43, 44], "pretrained_model_name_or_path": 34, "pathlik": [34, 36, 38, 52], "model_arg": 34, "pretrainedconfig": 34, "cache_dir": [34, 36, 52], "ignore_mismatched_s": 34, "force_download": [34, 36, 52], "local_files_onli": 34, "use_safetensor": 34, "pretrain": 34, "deactiv": 34, "xxx": 34, "those": [34, 35, 52], "downstream": 34, "yyi": 34, "host": [34, 38], "insid": [34, 51], "repo": 34, "pretrainedmodel": [34, 47], "save_pretrain": 34, "my_model_directori": 34, "url": [34, 36, 51, 52], "tf_model": 34, "ckpt": 34, "from_tf": 34, "slower": [34, 40], "flax": 34, "msgpack": 34, "flax_model": 34, "from_flax": 34, "resp": 34, "underli": [34, 36, 52, 60], "automat": [34, 36, 42, 48, 50, 51, 52, 63, 66], "reload": 34, "suppli": [34, 36, 52], "though": [34, 40], "simpler": [34, 41, 56], "resume_download": 34, "delet": [34, 38, 52], "incomplet": 34, "receiv": [34, 38], "resum": 34, "proxi": 34, "foo": 34, "bar": [34, 36, 51, 52], "3128": 34, "hostnam": 34, "4012": 34, "request": 34, "output_loading_info": 34, "ot": 34, "unexpect": [34, 38], "messag": [34, 36, 51, 52], "bearer": 34, "remot": 34, "cli": [34, 51], "login": [34, 40], "branch": 34, "git": 34, "artifact": 34, "pull": 34, "made": [34, 38, 48, 51, 61], "ref": 34, "pr": 34, "pr_number": 34, "acceler": 34, "china": 34, "timeli": 34, "safeti": [34, 36, 51, 52], "site": 34, "_fast_init": 34, "fast": [34, 48, 68], "One": [34, 40, 41, 42, 44, 68], "ensur": [34, 38, 43, 44, 56, 57, 61, 62], "__version__": 34, "major": 34, "11471": 34, "attn_implement": 34, "attent": 34, "relev": [34, 41, 43], "eager": 34, "sdpa": 34, "scaled_dot_product_attent": 34, "master": 34, "flash_attention_2": 34, "dao": 34, "ailab": 34, "flash": 34, "low_cpu_mem_usag": 34, "tri": [34, 38, 68], "1x": 34, "peak": 34, "moment": 34, "torch_dtyp": 34, "float16": [34, 38], "fp32": 34, "end": [34, 38, 51, 52, 63], "precis": [34, 41, 43], "card": 34, "insert": 34, "device_map": 34, "refin": 34, "sent": [34, 63], "ordin": 34, "rank": 34, "alloc": [34, 40], "put": [34, 56], "whole": [34, 36, 38, 51, 52], "hf": 34, "en": [34, 36, 52], "usage_guid": 34, "big_model": 34, "max_memori": 34, "ram": 34, "unset": 34, "offload_fold": 34, "disk": 34, "offload": 34, "offload_state_dict": 34, "hard": [34, 53], "drive": 34, "biggest": 34, "shard": 34, "offload_buff": 34, "quantization_config": 34, "quantizationconfigmixin": 34, "quantiz": 34, "bitsandbyt": 34, "gptq": 34, "load_in_4bit": 34, "load_in_8bit": 34, "quantizationconfigpars": 34, "subfold": 34, "locat": [34, 36, 38, 43, 52], "variant": [34, 36, 38, 52], "pytorch_model": [34, 47], "bin": 34, "safetensor": 34, "updat": [34, 38, 39, 51, 52, 54, 66], "behav": [34, 58], "offlin": 34, "firewal": 34, "bertconfig": 34, "bertmodel": 34, "uncas": 34, "saved_model": 34, "runnabl": 34, "tf": 34, "from_json_fil": 34, "my_tf_model_config": 34, "my_tf_checkpoint": 34, "drop": [34, 51], "switch": [34, 36, 52], "2nd": 34, "deepspe": 34, "generationconfig": 34, "logits_processor": 34, "logitsprocessorlist": 34, "stopping_criteria": 34, "stoppingcriterialist": 34, "prefix_allowed_tokens_fn": 34, "synced_gpu": 34, "assistant_model": 34, "streamer": 34, "basestream": 34, "negative_prompt_id": 34, "negative_prompt_attention_mask": 34, "generatedecoderonlyoutput": 34, "generateencoderdecoderoutput": 34, "generatebeamdecoderonlyoutput": 34, "generatebeamencoderdecoderoutput": 34, "head": [34, 51], "do_sampl": 34, "strategi": 34, "generation_strategi": 34, "vari": [34, 43, 53], "modal": 34, "bos_token_id": 34, "input_valu": 34, "input_featur": 34, "pixel_valu": 34, "unspecifi": 34, "complement": 34, "built": [34, 58], "thrown": [34, 38], "intend": 34, "criteria": 34, "constraint": 34, "batch_id": 34, "inputs_id": 34, "constrain": 34, "autoregress": 34, "retriev": [34, 40, 43], "00904": 34, "continu": [34, 36, 51, 52], "until": [34, 36, 51, 52, 56], "unless": [34, 38], "hang": 34, "assist": [34, 43], "achiev": [34, 38, 53], "forecast": 34, "candid": [34, 35, 52], "much": [34, 40, 42, 51], "faster": [34, 35, 40, 51, 52, 60], "stream": 34, "token_id": 34, "cfg": [34, 51], "api": [34, 43, 47, 48, 49, 51, 57, 63], "decoder_": 34, "util": [34, 38, 47, 60], "modeloutput": 34, "get_adapter_state_dict": 34, "get_buff": [34, 38], "throw": [34, 38], "get_submodul": [34, 38], "explan": [34, 38, 68], "correctli": [34, 38, 41, 52], "qualifi": [34, 38], "referenc": [34, 38], "attributeerror": [34, 38], "invalid": [34, 36, 38, 52], "get_extended_attention_mask": 34, "broadcast": 34, "causal": 34, "mask": [34, 51], "attend": 34, "get_extra_st": [34, 38], "set_extra_st": [34, 38], "picklabl": [34, 38], "serial": [34, 38], "get_head_mask": 34, "num_hidden_lay": 34, "is_attention_chunk": 34, "num_head": 34, "hidden": [34, 51, 54, 63], "chunk": [34, 42], "seq_length": 34, "get_input_embed": 34, "get_memory_footprint": 34, "return_buff": 34, "footprint": 34, "byte": [34, 38, 52], "benchmark": [34, 57, 68], "solut": [34, 38, 52, 68], "56822": 34, "norm": [34, 51, 62], "120266": 34, "get_output_embed": 34, "get_paramet": [34, 38], "get_position_embed": 34, "sai": [34, 38], "net_b": [34, 38], "net_c": [34, 38], "conv": [34, 38], "conv2d": [34, 38], "kernel_s": [34, 38], "stride": [34, 38], "nest": [34, 38, 56, 58], "runtim": [34, 38], "degre": [34, 38, 61, 67], "queri": [34, 36, 38, 43, 48, 51, 52], "against": [34, 35, 38, 52, 55], "named_modul": [34, 38], "gradient_checkpointing_dis": 34, "gradient_checkpointing_en": 34, "gradient_checkpointing_kwarg": 34, "3690": 34, "greedy_search": 34, "group_beam_search": 34, "prune": 34, "mayb": 34, "_init_weight": 34, "invert_attention_mask": 34, "encoder_attention_mask": 34, "invert": 34, "ipu": [34, 38], "is_gradient_checkpoint": 34, "is_paralleliz": 34, "load_adapt": 34, "peft_model_id": 34, "offload_index": 34, "peft_config": 34, "adapter_state_dict": 34, "adapter_kwarg": 34, "authent": 34, "past": 34, "dispatch_model": 34, "find_adapter_config_fil": 34, "descend": [34, 38], "persist": [34, 38], "strictli": [34, 35, 38, 48, 51, 52, 58], "enforc": [34, 38, 51, 58], "inplac": [34, 38], "namedtupl": [34, 38], "missing_kei": [34, 38], "unexpected_kei": [34, 38], "runtimeerror": [34, 38], "load_tf_weight": 34, "tf_checkpoint_path": 34, "main_input_nam": 34, "model_tag": 34, "idx": [34, 38], "named_buff": [34, 38], "remove_dupl": [34, 38], "prepend": [34, 38], "running_var": [34, 38], "named_children": [34, 38], "conv4": [34, 38], "conv5": [34, 38], "memo": [34, 38], "named_paramet": [34, 38], "num_paramet": 34, "only_train": 34, "post_init": 34, "prepare_inputs_for_gener": 34, "prune_head": 34, "heads_to_prun": 34, "repo_id": 34, "use_temp_dir": 34, "commit_messag": 34, "max_shard_s": 34, "5gb": 34, "create_pr": 34, "safe_seri": 34, "commit_descript": 34, "deprecated_kwarg": 34, "upload": [34, 49], "temporari": 34, "repo_url": 34, "lower": [34, 38, 39, 41, 49, 52], "digit": 34, "5mb": 34, "easili": [34, 42], "tier": 34, "colab": 34, "oom": 34, "safer": 34, "finetun": [34, 38], "register_backward_hook": [34, 38], "removablehandl": [34, 38], "deprec": [34, 38, 51], "favor": [34, 38], "register_full_backward_hook": [34, 38], "register_buff": [34, 38], "running_mean": [34, 38], "alongsid": [34, 36, 38, 52], "num_featur": [34, 38], "register_for_auto_class": 34, "auto_class": 34, "slight": 34, "register_forward_hook": [34, 38], "with_kwarg": [34, 38], "always_cal": [34, 38], "won": [34, 38], "possibli": [34, 38], "fire": [34, 38], "register_module_forward_hook": [34, 38], "regardless": [34, 38], "register_forward_pre_hook": [34, 38], "wrap": [34, 38, 51], "And": [34, 38], "forward_pr": [34, 38], "register_module_forward_pre_hook": [34, 38], "grad_input": [34, 38], "grad_output": [34, 38], "technic": [34, 38], "similarli": [34, 38, 51, 61, 68], "caller": [34, 38], "register_module_full_backward_hook": [34, 38], "register_full_backward_pre_hook": [34, 38], "backward_pr": [34, 38], "register_module_full_backward_pre_hook": [34, 38], "register_load_state_dict_post_hook": [34, 38], "incompatible_kei": [34, 38], "register_modul": [34, 38], "register_paramet": [34, 38], "register_state_dict_pre_hook": [34, 38], "keep_var": [34, 38], "requires_grad_": [34, 38], "freez": [34, 38], "individu": [34, 38, 42, 51, 56, 57, 60, 65], "gan": [34, 38], "modeling_util": [34, 47], "moduleutilsmixin": [34, 47], "resize_position_embed": 34, "new_num_position_embed": 34, "resize_token_embed": 34, "new_num_token": 34, "pad_to_multiple_of": 34, "resiz": 34, "tie_weight": 34, "newli": 34, "reduc": [34, 40, 42, 57, 60, 63, 64], "pointer": 34, "anyth": 34, "nvidia": 34, "volta": 34, "tpu": 34, "benefit": 34, "128": 34, "deeplearn": 34, "dl": 34, "tc": 34, "retrieve_modules_from_nam": 34, "add_prefix": 34, "remove_prefix": 34, "reverse_bettertransform": 34, "revert": 34, "to_bettertransform": 34, "save_directori": 34, "is_main_process": 34, "save_funct": 34, "save_peft_format": 34, "race": 34, "precaut": 34, "recov": 34, "parallel": [34, 64], "abl": [34, 42, 43, 60, 63], "bigger": 34, "tradit": [34, 43, 58], "pend": 34, "pushtohubmixin": [34, 47], "set_adapt": 34, "set_input_embed": 34, "share_memori": [34, 38], "share_memory_": [34, 38], "destin": [34, 38], "averag": [34, 38, 54, 66], "shallow": [34, 38], "ordereddict": [34, 38], "supports_gradient_checkpoint": 34, "tie": 34, "torchscript": 34, "clone": 34, "non_block": [34, 38], "memory_format": [34, 38], "channels_last": [34, 38], "Its": [34, 38], "unchang": [34, 38], "asynchron": [34, 38], "pin": [34, 38, 51], "4d": [34, 38], "ignore_w": [34, 38], "determinist": [34, 38, 68], "1913": [34, 38], "3420": [34, 38], "5113": [34, 38], "2325": [34, 38], "float64": [34, 38], "env": [34, 38], "torch_doctest_cuda1": [34, 38], "gpu1": [34, 38], "1914": [34, 38], "5112": [34, 38], "2324": [34, 38], "cdoubl": [34, 38], "3741": [34, 38], "2382": [34, 38], "5593": [34, 38], "4443": [34, 38], "complex128": [34, 38], "6122": [34, 38], "1150": [34, 38], "stabl": [34, 55], "multiheadattent": 34, "optimum": 34, "bettertransform": 34, "fastpath": 34, "speed": [34, 38, 40, 51, 52, 66, 68], "kernel": 34, "fusion": 34, "blog": 34, "medium": 34, "3fbe27d50ab2": 34, "to_empti": [34, 38], "storag": [34, 38], "dst_type": [34, 38], "warn_if_padding_and_no_attention_mask": 34, "xpu": [34, 38], "set_to_non": [34, 38], "dir": 34, "x00": 34, "type_raising_dep_var": 34, "constitu": [34, 42], "bwd": 34, "fwd": 34, "everyth": 34, "var_map": 34, "relabel": 34, "slot": 34, "chartpars": [34, 47], "eisner_normal_form": [34, 36, 52], "max_parse_tre": [34, 36, 52], "beam_siz": [34, 36, 52], "input_tag_score_weight": [34, 36, 52], "missing_cat_scor": [34, 36, 52], "missing_span_scor": [34, 36, 52], "parseresult": 34, "calc_score_binari": 34, "parsetre": [34, 47], "span_scor": 34, "calc_score_unari": 34, "filter_root": 34, "get_span_scor": 34, "cat_id": 34, "span": [34, 36, 52], "set_root_cat": 34, "binary_rul": 34, "type_changing_rul": 34, "type_raising_rul": 34, "dataclass": 34, "plain": 34, "npnp": 34, "integ": [34, 38, 52], "denot": [34, 53], "boolean": 34, "dcl": [34, 36, 52], "strpatht": [34, 36, 38, 52], "unfilled_dep": 34, "filled_dep": 34, "bwd_comp": 34, "coordinated_or_type_rais": 34, "dep": 34, "deps_and_tag": 34, "fwd_comp": 34, "is_leaf": 34, "input_supertag": 34, "tagger": [34, 36, 47, 52], "pretrainedtokenizerfast": 34, "tag_top_k": [34, 36, 52], "tag_prob_threshold": [34, 36, 52], "tag_prob_threshold_strategi": [34, 36, 52], "span_top_k": [34, 36, 52], "span_prob_threshold": [34, 36, 52], "span_prob_threshold_strategi": [34, 36, 52], "taggeroutput": 34, "taggeroutputsent": 34, "prepare_input": 34, "rewritten": [35, 36, 52], "omit": [35, 52], "uncurri": [35, 52], "exchang": [35, 52], "fewer": [35, 52], "gramar": [35, 52], "direction": [35, 52], "sens": [35, 41, 52, 53, 58], "elimin": [35, 51, 52, 60], "scan": [35, 52], "preced": [35, 52], "am": [35, 42, 52], "pattern": [35, 42, 44, 52], "sleep": [35, 52], "case_sensit": [35, 52], "permit": [35, 52], "compar": [35, 38, 41, 44, 51, 52, 53, 56, 58, 60, 68], "henc": [35, 52, 64], "unk_token": [35, 52], "throughout": [35, 51, 52], "with_traceback": 36, "tb": 36, "__traceback__": 36, "model_name_or_path": [36, 52], "xdg_cache_hom": [36, 52], "pipeline_config": [36, 52], "multipli": [36, 52, 65], "threshold": [36, 42, 52], "absolut": [36, 38, 52], "highest": [36, 39, 52], "chart": [36, 52], "eisner": [36, 52], "limit": [36, 40, 42, 52, 60, 68], "fail": [36, 51, 52], "cell": [36, 51, 52, 61, 63], "kept": [36, 52], "sentencetyp": [36, 52], "planar": [36, 52], "failur": [36, 52], "sentencebatchtyp": [36, 52], "report": [36, 52], "section_id": [36, 52], "outlin": [36, 52], "enum": [36, 47, 52], "btr": [36, 52], "conj": [36, 51, 52], "ftr": [36, 52], "gbc": [36, 52], "gbx": [36, 52], "gfc": [36, 52], "gfx": [36, 52], "lp": [36, 52], "rp": [36, 52], "admit": [36, 52], "ccg_type": [36, 47, 52], "resolut": [36, 52], "propag": [36, 51, 52], "incorrectli": [36, 51, 52], "biclosed_typ": [36, 51, 52], "subtre": [36, 52], "leaf": [36, 52], "miscellan": [36, 52], "use_slash": [36, 52], "graphic": [36, 52, 58], "trivial": [36, 52, 59], "happen": [36, 52], "xy": [36, 52], "punc": [36, 51, 52], "conjoin": [36, 52], "map_atom": [36, 52], "atomic_cat": [36, 52], "op": [36, 52], "bracket_cat": [36, 52], "bracketed_cat": [36, 52], "inconsist": [36, 52], "capitalis": [36, 52], "ccgparseerror": [36, 52], "innermost": [36, 52], "lenient": [36, 52], "mainli": [36, 52, 61], "substitut": [36, 39, 51, 52], "inner": [36, 52], "generalis": [36, 52, 61], "abcxi": [36, 52], "noth": [36, 52], "isol": [36, 52], "mid": [36, 52], "sep": [36, 52], "pretti": [36, 52], "stringifi": [36, 52], "placement": [36, 52], "lang": [36, 52], "use_model_unary_rul": [36, 52], "janom": [36, 52], "ja": [36, 52], "elmo": [36, 52], "rebank": [36, 52], "elmo_rebank": [36, 52], "candc": [36, 52], "jigg": [36, 52], "wq": [36, 52], "qem": [36, 52], "nc": [36, 52], "mod": [36, 52], "nm": [36, 52], "fin": [36, 52], "attr": [36, 52], "cont": [36, 52], "da": [36, 52], "hyp": [36, 52], "imp": [36, 52], "stem": [36, 42, 43, 52, 53], "track": [36, 48, 52], "unsupport": [36, 39, 52], "combining_diagram": [36, 52], "word_typ": [36, 52], "start_box": [36, 52], "linearli": [36, 52], "sentinel": [36, 52], "bobcat_pars": [36, 47, 52], "unibox": [36, 52, 61], "layer_1": [36, 52], "oserror": [36, 52], "characters_written": 36, "errno": 36, "posix": 36, "filename2": 36, "strerror": 36, "wrapper": [36, 48, 52], "servic": [36, 51, 52, 68], "urlerror": [36, 52], "blank": [36, 52], "linear_read": [36, 47], "spidersread": 36, "word_sequence_read": [36, 47], "bag_of_words_read": [36, 47], "untokenis": [37, 52], "spars": [38, 52], "epsilon": [38, 52], "09": [38, 52], "jnp": [38, 52], "y_true": [38, 52], "ground": [38, 52], "truth": [38, 52], "hot": [38, 52], "smooth": [38, 52], "constant": [38, 52, 64], "content": [38, 52], "filenotfounderror": [38, 52], "multiclass": [38, 52], "n_class": [38, 52], "ce": [38, 52], "numer": [38, 43, 51, 52, 55], "data1": [38, 52], "full": [38, 44, 48, 52], "mse": [38, 52], "kwd": [38, 52], "checkpoint_path": [38, 52], "my_checkpoint": [38, 52], "loss_fn": [38, 52], "hyperparam": [38, 52], "arraylik": [38, 52], "heavili": [38, 42, 52], "scipi": [38, 52], "hyperparamet": [38, 44, 52, 62, 63, 64], "adjust": [38, 44, 51, 52, 54], "particularli": [38, 48, 51, 52], "maxfev": [38, 52], "initial_simplex": [38, 52], "vertex": [38, 52], "xatol": [38, 52], "converg": [38, 52], "fatol": [38, 52], "greater": [38, 52, 59, 63], "upper": [38, 52], "2d": [38, 52], "fuchang": [38, 52], "han": [38, 52], "snapshot": [38, 52], "_supportsarrai": [38, 52], "_nestedsequ": [38, 52], "datapoint": [38, 52], "analyt": [38, 52], "noise_model": [38, 40, 52], "parameterlist": [38, 52], "optimizer_arg": [38, 52], "evalfunct": [38, 52], "rate": [38, 52, 64], "tensorboard": [38, 52], "visualis": [38, 52, 62, 63, 64], "current_datetime_hostnam": [38, 52], "eval_mod": [38, 52], "interv": [38, 52, 62], "evalmod": [38, 52], "criterion": [38, 52], "maxim": [38, 52], "histori": [38, 52], "save_dict": [38, 52], "get_model_output": [38, 52], "shift": [38, 40, 52, 64], "\u03c0": [38, 52], "radian": [38, 52], "hamiltonian": [38, 52], "spsa": [38, 52, 54, 64, 66], "spproxim": [38, 52], "ieeexplor": [38, 52], "705889": [38, 52], "stabil": [38, 51, 52, 64], "num": [38, 52], "keyerror": [38, 52], "sympysymbol": [38, 52], "flexibl": [39, 60], "ml": [39, 44, 49, 51, 68], "randomli": [39, 65], "opt_einsum": 40, "advantag": [40, 60, 61], "magnitud": 40, "With": [40, 43, 51], "backpropag": 40, "realist": 40, "noiseless": [40, 68], "aer": 40, "my_noise_model": 40, "noisemodel": 40, "cloud": 40, "emul": 40, "ibmq_qasm_simul": 40, "2e": 40, "ibmq_hardware_devic": 40, "treat": [40, 56], "splite": 40, "pregroup_diagram": 40, "feed": 40, "comprehens": [40, 45], "quantinuumbackend": 40, "device_nam": [40, 68], "2048": 40, "fundament": 41, "textual": 41, "vital": 41, "sentiment": [41, 42, 43], "spam": 41, "detect": [41, 57], "identif": 41, "among": [41, 57], "analys": [41, 42, 54, 68], "insight": [41, 43], "autom": 41, "consum": [41, 56], "imposs": [41, 59], "On": [41, 42], "anim": 41, "bird": 41, "divid": 41, "subcategori": 41, "contrast": [41, 65], "world": [41, 43], "scenario": [41, 42, 48, 54, 68], "belong": 41, "y_i": 41, "frac": 41, "sum_": 41, "x_i": 41, "recal": [41, 43, 61], "strength": [41, 44, 68], "weak": [41, 44], "balanc": 41, "roughli": 41, "overal": [41, 44, 56, 61, 63], "filter": [41, 54], "legal": 41, "medic": 41, "diagnosi": 41, "fraud": 41, "compet": 41, "decreas": 41, "vice": [41, 58], "versa": [41, 58], "address": [41, 48, 59, 60, 63, 68], "f1": [41, 43], "harmon": 41, "tradeoff": 41, "driven": 42, "wrongli": 42, "unlabel": 42, "unstructur": 42, "newspap": 42, "websit": [42, 45], "british": 42, "nation": 42, "bnc": 42, "million": 42, "spoken": [42, 43], "wide": [42, 43, 45, 48, 54, 68], "understood": 42, "uniqu": [42, 57, 61], "programm": [42, 62, 66], "lemmat": [42, 43], "lemma": 42, "ran": 42, "inflect": 42, "speech": [42, 43, 45], "po": 42, "meaning": [42, 51], "john_n": 42, "gave_vb": 42, "mary_n": 42, "a_det": 42, "flower_n": 42, "advent": 42, "deep": [42, 43, 68], "redund": [42, 49], "manipul": [42, 53, 54, 58], "quick": 42, "brown": 42, "fox": 42, "jump": 42, "lazi": 42, "clearli": [42, 60], "paragraph": 42, "flight": 42, "pari": 42, "piec": 42, "morphem": 42, "smallest": 42, "themselv": 42, "suffix": 42, "unbeliev": 42, "believ": 42, "amaz": 42, "un": 42, "ing": 42, "subword": 42, "challeng": [42, 45], "oov": 42, "settl": 42, "er": 42, "briefli": 43, "explor": 43, "focus": 43, "interact": [43, 48, 49, 51, 53, 67], "recognit": 43, "broader": [43, 45, 60], "encompass": 43, "principl": 43, "perspect": 43, "analyz": 43, "concern": 43, "conceptu": 43, "closer": 43, "mere": 43, "intellig": 43, "teach": 43, "signific": [43, 63, 67], "toward": 43, "fact": [43, 53, 56, 61, 65, 68], "famou": 43, "ture": 43, "exhibit": 43, "indistinguish": 43, "scope": [43, 45], "simpli": [43, 56], "holist": 43, "captur": 43, "nuanc": 43, "across": [43, 60], "industri": 43, "promin": 43, "chatbot": 43, "virtual": 43, "social": 43, "media": 43, "feedback": 43, "gain": 43, "transcrib": 43, "voic": 43, "summar": 43, "engin": 43, "scrape": 43, "qualiti": 43, "preprocess": [43, 45, 51, 61], "stopword": 43, "logist": 43, "regress": 43, "held": 43, "focu": [43, 67], "concept": [43, 45, 51, 56, 68], "chatgpt": 43, "crucial": [44, 61], "largest": 44, "portion": 44, "never": [44, 63], "partit": 44, "fold": [44, 57], "potenti": [44, 64], "stratifi": 44, "imbalanc": 44, "leav": 44, "computation": [44, 64], "collabor": 44, "vast": 45, "broad": [45, 68], "quit": 45, "beginn": 45, "few": [45, 66], "interest": 45, "apart": 45, "nltk": 45, "great": 45, "jurafski": 45, "martin": 45, "textbook": 45, "cover": [45, 49, 51, 54, 60, 68], "supplementari": 45, "lectur": 45, "slide": 45, "exercis": 45, "deepen": 45, "stanford": 45, "encyclopedia": 45, "philosophi": 45, "area": 45, "coursera": 45, "video": 45, "group": [45, 53], "wealth": 45, "adverb": [46, 60], "lexicon": 47, "modeling_bert": 47, "generationmixin": 47, "peftadaptermixin": 47, "rewrite_diagram": 47, "ccgbank_pars": 47, "ccg_rule": 47, "ccg_tree": 47, "depccg_pars": 47, "tree_read": 47, "web_pars": 47, "spacy_tokenis": 47, "greatli": [47, 49, 51, 58, 68], "nelder_mead_optim": 47, "numpy_model": 47, "quantum_model": 47, "pytorch_train": 47, "rotosolve_optim": 47, "spsa_optim": 47, "tket_model": 47, "pennylane_model": 47, "quantum_train": 47, "passag": 48, "closest": [48, 68], "robust": [48, 68], "arbitrari": 48, "ship": [48, 49], "encapsul": 48, "light": 48, "anymor": [48, 51], "gold": 48, "footnot": 48, "masashi": 48, "catalog": 48, "ldc": 48, "upenn": 48, "edu": 48, "ldc2005t13": 48, "readi": [49, 66], "onto": 49, "plantuml": 50, "java": 50, "dplantuml_limit_s": 50, "jar": 50, "img": 50, "homebrew": 50, "tpng": 50, "puml": 50, "collaps": 51, "refactor": 51, "default_rnd": 51, "offer": [51, 68], "intefac": 51, "adjectiv": 51, "straight": 51, "remove_swap": 51, "correspondingli": 51, "to_biclosed_diagram": 51, "biclos": [51, 56, 61], "replace_cat_result": 51, "particip": 51, "unitaryhack": 51, "2023": 51, "credit": 51, "gopal": 51, "dahal": 51, "ahm": 51, "darwish": 51, "wingcod": 51, "thank": 51, "rather": [51, 56, 63], "e07": 51, "unpickl": 51, "toumix": 51, "everywher": 51, "contructor": 51, "_data": 51, "utilis": 51, "internalis": 51, "bottleneck": 51, "ineffici": 51, "escap": 51, "creation": [51, 57], "broken": 51, "link": [51, 55, 56, 57, 59], "sphinxcontrib": 51, "jqueri": 51, "theme": 51, "disentangl": 51, "jaxlib": 51, "parametris": 51, "pqc": 51, "101": [51, 61], "l2": [51, 62], "uniform": [51, 62], "hash": 51, "hint": 51, "trigger": [51, 55], "brittl": 51, "quot": 51, "400": 51, "postselect": [51, 57], "mismatch": [51, 60], "kentaroaoki": 51, "overhaul": 51, "bump": 51, "xavier_uniform": 51, "slow": [51, 68], "defer": 51, "unaryswap": 51, "unaryboxconstructor": 51, "subsect": [51, 68], "special_cas": 51, "_ob": 51, "amplitud": 51, "make_checkpoint": 51, "inadvert": 51, "lint": 51, "codebas": 51, "stricter": 51, "flake8": 51, "setup": 51, "ssl": 51, "certif": [51, 55], "erron": 51, "significantli": [51, 63], "logarithm": 51, "renam": 51, "ccg2discocat": 51, "onward": 51, "conflict": 51, "customis": 51, "restor": 51, "unavail": 51, "seriou": 51, "termin": 51, "logo": 51, "readm": 51, "pypi": 51, "badg": 51, "No": 52, "stderr": 52, "visual": 52, "studio": 52, "risk": 52, "assembli": 53, "extrem": [53, 59, 60], "constitut": 53, "eman": 53, "bundl": 54, "accross": 54, "routin": 54, "aris": 55, "workaround": 55, "encount": 55, "encourag": [55, 57], "submit": 55, "guard": 55, "safeguard": 55, "protect": 55, "archiv": 55, "model_dir": 55, "upgrad": 55, "learnt": 56, "devis": 56, "thought": 56, "invers": 56, "concaten": [56, 63], "sound": 56, "uncontract": 56, "mathcal": 56, "compositon": 56, "front": 56, "fvect": 56, "mathbb": 56, "freeli": [56, 58], "unshap": 56, "delai": 56, "hilbert": 56, "fhilb": 56, "pi": 56, "consecut": [56, 61], "unpermut": 56, "chapter": 56, "coerc": 56, "find": 57, "accumul": 57, "scratch": 57, "tens": 57, "compound": 57, "wise": 57, "discocirc": 57, "ldot": 58, "1_b": 58, "1_a": 58, "commut": [58, 61], "explain": [58, 60, 62, 67], "declar": 58, "notat": 58, "1_i": 58, "eleg": 58, "calculu": 58, "isomorph": 58, "consequ": 58, "unitor": 58, "coher": 58, "bent": 58, "interoper": 59, "d_n": 59, "d_": 59, "mpss": 59, "matric": 59, "reduct": 59, "ipynb": [59, 60, 61], "excess": 60, "prohibit": 60, "visibl": 60, "unrestrict": 60, "entireti": 60, "discontinu": 60, "arrang": 60, "transpar": 60, "imagin": 60, "probem": 60, "manifest": 61, "begin": 61, "recurr": 61, "fashion": 61, "interpret": 61, "indirect": 61, "chef": [62, 66], "delici": [62, 66], "IT": [62, 66], "130": [62, 66], "operatornam": 62, "flow_cod": 62, "decai": [62, 64], "tensoris": 62, "qapi": 63, "enter": 63, "password": 63, "queu": 63, "remaind": 63, "hypothesis": 63, "hypothesi": 63, "seem": 63, "gone": 64, "jupyt": 64, "impair": 64, "restrict": 64, "hyperamet": 64, "approx": 64, "descent": 66, "click": 67, "zoom": 67, "unlik": 68, "inher": 68, "unreli": 68, "aggreg": 68, "uncertainti": 68, "prone": 68, "environment": 68, "tabl": 68, "concis": 68, "baselin": 68, "simplest": 68, "rough": 68, "faith": 68, "ibmqemulatorbackend": 68, "ibmq_washington": 68, "credenti": 68, "quantinuum_account_email": 68, "assess": 68, "thing": 68, "ultim": 68, "paid": 68, "subscript": 68, "tbl": 68, "quantumservic": 68, "summaris": 68, "effortless": 68, "rich": 68, "almost": 68, "smoothli": 68}, "objects": {"": [[52, 0, 0, "-", "lambeq"]], "lambeq": [[52, 1, 1, "", "AtomicType"], [52, 1, 1, "", "BaseAnsatz"], [52, 1, 1, "", "BinaryCrossEntropyLoss"], [52, 4, 1, "", "BobcatParseError"], [52, 1, 1, "", "BobcatParser"], [52, 4, 1, "", "CCGBankParseError"], [52, 1, 1, "", "CCGBankParser"], [52, 1, 1, "", "CCGParser"], [52, 1, 1, "", "CCGRule"], [52, 4, 1, "", "CCGRuleUseError"], [52, 1, 1, "", "CCGTree"], [52, 1, 1, "", "CCGType"], [52, 1, 1, "", "Checkpoint"], [52, 1, 1, "", "CircuitAnsatz"], [52, 1, 1, "", "CoordinationRewriteRule"], [52, 1, 1, "", "CrossEntropyLoss"], [52, 1, 1, "", "CurryRewriteRule"], [52, 1, 1, "", "Dataset"], [52, 4, 1, "", "DepCCGParseError"], [52, 1, 1, "", "DepCCGParser"], [52, 1, 1, "", "DiagramRewriter"], [52, 1, 1, "", "IQPAnsatz"], [52, 1, 1, "", "LinearReader"], [52, 1, 1, "", "LossFunction"], [52, 1, 1, "", "MPSAnsatz"], [52, 1, 1, "", "MSELoss"], [52, 1, 1, "", "Model"], [52, 1, 1, "", "NelderMeadOptimizer"], [52, 1, 1, "", "NumpyModel"], [52, 1, 1, "", "Optimizer"], [52, 1, 1, "", "PennyLaneModel"], [52, 1, 1, "", "PytorchModel"], [52, 1, 1, "", "PytorchTrainer"], [52, 1, 1, "", "QuantumModel"], [52, 1, 1, "", "QuantumTrainer"], [52, 1, 1, "", "Reader"], [52, 1, 1, "", "RemoveCupsRewriter"], [52, 1, 1, "", "RemoveSwapsRewriter"], [52, 1, 1, "", "RewriteRule"], [52, 1, 1, "", "Rewriter"], [52, 1, 1, "", "RotosolveOptimizer"], [52, 1, 1, "", "SPSAOptimizer"], [52, 1, 1, "", "Sim14Ansatz"], [52, 1, 1, "", "Sim15Ansatz"], [52, 1, 1, "", "Sim4Ansatz"], [52, 1, 1, "", "SimpleRewriteRule"], [52, 1, 1, "", "SpacyTokeniser"], [52, 1, 1, "", "SpiderAnsatz"], [52, 1, 1, "", "StronglyEntanglingAnsatz"], [52, 1, 1, "", "Symbol"], [52, 1, 1, "", "TensorAnsatz"], [52, 1, 1, "", "TketModel"], [52, 1, 1, "", "Tokeniser"], [52, 1, 1, "", "Trainer"], [52, 1, 1, "", "TreeReader"], [52, 1, 1, "", "TreeReaderMode"], [52, 1, 1, "", "UnifyCodomainRewriter"], [52, 1, 1, "", "UnknownWordsRewriteRule"], [52, 1, 1, "", "VerbosityLevel"], [52, 4, 1, "", "WebParseError"], [52, 1, 1, "", "WebParser"], [32, 0, 0, "-", "ansatz"], [34, 0, 0, "-", "bobcat"], [35, 0, 0, "-", "rewrite"], [36, 0, 0, "-", "text2diagram"], [37, 0, 0, "-", "tokeniser"], [38, 0, 0, "-", "training"]], "lambeq.AtomicType": [[52, 2, 1, "", "CONJUNCTION"], [52, 2, 1, "", "NOUN"], [52, 2, 1, "", "NOUN_PHRASE"], [52, 2, 1, "", "PREPOSITIONAL_PHRASE"], [52, 2, 1, "", "PUNCTUATION"], [52, 2, 1, "", "SENTENCE"], [52, 2, 1, "", "name"]], "lambeq.BaseAnsatz": [[52, 3, 1, "", "__call__"], [52, 3, 1, "", "__init__"]], "lambeq.BinaryCrossEntropyLoss": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "calculate_loss"]], "lambeq.BobcatParseError": [[52, 3, 1, "", "__init__"]], "lambeq.BobcatParser": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "available_models"], [52, 3, 1, "", "sentences2trees"]], "lambeq.CCGBankParseError": [[52, 3, 1, "", "__init__"]], "lambeq.CCGBankParser": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "section2diagrams"], [52, 3, 1, "", "section2diagrams_gen"], [52, 3, 1, "", "section2trees"], [52, 3, 1, "", "section2trees_gen"], [52, 3, 1, "", "sentences2trees"]], "lambeq.CCGParser": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "sentence2diagram"], [52, 3, 1, "", "sentence2tree"], [52, 3, 1, "", "sentences2diagrams"], [52, 3, 1, "", "sentences2trees"]], "lambeq.CCGRule": [[52, 2, 1, "", "BACKWARD_APPLICATION"], [52, 2, 1, "", "BACKWARD_COMPOSITION"], [52, 2, 1, "", "BACKWARD_CROSSED_COMPOSITION"], [52, 2, 1, "", "BACKWARD_TYPE_RAISING"], [52, 2, 1, "", "CONJUNCTION"], [52, 2, 1, "", "FORWARD_APPLICATION"], [52, 2, 1, "", "FORWARD_COMPOSITION"], [52, 2, 1, "", "FORWARD_CROSSED_COMPOSITION"], [52, 2, 1, "", "FORWARD_TYPE_RAISING"], [52, 2, 1, "", "GENERALIZED_BACKWARD_COMPOSITION"], [52, 2, 1, "", "GENERALIZED_BACKWARD_CROSSED_COMPOSITION"], [52, 2, 1, "", "GENERALIZED_FORWARD_COMPOSITION"], [52, 2, 1, "", "GENERALIZED_FORWARD_CROSSED_COMPOSITION"], [52, 2, 1, "", "LEXICAL"], [52, 2, 1, "", "REMOVE_PUNCTUATION_LEFT"], [52, 2, 1, "", "REMOVE_PUNCTUATION_RIGHT"], [52, 2, 1, "", "UNARY"], [52, 2, 1, "", "UNKNOWN"], [52, 3, 1, "", "__call__"], [52, 3, 1, "", "apply"], [52, 3, 1, "", "check_match"], [52, 3, 1, "", "infer_rule"], [52, 3, 1, "", "resolve"], [52, 5, 1, "", "symbol"]], "lambeq.CCGRuleUseError": [[52, 3, 1, "", "__init__"]], "lambeq.CCGTree": [[52, 3, 1, "", "__init__"], [52, 5, 1, "", "child"], [52, 3, 1, "", "collapse_noun_phrases"], [52, 3, 1, "", "deriv"], [52, 3, 1, "", "from_json"], [52, 5, 1, "", "left"], [52, 5, 1, "", "right"], [52, 5, 1, "", "text"], [52, 3, 1, "", "to_diagram"], [52, 3, 1, "", "to_json"], [52, 3, 1, "", "without_trivial_unary_rules"]], "lambeq.CCGType": [[52, 2, 1, "", "CONJUNCTION"], [52, 2, 1, "", "CONJ_TAG"], [52, 2, 1, "", "NOUN"], [52, 2, 1, "", "NOUN_PHRASE"], [52, 2, 1, "", "PREPOSITIONAL_PHRASE"], [52, 2, 1, "", "PUNCTUATION"], [52, 2, 1, "", "SENTENCE"], [52, 3, 1, "", "__init__"], [52, 5, 1, "", "argument"], [52, 5, 1, "", "direction"], [52, 2, 1, "", "is_atomic"], [52, 2, 1, "", "is_complex"], [52, 5, 1, "", "is_conjoinable"], [52, 2, 1, "", "is_empty"], [52, 2, 1, "", "is_over"], [52, 2, 1, "", "is_under"], [52, 5, 1, "", "left"], [52, 5, 1, "", "name"], [52, 3, 1, "", "over"], [52, 3, 1, "", "parse"], [52, 3, 1, "", "replace"], [52, 3, 1, "", "replace_result"], [52, 5, 1, "", "result"], [52, 5, 1, "", "right"], [52, 3, 1, "", "slash"], [52, 3, 1, "", "split"], [52, 3, 1, "", "to_grammar"], [52, 3, 1, "", "to_string"], [52, 3, 1, "", "under"]], "lambeq.Checkpoint": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "add_many"], [52, 3, 1, "", "from_file"], [52, 3, 1, "", "to_file"]], "lambeq.CircuitAnsatz": [[52, 3, 1, "", "__call__"], [52, 3, 1, "", "__init__"], [52, 3, 1, "", "ob_size"], [52, 3, 1, "", "params_shape"]], "lambeq.CoordinationRewriteRule": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "matches"], [52, 3, 1, "", "rewrite"]], "lambeq.CrossEntropyLoss": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "calculate_loss"]], "lambeq.CurryRewriteRule": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "matches"], [52, 3, 1, "", "rewrite"]], "lambeq.Dataset": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "shuffle_data"]], "lambeq.DepCCGParseError": [[52, 3, 1, "", "__init__"]], "lambeq.DepCCGParser": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "sentence2diagram"], [52, 3, 1, "", "sentence2tree"], [52, 3, 1, "", "sentences2trees"]], "lambeq.DiagramRewriter": [[52, 3, 1, "", "__call__"], [52, 3, 1, "", "matches"], [52, 3, 1, "", "rewrite"]], "lambeq.IQPAnsatz": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "circuit"], [52, 3, 1, "", "params_shape"]], "lambeq.LinearReader": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "sentence2diagram"]], "lambeq.LossFunction": [[52, 3, 1, "", "__call__"], [52, 3, 1, "", "__init__"], [52, 3, 1, "", "calculate_loss"]], "lambeq.MPSAnsatz": [[52, 2, 1, "", "BOND_TYPE"], [52, 3, 1, "", "__call__"], [52, 3, 1, "", "__init__"]], "lambeq.MSELoss": [[52, 3, 1, "", "calculate_loss"]], "lambeq.Model": [[52, 3, 1, "", "__call__"], [52, 3, 1, "", "__init__"], [52, 3, 1, "", "forward"], [52, 3, 1, "", "from_checkpoint"], [52, 3, 1, "", "from_diagrams"], [52, 3, 1, "", "get_diagram_output"], [52, 3, 1, "", "initialise_weights"], [52, 3, 1, "", "load"], [52, 3, 1, "", "save"]], "lambeq.NelderMeadOptimizer": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "backward"], [52, 2, 1, "", "bounds"], [52, 3, 1, "", "load_state_dict"], [52, 2, 1, "", "model"], [52, 3, 1, "", "objective"], [52, 3, 1, "", "project"], [52, 3, 1, "", "state_dict"], [52, 3, 1, "", "step"], [52, 3, 1, "", "update_hyper_params"]], "lambeq.NumpyModel": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "forward"], [52, 3, 1, "", "get_diagram_output"], [52, 2, 1, "", "lambdas"], [52, 2, 1, "", "symbols"], [52, 2, 1, "", "weights"]], "lambeq.Optimizer": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "backward"], [52, 3, 1, "", "load_state_dict"], [52, 3, 1, "", "state_dict"], [52, 3, 1, "", "step"], [52, 3, 1, "", "zero_grad"]], "lambeq.PennyLaneModel": [[52, 3, 1, "", "__init__"], [52, 2, 1, "", "circuit_map"], [52, 3, 1, "", "forward"], [52, 3, 1, "", "from_diagrams"], [52, 3, 1, "", "get_diagram_output"], [52, 3, 1, "", "initialise_weights"], [52, 2, 1, "", "symbol_weight_map"], [52, 2, 1, "", "symbols"], [52, 2, 1, "", "training"], [52, 2, 1, "", "weights"]], "lambeq.PytorchModel": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "forward"], [52, 3, 1, "", "get_diagram_output"], [52, 3, 1, "", "initialise_weights"], [52, 2, 1, "", "symbols"], [52, 2, 1, "", "training"], [52, 2, 1, "", "weights"]], "lambeq.PytorchTrainer": [[52, 3, 1, "", "__init__"], [52, 2, 1, "", "model"], [52, 2, 1, "", "train_costs"], [52, 2, 1, "", "train_epoch_costs"], [52, 2, 1, "", "train_eval_results"], [52, 3, 1, "", "training_step"], [52, 2, 1, "", "val_costs"], [52, 2, 1, "", "val_eval_results"], [52, 3, 1, "", "validation_step"]], "lambeq.QuantumModel": [[52, 3, 1, "", "__call__"], [52, 3, 1, "", "__init__"], [52, 3, 1, "", "forward"], [52, 3, 1, "", "get_diagram_output"], [52, 3, 1, "", "initialise_weights"], [52, 2, 1, "", "symbols"], [52, 2, 1, "", "weights"]], "lambeq.QuantumTrainer": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "fit"], [52, 2, 1, "", "model"], [52, 2, 1, "", "train_costs"], [52, 2, 1, "", "train_epoch_costs"], [52, 2, 1, "", "train_eval_results"], [52, 3, 1, "", "training_step"], [52, 2, 1, "", "val_costs"], [52, 2, 1, "", "val_eval_results"], [52, 3, 1, "", "validation_step"]], "lambeq.Reader": [[52, 3, 1, "", "sentence2diagram"], [52, 3, 1, "", "sentences2diagrams"]], "lambeq.RemoveCupsRewriter": [[52, 3, 1, "", "matches"], [52, 3, 1, "", "rewrite"]], "lambeq.RemoveSwapsRewriter": [[52, 3, 1, "", "matches"], [52, 3, 1, "", "rewrite"]], "lambeq.RewriteRule": [[52, 3, 1, "", "__call__"], [52, 3, 1, "", "matches"], [52, 3, 1, "", "rewrite"]], "lambeq.Rewriter": [[52, 3, 1, "", "__call__"], [52, 3, 1, "", "__init__"], [52, 3, 1, "", "add_rules"], [52, 3, 1, "", "available_rules"]], "lambeq.RotosolveOptimizer": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "backward"], [52, 3, 1, "", "load_state_dict"], [52, 2, 1, "", "model"], [52, 3, 1, "", "project"], [52, 3, 1, "", "state_dict"], [52, 3, 1, "", "step"]], "lambeq.SPSAOptimizer": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "backward"], [52, 3, 1, "", "load_state_dict"], [52, 2, 1, "", "model"], [52, 2, 1, "", "project"], [52, 3, 1, "", "state_dict"], [52, 3, 1, "", "step"], [52, 3, 1, "", "update_hyper_params"]], "lambeq.Sim14Ansatz": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "circuit"], [52, 3, 1, "", "params_shape"]], "lambeq.Sim15Ansatz": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "circuit"], [52, 3, 1, "", "params_shape"]], "lambeq.Sim4Ansatz": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "circuit"], [52, 3, 1, "", "params_shape"]], "lambeq.SimpleRewriteRule": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "matches"], [52, 3, 1, "", "placeholder"], [52, 3, 1, "", "rewrite"]], "lambeq.SpacyTokeniser": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "split_sentences"], [52, 3, 1, "", "tokenise_sentences"]], "lambeq.SpiderAnsatz": [[52, 3, 1, "", "__call__"], [52, 3, 1, "", "__init__"]], "lambeq.StronglyEntanglingAnsatz": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "circuit"], [52, 3, 1, "", "params_shape"]], "lambeq.Symbol": [[52, 2, 1, "", "default_assumptions"], [52, 2, 1, "", "directed_cod"], [52, 2, 1, "", "directed_dom"], [52, 2, 1, "", "name"], [52, 5, 1, "", "size"], [52, 3, 1, "", "sort_key"]], "lambeq.TensorAnsatz": [[52, 3, 1, "", "__call__"], [52, 3, 1, "", "__init__"]], "lambeq.TketModel": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "forward"], [52, 3, 1, "", "get_diagram_output"], [52, 2, 1, "", "symbols"], [52, 2, 1, "", "weights"]], "lambeq.Tokeniser": [[52, 3, 1, "", "split_sentences"], [52, 3, 1, "", "tokenise_sentence"], [52, 3, 1, "", "tokenise_sentences"]], "lambeq.Trainer": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "fit"], [52, 3, 1, "", "load_training_checkpoint"], [52, 3, 1, "", "save_checkpoint"], [52, 3, 1, "", "training_step"], [52, 3, 1, "", "validation_step"]], "lambeq.TreeReader": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "available_modes"], [52, 3, 1, "", "sentence2diagram"], [52, 3, 1, "", "tree2diagram"]], "lambeq.TreeReaderMode": [[52, 2, 1, "", "HEIGHT"], [52, 2, 1, "", "NO_TYPE"], [52, 2, 1, "", "RULE_ONLY"], [52, 2, 1, "", "RULE_TYPE"]], "lambeq.UnifyCodomainRewriter": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "matches"], [52, 2, 1, "", "output_type"], [52, 3, 1, "", "rewrite"]], "lambeq.UnknownWordsRewriteRule": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "from_diagrams"], [52, 3, 1, "", "matches"], [52, 3, 1, "", "rewrite"]], "lambeq.VerbosityLevel": [[52, 2, 1, "", "PROGRESS"], [52, 2, 1, "", "SUPPRESS"], [52, 2, 1, "", "TEXT"], [52, 3, 1, "", "has_value"]], "lambeq.WebParseError": [[52, 3, 1, "", "__init__"]], "lambeq.WebParser": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "sentences2trees"]], "lambeq.ansatz": [[32, 1, 1, "", "BaseAnsatz"], [32, 1, 1, "", "CircuitAnsatz"], [32, 1, 1, "", "IQPAnsatz"], [32, 1, 1, "", "MPSAnsatz"], [32, 1, 1, "", "Sim14Ansatz"], [32, 1, 1, "", "Sim15Ansatz"], [32, 1, 1, "", "Sim4Ansatz"], [32, 1, 1, "", "SpiderAnsatz"], [32, 1, 1, "", "StronglyEntanglingAnsatz"], [32, 1, 1, "", "Symbol"], [32, 1, 1, "", "TensorAnsatz"]], "lambeq.ansatz.BaseAnsatz": [[32, 3, 1, "", "__call__"], [32, 3, 1, "", "__init__"]], "lambeq.ansatz.CircuitAnsatz": [[32, 3, 1, "", "__call__"], [32, 3, 1, "", "__init__"], [32, 3, 1, "", "ob_size"], [32, 3, 1, "", "params_shape"]], "lambeq.ansatz.IQPAnsatz": [[32, 3, 1, "", "__init__"], [32, 3, 1, "", "circuit"], [32, 3, 1, "", "params_shape"]], "lambeq.ansatz.MPSAnsatz": [[32, 2, 1, "", "BOND_TYPE"], [32, 3, 1, "", "__call__"], [32, 3, 1, "", "__init__"]], "lambeq.ansatz.Sim14Ansatz": [[32, 3, 1, "", "__init__"], [32, 3, 1, "", "circuit"], [32, 3, 1, "", "params_shape"]], "lambeq.ansatz.Sim15Ansatz": [[32, 3, 1, "", "__init__"], [32, 3, 1, "", "circuit"], [32, 3, 1, "", "params_shape"]], "lambeq.ansatz.Sim4Ansatz": [[32, 3, 1, "", "__init__"], [32, 3, 1, "", "circuit"], [32, 3, 1, "", "params_shape"]], "lambeq.ansatz.SpiderAnsatz": [[32, 3, 1, "", "__call__"], [32, 3, 1, "", "__init__"]], "lambeq.ansatz.StronglyEntanglingAnsatz": [[32, 3, 1, "", "__init__"], [32, 3, 1, "", "circuit"], [32, 3, 1, "", "params_shape"]], "lambeq.ansatz.Symbol": [[32, 2, 1, "", "default_assumptions"], [32, 2, 1, "", "directed_cod"], [32, 2, 1, "", "directed_dom"], [32, 2, 1, "", "name"], [32, 5, 1, "", "size"], [32, 3, 1, "", "sort_key"]], "lambeq.ansatz.TensorAnsatz": [[32, 3, 1, "", "__call__"], [32, 3, 1, "", "__init__"]], "lambeq.backend": [[33, 0, 0, "-", "drawing"], [33, 0, 0, "-", "grammar"], [33, 0, 0, "-", "numerical_backend"], [33, 0, 0, "-", "quantum"], [33, 0, 0, "-", "tensor"]], "lambeq.backend.drawing": [[33, 1, 1, "", "DrawableDiagram"], [33, 6, 1, "", "draw"], [33, 6, 1, "", "draw_equation"], [33, 6, 1, "", "draw_pregroup"], [33, 6, 1, "", "render_as_str"], [33, 6, 1, "", "to_gif"]], "lambeq.backend.drawing.DrawableDiagram": [[33, 3, 1, "", "__init__"], [33, 2, 1, "", "boxes"], [33, 3, 1, "", "from_diagram"], [33, 3, 1, "", "scale_and_pad"], [33, 2, 1, "", "wire_endpoints"], [33, 2, 1, "", "wires"]], "lambeq.backend.grammar": [[33, 1, 1, "", "Box"], [33, 1, 1, "", "Cap"], [33, 1, 1, "", "Category"], [33, 1, 1, "", "Cup"], [33, 1, 1, "", "Daggered"], [33, 1, 1, "", "Diagram"], [33, 1, 1, "", "Diagrammable"], [33, 1, 1, "", "Entity"], [33, 1, 1, "", "Functor"], [33, 6, 1, "", "Id"], [33, 1, 1, "", "Layer"], [33, 1, 1, "", "Spider"], [33, 1, 1, "", "Swap"], [33, 1, 1, "", "Ty"], [33, 1, 1, "", "Word"]], "lambeq.backend.grammar.Box": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "dom"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "l"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.grammar.Cap": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "dom"], [33, 3, 1, "", "from_json"], [33, 2, 1, "", "is_reversed"], [33, 5, 1, "", "l"], [33, 2, 1, "", "left"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 2, 1, "", "right"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "to_left"], [33, 3, 1, "", "to_right"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.grammar.Category": [[33, 2, 1, "", "Box"], [33, 2, 1, "", "Diagram"], [33, 2, 1, "", "Layer"], [33, 2, 1, "", "Ty"], [33, 3, 1, "", "__call__"], [33, 3, 1, "", "__init__"], [33, 3, 1, "", "from_json"], [33, 2, 1, "", "name"], [33, 3, 1, "", "set"]], "lambeq.backend.grammar.Cup": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "dom"], [33, 3, 1, "", "from_json"], [33, 2, 1, "", "is_reversed"], [33, 5, 1, "", "l"], [33, 2, 1, "", "left"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 2, 1, "", "right"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "to_left"], [33, 3, 1, "", "to_right"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.grammar.Daggered": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 2, 1, "", "box"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "dom"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "l"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.grammar.Diagram": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 3, 1, "", "ba"], [33, 3, 1, "", "bc"], [33, 5, 1, "", "boxes"], [33, 3, 1, "", "bx"], [33, 3, 1, "", "caps"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "create_pregroup_diagram"], [33, 3, 1, "", "cups"], [33, 3, 1, "", "curry"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "dom"], [33, 3, 1, "", "draw"], [33, 3, 1, "", "fa"], [33, 3, 1, "", "fc"], [33, 3, 1, "", "from_discopy"], [33, 3, 1, "", "from_json"], [33, 3, 1, "", "fx"], [33, 3, 1, "", "id"], [33, 5, 1, "", "is_id"], [33, 5, 1, "", "is_pregroup"], [33, 5, 1, "", "l"], [33, 2, 1, "", "layers"], [33, 3, 1, "", "lift"], [33, 3, 1, "", "normal_form"], [33, 5, 1, "", "offsets"], [33, 3, 1, "", "permutation"], [33, 3, 1, "", "permuted"], [33, 3, 1, "", "pregroup_normal_form"], [33, 5, 1, "", "r"], [33, 3, 1, "", "register_special_box"], [33, 3, 1, "", "render_as_str"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "special_boxes"], [33, 3, 1, "", "swap"], [33, 3, 1, "", "tensor"], [33, 3, 1, "", "then"], [33, 3, 1, "", "then_at"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_discopy"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "transpose"]], "lambeq.backend.grammar.Diagrammable": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "cod"], [33, 5, 1, "", "dom"], [33, 5, 1, "", "is_id"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "to_diagram"]], "lambeq.backend.grammar.Entity": [[33, 3, 1, "", "__init__"], [33, 2, 1, "", "category"]], "lambeq.backend.grammar.Functor": [[33, 3, 1, "", "__call__"], [33, 3, 1, "", "__init__"], [33, 3, 1, "", "ar"], [33, 3, 1, "", "ar_with_cache"], [33, 3, 1, "", "ob"], [33, 3, 1, "", "ob_with_cache"], [33, 2, 1, "", "target_category"]], "lambeq.backend.grammar.Layer": [[33, 3, 1, "", "__init__"], [33, 2, 1, "", "box"], [33, 2, 1, "", "category"], [33, 5, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 5, 1, "", "dom"], [33, 3, 1, "", "extend"], [33, 3, 1, "", "from_json"], [33, 2, 1, "", "left"], [33, 2, 1, "", "right"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unpack"]], "lambeq.backend.grammar.Spider": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "dom"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "l"], [33, 2, 1, "", "n_legs_in"], [33, 2, 1, "", "n_legs_out"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 2, 1, "", "type"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.grammar.Swap": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "dom"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "l"], [33, 2, 1, "", "left"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 2, 1, "", "right"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.grammar.Ty": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 2, 1, "", "category"], [33, 3, 1, "", "count"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_atomic"], [33, 5, 1, "", "is_complex"], [33, 5, 1, "", "is_empty"], [33, 5, 1, "", "l"], [33, 2, 1, "", "name"], [33, 2, 1, "", "objects"], [33, 5, 1, "", "r"], [33, 3, 1, "", "repeat"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "tensor"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.grammar.Word": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "dom"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "l"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.numerical_backend": [[33, 1, 1, "", "Backend"], [33, 1, 1, "", "JAX"], [33, 1, 1, "", "NumPy"], [33, 1, 1, "", "PyTorch"], [33, 1, 1, "", "TensorFlow"], [33, 6, 1, "", "backend"], [33, 6, 1, "", "get_backend"], [33, 6, 1, "", "set_backend"]], "lambeq.backend.numerical_backend.Backend": [[33, 3, 1, "", "__init__"], [33, 5, 1, "", "name"]], "lambeq.backend.numerical_backend.JAX": [[33, 3, 1, "", "__init__"], [33, 5, 1, "", "name"]], "lambeq.backend.numerical_backend.NumPy": [[33, 3, 1, "", "__init__"], [33, 5, 1, "", "name"]], "lambeq.backend.numerical_backend.PyTorch": [[33, 3, 1, "", "__init__"], [33, 5, 1, "", "name"]], "lambeq.backend.numerical_backend.TensorFlow": [[33, 3, 1, "", "__init__"], [33, 5, 1, "", "name"]], "lambeq.backend.quantum": [[33, 1, 1, "", "AntiConjugate"], [33, 1, 1, "", "Bit"], [33, 1, 1, "", "Box"], [33, 1, 1, "", "Bra"], [33, 6, 1, "", "CRx"], [33, 6, 1, "", "CRy"], [33, 6, 1, "", "CRz"], [33, 1, 1, "", "Controlled"], [33, 1, 1, "", "Daggered"], [33, 1, 1, "", "Diagram"], [33, 1, 1, "", "Discard"], [33, 1, 1, "", "Encode"], [33, 6, 1, "", "Id"], [33, 1, 1, "", "Ket"], [33, 1, 1, "", "Layer"], [33, 1, 1, "", "Measure"], [33, 1, 1, "", "MixedState"], [33, 1, 1, "", "Parametrized"], [33, 1, 1, "", "Rotation"], [33, 1, 1, "", "Rx"], [33, 1, 1, "", "Ry"], [33, 1, 1, "", "Rz"], [33, 1, 1, "", "Scalar"], [33, 1, 1, "", "SelfConjugate"], [33, 1, 1, "", "Sqrt"], [33, 1, 1, "", "Swap"], [33, 1, 1, "", "Ty"], [33, 6, 1, "", "generate_cap"], [33, 6, 1, "", "generate_cup"], [33, 6, 1, "", "generate_spider"]], "lambeq.backend.quantum.AntiConjugate": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.Bit": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.Box": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.Bra": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.Controlled": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 3, 1, "", "decompose"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 5, 1, "", "modules"], [33, 2, 1, "", "name"], [33, 5, 1, "", "phase"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.Daggered": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "box"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.Diagram": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 3, 1, "", "apply_gate"], [33, 3, 1, "", "apply_parametrized_gate"], [33, 3, 1, "", "ba"], [33, 3, 1, "", "bc"], [33, 5, 1, "", "boxes"], [33, 3, 1, "", "bx"], [33, 3, 1, "", "caps"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "create_pregroup_diagram"], [33, 3, 1, "", "cups"], [33, 3, 1, "", "curry"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "dom"], [33, 3, 1, "", "draw"], [33, 3, 1, "", "eval"], [33, 3, 1, "", "fa"], [33, 3, 1, "", "fc"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_discopy"], [33, 3, 1, "", "from_json"], [33, 3, 1, "", "fx"], [33, 3, 1, "", "id"], [33, 3, 1, "", "init_and_discard"], [33, 5, 1, "", "is_id"], [33, 5, 1, "", "is_mixed"], [33, 5, 1, "", "is_pregroup"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "layers"], [33, 3, 1, "", "lift"], [33, 3, 1, "", "normal_form"], [33, 5, 1, "", "offsets"], [33, 3, 1, "", "permutation"], [33, 3, 1, "", "permuted"], [33, 3, 1, "", "pregroup_normal_form"], [33, 5, 1, "", "r"], [33, 3, 1, "", "register_special_box"], [33, 3, 1, "", "render_as_str"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "special_boxes"], [33, 3, 1, "", "swap"], [33, 3, 1, "", "tensor"], [33, 3, 1, "", "then"], [33, 3, 1, "", "then_at"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_discopy"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "to_pennylane"], [33, 3, 1, "", "to_tk"], [33, 3, 1, "", "to_tn"], [33, 3, 1, "", "transpose"]], "lambeq.backend.quantum.Discard": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.Encode": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.Ket": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.Layer": [[33, 3, 1, "", "__init__"], [33, 2, 1, "", "box"], [33, 2, 1, "", "category"], [33, 5, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 5, 1, "", "dom"], [33, 3, 1, "", "extend"], [33, 3, 1, "", "from_json"], [33, 2, 1, "", "left"], [33, 2, 1, "", "right"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unpack"]], "lambeq.backend.quantum.Measure": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.MixedState": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.Parametrized": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 5, 1, "", "modules"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.Rotation": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 5, 1, "", "modules"], [33, 2, 1, "", "name"], [33, 5, 1, "", "phase"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.Rx": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 5, 1, "", "modules"], [33, 2, 1, "", "name"], [33, 5, 1, "", "phase"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.Ry": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 5, 1, "", "modules"], [33, 2, 1, "", "name"], [33, 5, 1, "", "phase"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.Rz": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 5, 1, "", "modules"], [33, 2, 1, "", "name"], [33, 5, 1, "", "phase"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.Scalar": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.SelfConjugate": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.Sqrt": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.Swap": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_classical"], [33, 2, 1, "", "is_mixed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "left"], [33, 2, 1, "", "n_legs_in"], [33, 2, 1, "", "n_legs_out"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 2, 1, "", "right"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "self_adjoint"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 2, 1, "", "type"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.quantum.Ty": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 2, 1, "", "category"], [33, 3, 1, "", "count"], [33, 5, 1, "", "dim"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_atomic"], [33, 5, 1, "", "is_complex"], [33, 5, 1, "", "is_empty"], [33, 5, 1, "", "l"], [33, 2, 1, "", "name"], [33, 2, 1, "", "objects"], [33, 5, 1, "", "product"], [33, 5, 1, "", "r"], [33, 3, 1, "", "repeat"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "tensor"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.tensor": [[33, 1, 1, "", "Box"], [33, 1, 1, "", "Cap"], [33, 1, 1, "", "Cup"], [33, 1, 1, "", "Daggered"], [33, 1, 1, "", "Diagram"], [33, 1, 1, "", "Dim"], [33, 1, 1, "", "Layer"], [33, 1, 1, "", "Spider"], [33, 1, 1, "", "Swap"]], "lambeq.backend.tensor.Box": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.tensor.Cap": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 2, 1, "", "is_reversed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "left"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 2, 1, "", "right"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "to_left"], [33, 3, 1, "", "to_right"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.tensor.Cup": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 2, 1, "", "is_reversed"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "left"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 2, 1, "", "right"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "to_left"], [33, 3, 1, "", "to_right"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.tensor.Daggered": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "box"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.tensor.Diagram": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 3, 1, "", "ba"], [33, 3, 1, "", "bc"], [33, 5, 1, "", "boxes"], [33, 3, 1, "", "bx"], [33, 3, 1, "", "caps"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "create_pregroup_diagram"], [33, 3, 1, "", "cups"], [33, 3, 1, "", "curry"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "dom"], [33, 3, 1, "", "draw"], [33, 3, 1, "", "eval"], [33, 3, 1, "", "fa"], [33, 3, 1, "", "fc"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_discopy"], [33, 3, 1, "", "from_json"], [33, 3, 1, "", "fx"], [33, 3, 1, "", "id"], [33, 5, 1, "", "is_id"], [33, 5, 1, "", "is_pregroup"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "layers"], [33, 3, 1, "", "lift"], [33, 3, 1, "", "normal_form"], [33, 5, 1, "", "offsets"], [33, 3, 1, "", "permutation"], [33, 3, 1, "", "permuted"], [33, 3, 1, "", "pregroup_normal_form"], [33, 5, 1, "", "r"], [33, 3, 1, "", "register_special_box"], [33, 3, 1, "", "render_as_str"], [33, 3, 1, "", "rotate"], [33, 2, 1, "", "special_boxes"], [33, 3, 1, "", "swap"], [33, 3, 1, "", "tensor"], [33, 3, 1, "", "then"], [33, 3, 1, "", "then_at"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_discopy"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "to_tn"], [33, 3, 1, "", "transpose"]], "lambeq.backend.tensor.Dim": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 2, 1, "", "category"], [33, 3, 1, "", "count"], [33, 5, 1, "", "dim"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "is_atomic"], [33, 5, 1, "", "is_complex"], [33, 5, 1, "", "is_empty"], [33, 5, 1, "", "l"], [33, 2, 1, "", "name"], [33, 2, 1, "", "objects"], [33, 5, 1, "", "product"], [33, 5, 1, "", "r"], [33, 3, 1, "", "repeat"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "tensor"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.tensor.Layer": [[33, 3, 1, "", "__init__"], [33, 2, 1, "", "box"], [33, 2, 1, "", "category"], [33, 5, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 5, 1, "", "dom"], [33, 3, 1, "", "extend"], [33, 3, 1, "", "from_json"], [33, 2, 1, "", "left"], [33, 2, 1, "", "right"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unpack"]], "lambeq.backend.tensor.Spider": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "n_legs_in"], [33, 2, 1, "", "n_legs_out"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 2, 1, "", "type"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.backend.tensor.Swap": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "apply_functor"], [33, 5, 1, "", "array"], [33, 2, 1, "", "category"], [33, 2, 1, "", "cod"], [33, 3, 1, "", "dagger"], [33, 2, 1, "", "data"], [33, 2, 1, "", "dom"], [33, 5, 1, "", "free_symbols"], [33, 3, 1, "", "from_json"], [33, 5, 1, "", "l"], [33, 3, 1, "", "lambdify"], [33, 2, 1, "", "left"], [33, 2, 1, "", "name"], [33, 5, 1, "", "r"], [33, 2, 1, "", "right"], [33, 3, 1, "", "rotate"], [33, 3, 1, "", "to_diagram"], [33, 3, 1, "", "to_json"], [33, 3, 1, "", "unwind"], [33, 2, 1, "", "z"]], "lambeq.bobcat": [[34, 1, 1, "", "BertForChartClassification"], [34, 1, 1, "", "Category"], [34, 1, 1, "", "ChartParser"], [34, 1, 1, "", "Grammar"], [34, 1, 1, "", "ParseTree"], [34, 1, 1, "", "Sentence"], [34, 1, 1, "", "Supertag"], [34, 1, 1, "", "Tagger"]], "lambeq.bobcat.BertForChartClassification": [[34, 2, 1, "", "T_destination"], [34, 3, 1, "", "__call__"], [34, 3, 1, "", "__init__"], [34, 3, 1, "", "active_adapter"], [34, 3, 1, "", "active_adapters"], [34, 3, 1, "", "add_adapter"], [34, 3, 1, "", "add_memory_hooks"], [34, 3, 1, "", "add_model_tags"], [34, 3, 1, "", "add_module"], [34, 3, 1, "", "apply"], [34, 3, 1, "", "assisted_decoding"], [34, 5, 1, "", "base_model"], [34, 2, 1, "", "base_model_prefix"], [34, 3, 1, "", "beam_sample"], [34, 3, 1, "", "beam_search"], [34, 3, 1, "", "bfloat16"], [34, 3, 1, "", "buffers"], [34, 2, 1, "", "call_super_init"], [34, 3, 1, "", "can_generate"], [34, 3, 1, "", "children"], [34, 3, 1, "", "compile"], [34, 3, 1, "", "compute_transition_scores"], [34, 2, 1, "", "config_class"], [34, 3, 1, "", "constrained_beam_search"], [34, 3, 1, "", "contrastive_search"], [34, 3, 1, "", "cpu"], [34, 3, 1, "", "create_extended_attention_mask_for_decoder"], [34, 3, 1, "", "cuda"], [34, 5, 1, "", "device"], [34, 3, 1, "", "disable_adapters"], [34, 3, 1, "", "disable_input_require_grads"], [34, 3, 1, "", "double"], [34, 5, 1, "", "dtype"], [34, 5, 1, "", "dummy_inputs"], [34, 2, 1, "", "dump_patches"], [34, 3, 1, "", "enable_adapters"], [34, 3, 1, "", "enable_input_require_grads"], [34, 3, 1, "", "estimate_tokens"], [34, 3, 1, "", "eval"], [34, 3, 1, "", "extra_repr"], [34, 3, 1, "", "float"], [34, 3, 1, "", "floating_point_ops"], [34, 3, 1, "", "forward"], [34, 5, 1, "", "framework"], [34, 3, 1, "", "from_pretrained"], [34, 3, 1, "", "generate"], [34, 3, 1, "", "get_adapter_state_dict"], [34, 3, 1, "", "get_buffer"], [34, 3, 1, "", "get_extended_attention_mask"], [34, 3, 1, "", "get_extra_state"], [34, 3, 1, "", "get_head_mask"], [34, 3, 1, "", "get_input_embeddings"], [34, 3, 1, "", "get_memory_footprint"], [34, 3, 1, "", "get_output_embeddings"], [34, 3, 1, "", "get_parameter"], [34, 3, 1, "", "get_position_embeddings"], [34, 3, 1, "", "get_submodule"], [34, 3, 1, "", "gradient_checkpointing_disable"], [34, 3, 1, "", "gradient_checkpointing_enable"], [34, 3, 1, "", "greedy_search"], [34, 3, 1, "", "group_beam_search"], [34, 3, 1, "", "half"], [34, 3, 1, "", "init_weights"], [34, 3, 1, "", "invert_attention_mask"], [34, 3, 1, "", "ipu"], [34, 5, 1, "", "is_gradient_checkpointing"], [34, 2, 1, "", "is_parallelizable"], [34, 3, 1, "", "load_adapter"], [34, 3, 1, "", "load_state_dict"], [34, 3, 1, "", "load_tf_weights"], [34, 2, 1, "", "main_input_name"], [34, 2, 1, "", "model_tags"], [34, 3, 1, "", "modules"], [34, 3, 1, "", "named_buffers"], [34, 3, 1, "", "named_children"], [34, 3, 1, "", "named_modules"], [34, 3, 1, "", "named_parameters"], [34, 3, 1, "", "num_parameters"], [34, 3, 1, "", "parameters"], [34, 3, 1, "", "post_init"], [34, 3, 1, "", "prepare_inputs_for_generation"], [34, 3, 1, "", "prune_heads"], [34, 3, 1, "", "push_to_hub"], [34, 3, 1, "", "register_backward_hook"], [34, 3, 1, "", "register_buffer"], [34, 3, 1, "", "register_for_auto_class"], [34, 3, 1, "", "register_forward_hook"], [34, 3, 1, "", "register_forward_pre_hook"], [34, 3, 1, "", "register_full_backward_hook"], [34, 3, 1, "", "register_full_backward_pre_hook"], [34, 3, 1, "", "register_load_state_dict_post_hook"], [34, 3, 1, "", "register_module"], [34, 3, 1, "", "register_parameter"], [34, 3, 1, "", "register_state_dict_pre_hook"], [34, 3, 1, "", "requires_grad_"], [34, 3, 1, "", "reset_memory_hooks_state"], [34, 3, 1, "", "resize_position_embeddings"], [34, 3, 1, "", "resize_token_embeddings"], [34, 3, 1, "", "retrieve_modules_from_names"], [34, 3, 1, "", "reverse_bettertransformer"], [34, 3, 1, "", "sample"], [34, 3, 1, "", "save_pretrained"], [34, 3, 1, "", "set_adapter"], [34, 3, 1, "", "set_extra_state"], [34, 3, 1, "", "set_input_embeddings"], [34, 3, 1, "", "share_memory"], [34, 3, 1, "", "state_dict"], [34, 2, 1, "", "supports_gradient_checkpointing"], [34, 3, 1, "", "tie_weights"], [34, 3, 1, "", "to"], [34, 3, 1, "", "to_bettertransformer"], [34, 3, 1, "", "to_empty"], [34, 3, 1, "", "train"], [34, 2, 1, "", "training"], [34, 3, 1, "", "type"], [34, 3, 1, "", "warn_if_padding_and_no_attention_mask"], [34, 3, 1, "", "xpu"], [34, 3, 1, "", "zero_grad"]], "lambeq.bobcat.Category": [[34, 3, 1, "", "__init__"], [34, 2, 1, "", "argument"], [34, 2, 1, "", "atom"], [34, 5, 1, "", "bwd"], [34, 2, 1, "", "dir"], [34, 2, 1, "", "feature"], [34, 5, 1, "", "fwd"], [34, 3, 1, "", "matches"], [34, 3, 1, "", "parse"], [34, 2, 1, "", "relation"], [34, 2, 1, "", "result"], [34, 3, 1, "", "slash"], [34, 3, 1, "", "translate"], [34, 2, 1, "", "type_raising_dep_var"], [34, 2, 1, "", "var"]], "lambeq.bobcat.ChartParser": [[34, 3, 1, "", "__call__"], [34, 3, 1, "", "__init__"], [34, 3, 1, "", "calc_score_binary"], [34, 3, 1, "", "calc_score_unary"], [34, 3, 1, "", "filter_root"], [34, 3, 1, "", "get_span_score"], [34, 3, 1, "", "set_root_cats"]], "lambeq.bobcat.Grammar": [[34, 3, 1, "", "__init__"], [34, 2, 1, "", "binary_rules"], [34, 2, 1, "", "categories"], [34, 3, 1, "", "load"], [34, 3, 1, "", "save"], [34, 2, 1, "", "type_changing_rules"], [34, 2, 1, "", "type_raising_rules"]], "lambeq.bobcat.ParseTree": [[34, 3, 1, "", "__init__"], [34, 5, 1, "", "bwd_comp"], [34, 2, 1, "", "cat"], [34, 5, 1, "", "coordinated"], [34, 5, 1, "", "coordinated_or_type_raised"], [34, 5, 1, "", "deps"], [34, 5, 1, "", "deps_and_tags"], [34, 2, 1, "", "filled_deps"], [34, 5, 1, "", "fwd_comp"], [34, 5, 1, "", "is_leaf"], [34, 2, 1, "", "left"], [34, 2, 1, "", "right"], [34, 2, 1, "", "rule"], [34, 2, 1, "", "score"], [34, 2, 1, "", "unfilled_deps"], [34, 2, 1, "", "var_map"], [34, 5, 1, "", "variable"], [34, 5, 1, "", "word"]], "lambeq.bobcat.Sentence": [[34, 3, 1, "", "__init__"], [34, 2, 1, "", "input_supertags"], [34, 2, 1, "", "span_scores"], [34, 2, 1, "", "words"]], "lambeq.bobcat.Supertag": [[34, 3, 1, "", "__init__"], [34, 2, 1, "", "category"], [34, 2, 1, "", "probability"]], "lambeq.bobcat.Tagger": [[34, 3, 1, "", "__call__"], [34, 3, 1, "", "__init__"], [34, 3, 1, "", "parse"], [34, 3, 1, "", "prepare_inputs"]], "lambeq.rewrite": [[35, 1, 1, "", "CoordinationRewriteRule"], [35, 1, 1, "", "CurryRewriteRule"], [35, 1, 1, "", "DiagramRewriter"], [35, 1, 1, "", "RemoveCupsRewriter"], [35, 1, 1, "", "RemoveSwapsRewriter"], [35, 1, 1, "", "RewriteRule"], [35, 1, 1, "", "Rewriter"], [35, 1, 1, "", "SimpleRewriteRule"], [35, 1, 1, "", "UnifyCodomainRewriter"], [35, 1, 1, "", "UnknownWordsRewriteRule"]], "lambeq.rewrite.CoordinationRewriteRule": [[35, 3, 1, "", "__call__"], [35, 3, 1, "", "__init__"], [35, 3, 1, "", "matches"], [35, 3, 1, "", "rewrite"]], "lambeq.rewrite.CurryRewriteRule": [[35, 3, 1, "", "__call__"], [35, 3, 1, "", "__init__"], [35, 3, 1, "", "matches"], [35, 3, 1, "", "rewrite"]], "lambeq.rewrite.DiagramRewriter": [[35, 3, 1, "", "__call__"], [35, 3, 1, "", "matches"], [35, 3, 1, "", "rewrite"]], "lambeq.rewrite.RemoveCupsRewriter": [[35, 3, 1, "", "__call__"], [35, 3, 1, "", "matches"], [35, 3, 1, "", "rewrite"]], "lambeq.rewrite.RemoveSwapsRewriter": [[35, 3, 1, "", "__call__"], [35, 3, 1, "", "matches"], [35, 3, 1, "", "rewrite"]], "lambeq.rewrite.RewriteRule": [[35, 3, 1, "", "__call__"], [35, 3, 1, "", "matches"], [35, 3, 1, "", "rewrite"]], "lambeq.rewrite.Rewriter": [[35, 3, 1, "", "__call__"], [35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_rules"], [35, 3, 1, "", "available_rules"]], "lambeq.rewrite.SimpleRewriteRule": [[35, 3, 1, "", "__call__"], [35, 3, 1, "", "__init__"], [35, 3, 1, "", "matches"], [35, 3, 1, "", "placeholder"], [35, 3, 1, "", "rewrite"]], "lambeq.rewrite.UnifyCodomainRewriter": [[35, 3, 1, "", "__call__"], [35, 3, 1, "", "__init__"], [35, 3, 1, "", "matches"], [35, 2, 1, "", "output_type"], [35, 3, 1, "", "rewrite"]], "lambeq.rewrite.UnknownWordsRewriteRule": [[35, 3, 1, "", "__call__"], [35, 3, 1, "", "__init__"], [35, 3, 1, "", "from_diagrams"], [35, 3, 1, "", "matches"], [35, 3, 1, "", "rewrite"]], "lambeq.text2diagram": [[36, 4, 1, "", "BobcatParseError"], [36, 1, 1, "", "BobcatParser"], [36, 4, 1, "", "CCGBankParseError"], [36, 1, 1, "", "CCGBankParser"], [36, 1, 1, "", "CCGParser"], [36, 1, 1, "", "CCGRule"], [36, 4, 1, "", "CCGRuleUseError"], [36, 1, 1, "", "CCGTree"], [36, 1, 1, "", "CCGType"], [36, 4, 1, "", "DepCCGParseError"], [36, 1, 1, "", "DepCCGParser"], [36, 1, 1, "", "LinearReader"], [36, 1, 1, "", "Reader"], [36, 1, 1, "", "TreeReader"], [36, 1, 1, "", "TreeReaderMode"], [36, 4, 1, "", "WebParseError"], [36, 1, 1, "", "WebParser"], [36, 7, 1, "", "bag_of_words_reader"], [36, 7, 1, "", "cups_reader"], [36, 7, 1, "", "spiders_reader"], [36, 7, 1, "", "stairs_reader"], [36, 7, 1, "", "word_sequence_reader"]], "lambeq.text2diagram.BobcatParseError": [[36, 3, 1, "", "__init__"], [36, 2, 1, "", "args"], [36, 3, 1, "", "with_traceback"]], "lambeq.text2diagram.BobcatParser": [[36, 3, 1, "", "__init__"], [36, 3, 1, "", "available_models"], [36, 3, 1, "", "sentence2diagram"], [36, 3, 1, "", "sentence2tree"], [36, 3, 1, "", "sentences2diagrams"], [36, 3, 1, "", "sentences2trees"]], "lambeq.text2diagram.CCGBankParseError": [[36, 3, 1, "", "__init__"], [36, 2, 1, "", "args"], [36, 3, 1, "", "with_traceback"]], "lambeq.text2diagram.CCGBankParser": [[36, 3, 1, "", "__init__"], [36, 3, 1, "", "section2diagrams"], [36, 3, 1, "", "section2diagrams_gen"], [36, 3, 1, "", "section2trees"], [36, 3, 1, "", "section2trees_gen"], [36, 3, 1, "", "sentence2diagram"], [36, 3, 1, "", "sentence2tree"], [36, 3, 1, "", "sentences2diagrams"], [36, 3, 1, "", "sentences2trees"]], "lambeq.text2diagram.CCGParser": [[36, 3, 1, "", "__init__"], [36, 3, 1, "", "sentence2diagram"], [36, 3, 1, "", "sentence2tree"], [36, 3, 1, "", "sentences2diagrams"], [36, 3, 1, "", "sentences2trees"]], "lambeq.text2diagram.CCGRule": [[36, 2, 1, "", "BACKWARD_APPLICATION"], [36, 2, 1, "", "BACKWARD_COMPOSITION"], [36, 2, 1, "", "BACKWARD_CROSSED_COMPOSITION"], [36, 2, 1, "", "BACKWARD_TYPE_RAISING"], [36, 2, 1, "", "CONJUNCTION"], [36, 2, 1, "", "FORWARD_APPLICATION"], [36, 2, 1, "", "FORWARD_COMPOSITION"], [36, 2, 1, "", "FORWARD_CROSSED_COMPOSITION"], [36, 2, 1, "", "FORWARD_TYPE_RAISING"], [36, 2, 1, "", "GENERALIZED_BACKWARD_COMPOSITION"], [36, 2, 1, "", "GENERALIZED_BACKWARD_CROSSED_COMPOSITION"], [36, 2, 1, "", "GENERALIZED_FORWARD_COMPOSITION"], [36, 2, 1, "", "GENERALIZED_FORWARD_CROSSED_COMPOSITION"], [36, 2, 1, "", "LEXICAL"], [36, 2, 1, "", "REMOVE_PUNCTUATION_LEFT"], [36, 2, 1, "", "REMOVE_PUNCTUATION_RIGHT"], [36, 2, 1, "", "UNARY"], [36, 2, 1, "", "UNKNOWN"], [36, 3, 1, "", "__call__"], [36, 3, 1, "", "apply"], [36, 3, 1, "", "check_match"], [36, 3, 1, "", "infer_rule"], [36, 3, 1, "", "resolve"], [36, 5, 1, "", "symbol"]], "lambeq.text2diagram.CCGRuleUseError": [[36, 3, 1, "", "__init__"], [36, 2, 1, "", "args"], [36, 3, 1, "", "with_traceback"]], "lambeq.text2diagram.CCGTree": [[36, 3, 1, "", "__init__"], [36, 5, 1, "", "child"], [36, 3, 1, "", "collapse_noun_phrases"], [36, 3, 1, "", "deriv"], [36, 3, 1, "", "from_json"], [36, 5, 1, "", "left"], [36, 5, 1, "", "right"], [36, 5, 1, "", "text"], [36, 3, 1, "", "to_diagram"], [36, 3, 1, "", "to_json"], [36, 3, 1, "", "without_trivial_unary_rules"]], "lambeq.text2diagram.CCGType": [[36, 2, 1, "", "CONJUNCTION"], [36, 2, 1, "", "CONJ_TAG"], [36, 2, 1, "", "NOUN"], [36, 2, 1, "", "NOUN_PHRASE"], [36, 2, 1, "", "PREPOSITIONAL_PHRASE"], [36, 2, 1, "", "PUNCTUATION"], [36, 2, 1, "", "SENTENCE"], [36, 3, 1, "", "__init__"], [36, 5, 1, "", "argument"], [36, 5, 1, "", "direction"], [36, 2, 1, "", "is_atomic"], [36, 2, 1, "", "is_complex"], [36, 5, 1, "", "is_conjoinable"], [36, 2, 1, "", "is_empty"], [36, 2, 1, "", "is_over"], [36, 2, 1, "", "is_under"], [36, 5, 1, "", "left"], [36, 5, 1, "", "name"], [36, 3, 1, "", "over"], [36, 3, 1, "", "parse"], [36, 3, 1, "", "replace"], [36, 3, 1, "", "replace_result"], [36, 5, 1, "", "result"], [36, 5, 1, "", "right"], [36, 3, 1, "", "slash"], [36, 3, 1, "", "split"], [36, 3, 1, "", "to_grammar"], [36, 3, 1, "", "to_string"], [36, 3, 1, "", "under"]], "lambeq.text2diagram.DepCCGParseError": [[36, 3, 1, "", "__init__"], [36, 2, 1, "", "args"], [36, 3, 1, "", "with_traceback"]], "lambeq.text2diagram.DepCCGParser": [[36, 3, 1, "", "__init__"], [36, 3, 1, "", "sentence2diagram"], [36, 3, 1, "", "sentence2tree"], [36, 3, 1, "", "sentences2diagrams"], [36, 3, 1, "", "sentences2trees"]], "lambeq.text2diagram.LinearReader": [[36, 3, 1, "", "__init__"], [36, 3, 1, "", "sentence2diagram"], [36, 3, 1, "", "sentences2diagrams"]], "lambeq.text2diagram.Reader": [[36, 3, 1, "", "sentence2diagram"], [36, 3, 1, "", "sentences2diagrams"]], "lambeq.text2diagram.TreeReader": [[36, 3, 1, "", "__init__"], [36, 3, 1, "", "available_modes"], [36, 3, 1, "", "sentence2diagram"], [36, 3, 1, "", "sentences2diagrams"], [36, 3, 1, "", "tree2diagram"]], "lambeq.text2diagram.TreeReaderMode": [[36, 2, 1, "", "HEIGHT"], [36, 2, 1, "", "NO_TYPE"], [36, 2, 1, "", "RULE_ONLY"], [36, 2, 1, "", "RULE_TYPE"]], "lambeq.text2diagram.WebParseError": [[36, 3, 1, "", "__init__"], [36, 2, 1, "", "args"], [36, 2, 1, "", "characters_written"], [36, 2, 1, "", "errno"], [36, 2, 1, "", "filename"], [36, 2, 1, "", "filename2"], [36, 2, 1, "", "strerror"], [36, 3, 1, "", "with_traceback"]], "lambeq.text2diagram.WebParser": [[36, 3, 1, "", "__init__"], [36, 3, 1, "", "sentence2diagram"], [36, 3, 1, "", "sentence2tree"], [36, 3, 1, "", "sentences2diagrams"], [36, 3, 1, "", "sentences2trees"]], "lambeq.tokeniser": [[37, 1, 1, "", "SpacyTokeniser"], [37, 1, 1, "", "Tokeniser"]], "lambeq.tokeniser.SpacyTokeniser": [[37, 3, 1, "", "__init__"], [37, 3, 1, "", "split_sentences"], [37, 3, 1, "", "tokenise_sentence"], [37, 3, 1, "", "tokenise_sentences"]], "lambeq.tokeniser.Tokeniser": [[37, 3, 1, "", "split_sentences"], [37, 3, 1, "", "tokenise_sentence"], [37, 3, 1, "", "tokenise_sentences"]], "lambeq.training": [[38, 1, 1, "", "BinaryCrossEntropyLoss"], [38, 1, 1, "", "Checkpoint"], [38, 1, 1, "", "CrossEntropyLoss"], [38, 1, 1, "", "Dataset"], [38, 1, 1, "", "LossFunction"], [38, 1, 1, "", "MSELoss"], [38, 1, 1, "", "Model"], [38, 1, 1, "", "NelderMeadOptimizer"], [38, 1, 1, "", "NumpyModel"], [38, 1, 1, "", "Optimizer"], [38, 1, 1, "", "PennyLaneModel"], [38, 1, 1, "", "PytorchModel"], [38, 1, 1, "", "PytorchTrainer"], [38, 1, 1, "", "QuantumModel"], [38, 1, 1, "", "QuantumTrainer"], [38, 1, 1, "", "RotosolveOptimizer"], [38, 1, 1, "", "SPSAOptimizer"], [38, 1, 1, "", "TketModel"], [38, 1, 1, "", "Trainer"]], "lambeq.training.BinaryCrossEntropyLoss": [[38, 3, 1, "", "__call__"], [38, 3, 1, "", "__init__"], [38, 3, 1, "", "calculate_loss"]], "lambeq.training.Checkpoint": [[38, 3, 1, "", "__init__"], [38, 3, 1, "", "add_many"], [38, 3, 1, "", "from_file"], [38, 3, 1, "", "get"], [38, 3, 1, "", "items"], [38, 3, 1, "", "keys"], [38, 3, 1, "", "to_file"], [38, 3, 1, "", "values"]], "lambeq.training.CrossEntropyLoss": [[38, 3, 1, "", "__call__"], [38, 3, 1, "", "__init__"], [38, 3, 1, "", "calculate_loss"]], "lambeq.training.Dataset": [[38, 3, 1, "", "__init__"], [38, 3, 1, "", "shuffle_data"]], "lambeq.training.LossFunction": [[38, 3, 1, "", "__call__"], [38, 3, 1, "", "__init__"], [38, 3, 1, "", "calculate_loss"]], "lambeq.training.MSELoss": [[38, 3, 1, "", "__call__"], [38, 3, 1, "", "__init__"], [38, 3, 1, "", "calculate_loss"]], "lambeq.training.Model": [[38, 3, 1, "", "__call__"], [38, 3, 1, "", "__init__"], [38, 3, 1, "", "forward"], [38, 3, 1, "", "from_checkpoint"], [38, 3, 1, "", "from_diagrams"], [38, 3, 1, "", "get_diagram_output"], [38, 3, 1, "", "initialise_weights"], [38, 3, 1, "", "load"], [38, 3, 1, "", "save"]], "lambeq.training.NelderMeadOptimizer": [[38, 3, 1, "", "__init__"], [38, 3, 1, "", "backward"], [38, 2, 1, "", "bounds"], [38, 3, 1, "", "load_state_dict"], [38, 2, 1, "", "model"], [38, 3, 1, "", "objective"], [38, 3, 1, "", "project"], [38, 3, 1, "", "state_dict"], [38, 3, 1, "", "step"], [38, 3, 1, "", "update_hyper_params"], [38, 3, 1, "", "zero_grad"]], "lambeq.training.NumpyModel": [[38, 3, 1, "", "__call__"], [38, 3, 1, "", "__init__"], [38, 3, 1, "", "forward"], [38, 3, 1, "", "from_checkpoint"], [38, 3, 1, "", "from_diagrams"], [38, 3, 1, "", "get_diagram_output"], [38, 3, 1, "", "initialise_weights"], [38, 3, 1, "", "load"], [38, 3, 1, "", "save"], [38, 2, 1, "", "weights"]], "lambeq.training.Optimizer": [[38, 3, 1, "", "__init__"], [38, 3, 1, "", "backward"], [38, 3, 1, "", "load_state_dict"], [38, 3, 1, "", "state_dict"], [38, 3, 1, "", "step"], [38, 3, 1, "", "zero_grad"]], "lambeq.training.PennyLaneModel": [[38, 2, 1, "", "T_destination"], [38, 3, 1, "", "__call__"], [38, 3, 1, "", "__init__"], [38, 3, 1, "", "add_module"], [38, 3, 1, "", "apply"], [38, 3, 1, "", "bfloat16"], [38, 3, 1, "", "buffers"], [38, 2, 1, "", "call_super_init"], [38, 3, 1, "", "children"], [38, 3, 1, "", "compile"], [38, 3, 1, "", "cpu"], [38, 3, 1, "", "cuda"], [38, 3, 1, "", "double"], [38, 2, 1, "", "dump_patches"], [38, 3, 1, "", "eval"], [38, 3, 1, "", "extra_repr"], [38, 3, 1, "", "float"], [38, 3, 1, "", "forward"], [38, 3, 1, "", "from_checkpoint"], [38, 3, 1, "", "from_diagrams"], [38, 3, 1, "", "get_buffer"], [38, 3, 1, "", "get_diagram_output"], [38, 3, 1, "", "get_extra_state"], [38, 3, 1, "", "get_parameter"], [38, 3, 1, "", "get_submodule"], [38, 3, 1, "", "half"], [38, 3, 1, "", "initialise_weights"], [38, 3, 1, "", "ipu"], [38, 3, 1, "", "load"], [38, 3, 1, "", "load_state_dict"], [38, 3, 1, "", "modules"], [38, 3, 1, "", "named_buffers"], [38, 3, 1, "", "named_children"], [38, 3, 1, "", "named_modules"], [38, 3, 1, "", "named_parameters"], [38, 3, 1, "", "parameters"], [38, 3, 1, "", "register_backward_hook"], [38, 3, 1, "", "register_buffer"], [38, 3, 1, "", "register_forward_hook"], [38, 3, 1, "", "register_forward_pre_hook"], [38, 3, 1, "", "register_full_backward_hook"], [38, 3, 1, "", "register_full_backward_pre_hook"], [38, 3, 1, "", "register_load_state_dict_post_hook"], [38, 3, 1, "", "register_module"], [38, 3, 1, "", "register_parameter"], [38, 3, 1, "", "register_state_dict_pre_hook"], [38, 3, 1, "", "requires_grad_"], [38, 3, 1, "", "save"], [38, 3, 1, "", "set_extra_state"], [38, 3, 1, "", "share_memory"], [38, 3, 1, "", "state_dict"], [38, 2, 1, "", "symbols"], [38, 3, 1, "", "to"], [38, 3, 1, "", "to_empty"], [38, 3, 1, "", "train"], [38, 2, 1, "", "training"], [38, 3, 1, "", "type"], [38, 2, 1, "", "weights"], [38, 3, 1, "", "xpu"], [38, 3, 1, "", "zero_grad"]], "lambeq.training.PytorchModel": [[38, 2, 1, "", "T_destination"], [38, 3, 1, "", "__call__"], [38, 3, 1, "", "__init__"], [38, 3, 1, "", "add_module"], [38, 3, 1, "", "apply"], [38, 3, 1, "", "bfloat16"], [38, 3, 1, "", "buffers"], [38, 2, 1, "", "call_super_init"], [38, 3, 1, "", "children"], [38, 3, 1, "", "compile"], [38, 3, 1, "", "cpu"], [38, 3, 1, "", "cuda"], [38, 3, 1, "", "double"], [38, 2, 1, "", "dump_patches"], [38, 3, 1, "", "eval"], [38, 3, 1, "", "extra_repr"], [38, 3, 1, "", "float"], [38, 3, 1, "", "forward"], [38, 3, 1, "", "from_checkpoint"], [38, 3, 1, "", "from_diagrams"], [38, 3, 1, "", "get_buffer"], [38, 3, 1, "", "get_diagram_output"], [38, 3, 1, "", "get_extra_state"], [38, 3, 1, "", "get_parameter"], [38, 3, 1, "", "get_submodule"], [38, 3, 1, "", "half"], [38, 3, 1, "", "initialise_weights"], [38, 3, 1, "", "ipu"], [38, 3, 1, "", "load"], [38, 3, 1, "", "load_state_dict"], [38, 3, 1, "", "modules"], [38, 3, 1, "", "named_buffers"], [38, 3, 1, "", "named_children"], [38, 3, 1, "", "named_modules"], [38, 3, 1, "", "named_parameters"], [38, 3, 1, "", "parameters"], [38, 3, 1, "", "register_backward_hook"], [38, 3, 1, "", "register_buffer"], [38, 3, 1, "", "register_forward_hook"], [38, 3, 1, "", "register_forward_pre_hook"], [38, 3, 1, "", "register_full_backward_hook"], [38, 3, 1, "", "register_full_backward_pre_hook"], [38, 3, 1, "", "register_load_state_dict_post_hook"], [38, 3, 1, "", "register_module"], [38, 3, 1, "", "register_parameter"], [38, 3, 1, "", "register_state_dict_pre_hook"], [38, 3, 1, "", "requires_grad_"], [38, 3, 1, "", "save"], [38, 3, 1, "", "set_extra_state"], [38, 3, 1, "", "share_memory"], [38, 3, 1, "", "state_dict"], [38, 2, 1, "", "symbols"], [38, 3, 1, "", "to"], [38, 3, 1, "", "to_empty"], [38, 3, 1, "", "train"], [38, 2, 1, "", "training"], [38, 3, 1, "", "type"], [38, 2, 1, "", "weights"], [38, 3, 1, "", "xpu"], [38, 3, 1, "", "zero_grad"]], "lambeq.training.PytorchTrainer": [[38, 3, 1, "", "__init__"], [38, 3, 1, "", "fit"], [38, 3, 1, "", "load_training_checkpoint"], [38, 2, 1, "", "model"], [38, 3, 1, "", "save_checkpoint"], [38, 3, 1, "", "training_step"], [38, 3, 1, "", "validation_step"]], "lambeq.training.QuantumModel": [[38, 3, 1, "", "__call__"], [38, 3, 1, "", "__init__"], [38, 3, 1, "", "forward"], [38, 3, 1, "", "from_checkpoint"], [38, 3, 1, "", "from_diagrams"], [38, 3, 1, "", "get_diagram_output"], [38, 3, 1, "", "initialise_weights"], [38, 3, 1, "", "load"], [38, 3, 1, "", "save"], [38, 2, 1, "", "weights"]], "lambeq.training.QuantumTrainer": [[38, 3, 1, "", "__init__"], [38, 3, 1, "", "fit"], [38, 3, 1, "", "load_training_checkpoint"], [38, 2, 1, "", "model"], [38, 3, 1, "", "save_checkpoint"], [38, 3, 1, "", "training_step"], [38, 3, 1, "", "validation_step"]], "lambeq.training.RotosolveOptimizer": [[38, 3, 1, "", "__init__"], [38, 3, 1, "", "backward"], [38, 3, 1, "", "load_state_dict"], [38, 2, 1, "", "model"], [38, 3, 1, "", "project"], [38, 3, 1, "", "state_dict"], [38, 3, 1, "", "step"], [38, 3, 1, "", "zero_grad"]], "lambeq.training.SPSAOptimizer": [[38, 3, 1, "", "__init__"], [38, 3, 1, "", "backward"], [38, 3, 1, "", "load_state_dict"], [38, 2, 1, "", "model"], [38, 3, 1, "", "state_dict"], [38, 3, 1, "", "step"], [38, 3, 1, "", "update_hyper_params"], [38, 3, 1, "", "zero_grad"]], "lambeq.training.TketModel": [[38, 3, 1, "", "__call__"], [38, 3, 1, "", "__init__"], [38, 3, 1, "", "forward"], [38, 3, 1, "", "from_checkpoint"], [38, 3, 1, "", "from_diagrams"], [38, 3, 1, "", "get_diagram_output"], [38, 3, 1, "", "initialise_weights"], [38, 3, 1, "", "load"], [38, 3, 1, "", "save"], [38, 2, 1, "", "symbols"], [38, 2, 1, "", "weights"]], "lambeq.training.Trainer": [[38, 3, 1, "", "__init__"], [38, 3, 1, "", "fit"], [38, 3, 1, "", "load_training_checkpoint"], [38, 3, 1, "", "save_checkpoint"], [38, 3, 1, "", "training_step"], [38, 3, 1, "", "validation_step"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:exception", "5": "py:property", "6": "py:function", "7": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "exception", "Python exception"], "5": ["py", "property", "Python property"], "6": ["py", "function", "Python function"], "7": ["py", "data", "Python data"]}, "titleterms": {"contribut": [0, 57], "lambeq": [0, 12, 30, 32, 33, 34, 35, 36, 37, 38, 47, 52, 56, 57, 58, 67, 68], "open": 0, "pull": 0, "request": 0, "trivial": 0, "an": 0, "issu": 0, "where": 0, "start": [0, 30], "code": 0, "conduct": 0, "advanc": [12, 39, 57], "low": 12, "level": [12, 60], "bibliographi": 13, "command": 14, "line": 14, "interfac": 14, "basic": 14, "usag": 14, "strict": 14, "pregroup": [14, 53, 56], "mode": 14, "us": [14, 18, 19, 20, 40, 63, 66, 68], "reader": [14, 21, 26, 57, 61], "rewrit": [14, 22, 35, 47, 57, 60, 67], "rule": [14, 22, 57, 60], "ans\u00e4tz": [14, 57], "other": 14, "option": [14, 52], "detail": 14, "posit": [14, 57], "argument": 14, "name": 14, "output": [14, 23], "parser": [14, 17], "configur": [14, 40], "circuit": [15, 16, 18, 19, 20, 23, 56, 63, 64, 65, 66, 68], "classic": [16, 56, 59, 62, 68], "pipelin": [16, 19, 20, 49], "input": [16, 61, 62, 63, 64, 66], "data": [16, 18, 19, 20, 42, 62, 63, 64, 66], "creat": [16, 18, 19, 20, 23, 50, 57, 62, 63, 64, 66], "diagram": [16, 18, 19, 20, 23, 53, 60, 62, 63, 64, 66, 67], "parameteris": [16, 19, 20, 23, 59, 62, 63, 64, 66], "defin": [16, 19, 20, 23, 62, 63, 64, 66], "evalu": [16, 19, 20, 23, 41, 62, 63, 64, 66, 68], "metric": [16, 19, 20, 23, 41, 62, 63, 64], "initi": [16, 19, 20, 23], "trainer": [16, 19, 20, 23, 62, 63, 64], "train": [16, 18, 19, 20, 38, 39, 47, 54, 55, 62, 63, 64, 66, 67, 68], "show": [16, 19, 20, 23], "result": [16, 19, 20, 23, 62, 63, 64], "hybrid": [18, 63, 68], "model": [18, 27, 40, 61, 62, 63, 64, 68], "pennylan": [18, 33], "backend": [18, 20, 33, 40, 47, 67], "read": [18, 19, 20, 45, 48], "remov": [18, 19, 20, 22], "cup": [18, 19, 20, 22, 61], "pure": 18, "quantum": [18, 19, 20, 33, 56, 59, 63, 64, 66, 68], "initialis": [18, 62, 63, 64], "paramet": 18, "prepar": [18, 62, 63, 64, 66], "dataset": [18, 42, 62, 63, 64], "pytorchtrain": 18, "determin": [18, 22], "test": [18, 63], "accuraci": [18, 63], "standard": [18, 63], "pytorch": [18, 63], "make": [18, 63], "pair": [18, 63], "log": [18, 63], "jax": 20, "auxiliari": 22, "connector": 22, "adverb": 22, "preposit": 22, "phrase": 22, "rel": 22, "pronoun": 22, "coordin": 22, "curri": 22, "functor": [22, 56, 57], "rotosolv": 23, "optim": 23, "final": 23, "tensor": [24, 33, 53, 56, 65, 68], "tokenis": [25, 37, 47, 61, 67], "word": [25, 27, 42, 61], "split": 25, "document": 25, "sentenc": [25, 61], "tree": [26, 61], "handl": [27, 42], "unknown": [27, 42], "syntax": [27, 61], "free": 27, "base": [27, 61, 68], "index": 28, "glossari": 29, "user": 30, "support": [30, 31], "licenc": 30, "how": 30, "cite": 30, "get": 30, "nlp": [30, 43], "101": 30, "tutori": 30, "toolkit": 30, "refer": [30, 45], "extern": 30, "link": 30, "instal": 31, "depccg": 31, "ansatz": [32, 47, 57, 67], "grammar": [33, 53, 56], "categori": [33, 58], "note": [33, 51], "numerical_backend": 33, "numer": 33, "tk": 33, "draw": 33, "bobcat": [34, 47, 67], "text2diagram": [36, 47, 67], "manual": 39, "choos": 40, "numpymodel": 40, "pennylanemodel": 40, "differ": 40, "case": [40, 59, 62, 63, 64, 66, 68], "pytorchmodel": 40, "tketmodel": 40, "text": [41, 42], "classif": 41, "binari": 41, "v": 41, "multi": 41, "class": [41, 67], "loss": [41, 63, 64, 66], "function": [41, 66], "work": [42, 66], "corpora": 42, "pre": [42, 61], "process": [42, 61], "token": 42, "introduct": [43, 65], "qnlp": 43, "comput": [43, 63, 68], "lingust": 43, "task": 43, "applic": 43, "typic": 43, "workflow": 43, "machin": 44, "learn": 44, "best": 44, "practic": 44, "cross": 44, "valid": 44, "further": 45, "studi": 45, "onlin": 45, "cours": 45, "organis": 45, "softwar": 45, "tool": 45, "exampl": [46, 56, 57], "subpackag": 47, "syntact": 48, "pars": 48, "ccgbank": 48, "png": 50, "file": 50, "releas": 51, "0": 51, "4": [51, 54], "1": [51, 56, 61], "3": [51, 59], "2": [51, 56, 60], "8": 51, "7": 51, "6": 51, "5": 51, "packag": 52, "avail": 52, "string": 53, "motiv": 53, "connect": 53, "network": [53, 56], "step": [54, 59, 60, 61], "troubleshoot": 55, "nan": 55, "inf": 55, "error": 55, "dure": 55, "ssl": 55, "window": 55, "discocat": [56, 61], "veri": 56, "twist": 56, "extend": 57, "comb": 57, "simplerewriterul": 57, "negat": 57, "rewriterul": 57, "past": 57, "circuitansatz": 57, "real": [57, 63], "valu": 57, "tensoransatz": 57, "monoid": 58, "rigid": 58, "matrix": 59, "product": 59, "state": 59, "box": 60, "bag": 61, "spider": 61, "sequenc": 61, "stair": 61, "instanti": [62, 63, 64], "ad": 62, "custom": 62, "layer": 62, "simplifi": [63, 64], "run": 63, "analys": 63, "intern": 63, "represent": 63, "filter": 64, "symbol": 65, "from": 65, "A": 66, "complet": 66, "vocabulari": 66, "common": 68, "exact": 68, "non": 68, "shot": 68, "simul": 68, "hardwar": 68}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Contributing to lambeq": [[0, "contributing-to-lambeq"]], "Opening a pull request": [[0, "opening-a-pull-request"]], "Trivial contributions": [[0, "trivial-contributions"]], "Opening an issue": [[0, "opening-an-issue"]], "Where to start": [[0, "where-to-start"]], "Code of conduct": [[0, "code-of-conduct"]], "Advanced: low-level lambeq": [[12, "advanced-low-level-lambeq"]], "Bibliography": [[13, "bibliography"]], "Command-line interface": [[14, "command-line-interface"]], "Basic usage": [[14, "basic-usage"]], "Strict pregroups mode": [[14, "strict-pregroups-mode"]], "Using a reader": [[14, "using-a-reader"]], "Rewrite rules and ans\u00e4tze": [[14, "rewrite-rules-and-ansatze"]], "Other options": [[14, "other-options"]], "Detailed options": [[14, "detailed-options"]], "Positional Arguments": [[14, "positional-arguments"]], "Named Arguments": [[14, "named-arguments"]], "Output": [[14, "output"]], "Parser": [[14, "parser"], [17, "Parser"]], "Rewriter": [[14, "rewriter"]], "Ans\u00e4tze": [[14, "ans\u00e4tze"]], "Configuration": [[14, "configuration"]], "Circuit": [[15, "Circuit"]], "Classical pipeline": [[16, "Classical-pipeline"]], "Input data": [[16, "Input-data"], [62, "Input-data"], [63, "Input-data"], [64, "Input-data"], [66, "Input-data"]], "Create diagrams": [[16, "Create-diagrams"], [19, "Create-diagrams"], [20, "Create-diagrams"]], "Create circuits": [[16, "Create-circuits"], [18, "Create-circuits"], [19, "Create-circuits"], [20, "Create-circuits"], [23, "Create-circuits"], [63, "Create-circuits"], [64, "Create-circuits"]], "Parameterise": [[16, "Parameterise"], [19, "Parameterise"], [20, "Parameterise"], [23, "Parameterise"]], "Define Evaluation Metric": [[16, "Define-Evaluation-Metric"]], "Initialize Trainer": [[16, "Initialize-Trainer"]], "Train": [[16, "Train"], [19, "Train"], [20, "Train"], [62, "Train"], [63, "Train"], [64, "Train"], [66, "Train"]], "Show results": [[16, "Show-results"], [19, "Show-results"], [20, "Show-results"], [23, "Show-results"]], "Training hybrid models using the Pennylane backend": [[18, "Training-hybrid-models-using-the-Pennylane-backend"]], "Read in the data and create diagrams": [[18, "Read-in-the-data-and-create-diagrams"], [19, "Read-in-the-data-and-create-diagrams"], [20, "Read-in-the-data-and-create-diagrams"]], "Remove cups": [[18, "Remove-cups"], [22, "Remove-cups"]], "Create (pure quantum) model and initialise parameters": [[18, "Create-(pure-quantum)-model-and-initialise-parameters"]], "Prepare train dataset": [[18, "Prepare-train-dataset"]], "Training": [[18, "Training"], [62, "Training"], [63, "Training"], [64, "Training"], [66, "Training"]], "Using PytorchTrainer": [[18, "Using-PytorchTrainer"]], "Determine test accuracy": [[18, "Determine-test-accuracy"]], "Using standard PyTorch": [[18, "Using-standard-PyTorch"], [63, "Using-standard-PyTorch"]], "Determine the test accuracy": [[18, "Determine-the-test-accuracy"]], "Creating a hybrid model": [[18, "Creating-a-hybrid-model"]], "Make paired dataset": [[18, "Make-paired-dataset"], [63, "Make-paired-dataset"]], "Initialise the model": [[18, "Initialise-the-model"]], "Train the model and log accuracies": [[18, "Train-the-model-and-log-accuracies"]], "Quantum pipeline using the Quantum Trainer": [[19, "Quantum-pipeline-using-the-Quantum-Trainer"]], "Remove the cups": [[19, "Remove-the-cups"], [20, "Remove-the-cups"]], "Define evaluation metric": [[19, "Define-evaluation-metric"], [20, "Define-evaluation-metric"], [23, "Define-evaluation-metric"], [62, "Define-evaluation-metric"]], "Initialize trainer": [[19, "Initialize-trainer"], [20, "Initialize-trainer"], [23, "Initialize-trainer"]], "Quantum pipeline using JAX backend": [[20, "Quantum-pipeline-using-JAX-backend"]], "Reader": [[21, "Reader"]], "Rewrite": [[22, "Rewrite"]], "Auxiliary rule": [[22, "Auxiliary-rule"]], "Connector rule": [[22, "Connector-rule"]], "Determiner rule": [[22, "Determiner-rule"]], "Adverb rules": [[22, "Adverb-rules"]], "Prepositional phrase rule": [[22, "Prepositional-phrase-rule"]], "Relative Pronoun rules": [[22, "Relative-Pronoun-rules"]], "Coordination": [[22, "Coordination"]], "Curry functor": [[22, "Curry-functor"]], "Rotosolve optimizer": [[23, "Rotosolve-optimizer"]], "Create diagram": [[23, "Create-diagram"]], "Final output": [[23, "Final-output"]], "Tensor": [[24, "Tensor"]], "Tokenisation": [[25, "Tokenisation"]], "Word tokenisation": [[25, "Word-tokenisation"]], "Splitting a document into sentences": [[25, "Splitting-a-document-into-sentences"]], "Tree reader": [[26, "Tree-reader"]], "Handling unknown words": [[27, "Handling-unknown-words"], [42, "handling-unknown-words"]], "Handling unknown words in syntax-free models": [[27, "Handling-unknown-words-in-syntax-free-models"]], "Handling unknown words in syntax-based models": [[27, "Handling-unknown-words-in-syntax-based-models"]], "Index": [[28, "index"]], "Glossary": [[29, "glossary"]], "lambeq": [[30, "lambeq"]], "User support": [[30, "user-support"]], "Licence": [[30, "licence"]], "How to cite": [[30, "how-to-cite"]], "Getting started": [[30, null]], "NLP-101": [[30, null]], "Tutorials": [[30, null]], "Toolkit": [[30, null]], "Reference": [[30, null]], "External links": [[30, null]], "Installation": [[31, "installation"]], "DepCCG support": [[31, "depccg-support"]], "lambeq.ansatz": [[32, "module-lambeq.ansatz"], [47, "lambeq-ansatz"], [67, "lambeq-ansatz"]], "lambeq.backend": [[33, "lambeq-backend"], [47, "lambeq-backend"], [67, "lambeq-backend"]], "lambeq.backend.grammar": [[33, "module-lambeq.backend.grammar"]], "Grammar category": [[33, "grammar-category"]], "lambeq.backend.tensor": [[33, "module-lambeq.backend.tensor"]], "Tensor category": [[33, "tensor-category"]], "lambeq.backend.quantum": [[33, "module-lambeq.backend.quantum"]], "Quantum category": [[33, "quantum-category"]], "Notes": [[33, "notes"]], "lambeq.backend.numerical_backend": [[33, "module-lambeq.backend.numerical_backend"]], "Numerical Backend": [[33, "numerical-backend"]], "lambeq.backend.tk": [[33, "lambeq-backend-tk"]], "lambeq.backend.pennylane": [[33, "lambeq-backend-pennylane"]], "lambeq.backend.drawing": [[33, "module-lambeq.backend.drawing"]], "lambeq.bobcat": [[34, "module-lambeq.bobcat"], [47, "lambeq-bobcat"], [67, "lambeq-bobcat"]], "lambeq.rewrite": [[35, "module-lambeq.rewrite"], [47, "lambeq-rewrite"], [67, "lambeq-rewrite"]], "lambeq.text2diagram": [[36, "module-lambeq.text2diagram"], [47, "lambeq-text2diagram"], [67, "lambeq-text2diagram"]], "lambeq.tokeniser": [[37, "module-lambeq.tokeniser"], [47, "lambeq-tokeniser"], [67, "lambeq-tokeniser"]], "lambeq.training": [[38, "module-lambeq.training"], [47, "lambeq-training"], [67, "lambeq-training"]], "Advanced: Manual training": [[39, "advanced-manual-training"]], "Choosing a model": [[40, "choosing-a-model"]], "NumpyModel": [[40, "numpymodel"]], "PennyLaneModel": [[40, "pennylanemodel"]], "Backend configurations for different use cases.": [[40, "id1"]], "PytorchModel": [[40, "pytorchmodel"]], "TketModel": [[40, "tketmodel"]], "Text classification": [[41, "text-classification"]], "Binary vs multi-class classification": [[41, "binary-vs-multi-class-classification"]], "Loss functions": [[41, "loss-functions"]], "Evaluation metrics": [[41, "evaluation-metrics"]], "Working with text data": [[42, "working-with-text-data"]], "Datasets and corpora": [[42, "datasets-and-corpora"]], "Text pre-processing": [[42, "text-pre-processing"]], "Tokenization": [[42, "tokenization"]], "Introduction": [[43, "introduction"]], "NLP, QNLP and Computational Lingustics": [[43, "nlp-qnlp-and-computational-lingustics"]], "Tasks and applications": [[43, "tasks-and-applications"]], "Typical NLP workflow": [[43, "typical-nlp-workflow"]], "Machine learning best practices": [[44, "machine-learning-best-practices"]], "Cross-validation": [[44, "cross-validation"]], "References for further study": [[45, "references-for-further-study"]], "Reading": [[45, "reading"]], "Online courses": [[45, "online-courses"]], "Organisations": [[45, "organisations"]], "Software tools": [[45, "software-tools"]], "Examples": [[46, "examples"]], "Subpackages": [[47, "subpackages"]], "Syntactic parsing": [[48, "syntactic-parsing"]], "Reading CCGBank": [[48, "reading-ccgbank"]], "Pipeline": [[49, "pipeline"]], "Creating PNG files": [[50, "creating-png-files"]], "Release notes": [[51, "release-notes"]], "0.4.1": [[51, "rel-0-4-1"]], "0.4.0": [[51, "rel-0-4-0"]], "0.3.3": [[51, "rel-0-3-3"]], "0.3.2": [[51, "rel-0-3-2"]], "0.3.1": [[51, "rel-0-3-1"]], "0.3.0": [[51, "rel-0-3-0"]], "0.2.8": [[51, "rel-0-2-8"]], "0.2.7": [[51, "rel-0-2-7"]], "0.2.6": [[51, "rel-0-2-6"]], "0.2.5": [[51, "rel-0-2-5"]], "0.2.4": [[51, "rel-0-2-4"]], "0.2.3": [[51, "rel-0-2-3"]], "0.2.2": [[51, "rel-0-2-2"]], "0.2.1": [[51, "rel-0-2-1"]], "0.2.0": [[51, "rel-0-2-0"]], "0.1.2": [[51, "rel-0-1-2"]], "0.1.1": [[51, "rel-0-1-1"]], "0.1.0": [[51, "rel-0-1-0"]], "lambeq package": [[52, "module-lambeq"]], "Available Options": [[52, "id4"]], "String diagrams": [[53, "string-diagrams"]], "Motivation and connection to tensor networks": [[53, "motivation-and-connection-to-tensor-networks"]], "Pregroup grammars": [[53, "pregroup-grammars"], [56, "Pregroup-grammars"]], "Step 4: Training": [[54, "step-4-training"]], "Troubleshooting": [[55, "troubleshooting"]], "NaN and Inf errors during training": [[55, "nan-and-inf-errors-during-training"]], "SSL error [Windows]": [[55, "ssl-error-windows"]], "DisCoCat in lambeq": [[56, "DisCoCat-in-lambeq"]], "Functors": [[56, "Functors"]], "Example 1: \u201cVery\u201d functor": [[56, "Example-1:-\u201cVery\u201d-functor"]], "Example 2: Twist functor": [[56, "Example-2:-Twist-functor"]], "Classical DisCoCat: Tensor networks": [[56, "Classical-DisCoCat:-Tensor-networks"]], "Quantum DisCoCat: Quantum circuits": [[56, "Quantum-DisCoCat:-Quantum-circuits"]], "Advanced: Extending lambeq": [[57, "Advanced:-Extending-lambeq"]], "Creating readers": [[57, "Creating-readers"]], "Reader example: \u201cComb\u201d reader": [[57, "Reader-example:-\u201cComb\u201d-reader"]], "Creating rewrite rules": [[57, "Creating-rewrite-rules"]], "SimpleRewriteRule example: Negation functor": [[57, "SimpleRewriteRule-example:-Negation-functor"]], "RewriteRule example: \u201cPast\u201d functor": [[57, "RewriteRule-example:-\u201cPast\u201d-functor"]], "Creating ans\u00e4tze": [[57, "Creating-ans\u00e4tze"]], "CircuitAnsatz example: \u201cReal-valued\u201d ansatz": [[57, "CircuitAnsatz-example:-\u201cReal-valued\u201d-ansatz"]], "TensorAnsatz example: \u201cPositive\u201d ansatz": [[57, "TensorAnsatz-example:-\u201cPositive\u201d-ansatz"]], "Contributions": [[57, "Contributions"]], "Monoidal categories in lambeq": [[58, "Monoidal-categories-in-lambeq"]], "Categories": [[58, "Categories"]], "Monoidal categories": [[58, "Monoidal-categories"]], "Rigid monoidal categories": [[58, "Rigid-monoidal-categories"]], "Step 3. Parameterisation": [[59, "Step-3.-Parameterisation"]], "Quantum case": [[59, "Quantum-case"]], "Classical case": [[59, "Classical-case"]], "Matrix product states": [[59, "Matrix-product-states"]], "Step 2. Diagram rewriting": [[60, "Step-2.-Diagram-rewriting"]], "Box-level rewrite rules": [[60, "Box-level-rewrite-rules"]], "Diagram-level rewriters": [[60, "Diagram-level-rewriters"]], "Step 1. Sentence input": [[61, "Step-1.-Sentence-input"]], "Pre-processing and tokenisation": [[61, "Pre-processing-and-tokenisation"]], "Syntax-based model: DisCoCat": [[61, "Syntax-based-model:-DisCoCat"]], "Bag-of-words: Spiders reader": [[61, "Bag-of-words:-Spiders-reader"]], "Word-sequence models: Cups and stairs readers": [[61, "Word-sequence-models:-Cups-and-stairs-readers"]], "Tree readers": [[61, "Tree-readers"]], "Training: Classical case": [[62, "Training:-Classical-case"]], "Preparation": [[62, "Preparation"], [63, "Preparation"], [64, "Preparation"], [66, "Preparation"]], "Creating and parameterising diagrams": [[62, "Creating-and-parameterising-diagrams"], [63, "Creating-and-parameterising-diagrams"], [64, "Creating-and-parameterising-diagrams"], [66, "Creating-and-parameterising-diagrams"]], "Instantiate model": [[62, "Instantiate-model"], [63, "Instantiate-model"]], "Initialise trainer": [[62, "Initialise-trainer"], [63, "Initialise-trainer"], [64, "Initialise-trainer"]], "Create datasets": [[62, "Create-datasets"], [63, "Create-datasets"], [64, "Create-datasets"]], "Results": [[62, "Results"], [63, "Results"], [64, "Results"]], "Adding custom layers to the model": [[62, "Adding-custom-layers-to-the-model"]], "Training: Hybrid case": [[63, "Training:-Hybrid-case"]], "Simplify diagrams": [[63, "Simplify-diagrams"]], "Running on a real quantum computer": [[63, "Running-on-a-real-quantum-computer"]], "Define loss and evaluation metric": [[63, "Define-loss-and-evaluation-metric"], [64, "Define-loss-and-evaluation-metric"]], "Evaluate test accuracy": [[63, "Evaluate-test-accuracy"]], "Hybrid models": [[63, "Hybrid-models"]], "Initialise model": [[63, "Initialise-model"]], "Train and log accuracies": [[63, "Train-and-log-accuracies"]], "Analysing the internal representations of the model": [[63, "Analysing-the-internal-representations-of-the-model"]], "Training: Quantum case": [[64, "Training:-Quantum-case"]], "Filter and simplify diagrams": [[64, "Filter-and-simplify-diagrams"]], "Instantiate the model": [[64, "Instantiate-the-model"]], "Introduction to symbols": [[65, "Introduction-to-symbols"]], "Circuit symbols": [[65, "Circuit-symbols"]], "From symbols to tensors": [[65, "From-symbols-to-tensors"]], "A complete use case": [[66, "A-complete-use-case"]], "Creating a vocabulary": [[66, "Creating-a-vocabulary"]], "Define loss function": [[66, "Define-loss-function"]], "Evaluate": [[66, "Evaluate"]], "Working with quantum circuits": [[66, "Working-with-quantum-circuits"]], "Class diagrams": [[67, "class-diagrams"]], "lambeq use cases": [[68, "lambeq-use-cases"]], "Common training use cases.": [[68, "id2"]], "Exact (non shot-based) simulation of quantum circuits on classical hardware": [[68, "exact-non-shot-based-simulation-of-quantum-circuits-on-classical-hardware"]], "Shot-based simulation of quantum circuits on classical hardware": [[68, "shot-based-simulation-of-quantum-circuits-on-classical-hardware"]], "Evaluation of quantum circuits on a quantum computer": [[68, "evaluation-of-quantum-circuits-on-a-quantum-computer"]], "Evaluation of classical tensor-based models": [[68, "evaluation-of-classical-tensor-based-models"]], "Hybrid classical/quantum simulations on classical hardware": [[68, "hybrid-classical-quantum-simulations-on-classical-hardware"]]}, "indexentries": {"bobcat": [[29, "term-Bobcat"]], "ccgbank": [[29, "term-CCGBank"]], "combinatory categorial grammar (ccg)": [[29, "term-Combinatory-Categorial-Grammar-CCG"]], "discocat": [[29, "term-DisCoCat"]], "discopy": [[29, "term-DisCoPy"]], "frobenius algebra": [[29, "term-Frobenius-algebra"]], "iqp circuit": [[29, "term-IQP-circuit"]], "nisq": [[29, "term-NISQ"]], "pennylane": [[29, "term-PennyLane"]], "pytorch": [[29, "term-PyTorch"]], "qiskit": [[29, "term-Qiskit"]], "adjoint": [[29, "term-adjoint"]], "ansatz (plural: ans\u00e4tze)": [[29, "term-ansatz-plural-ansatze"]], "bag-of-words": [[29, "term-bag-of-words"]], "cap": [[29, "term-cap"]], "categorical quantum mechanics (cqm)": [[29, "term-categorical-quantum-mechanics-CQM"]], "category": [[29, "term-category"]], "compact closed category": [[29, "term-compact-closed-category"]], "compositional model": [[29, "term-compositional-model"]], "cup": [[29, "term-cup"]], "depccg": [[29, "term-depccg"]], "functor": [[29, "term-functor"]], "loss function": [[29, "term-loss-function"]], "matrix product state (mps)": [[29, "term-matrix-product-state-MPS"]], "model": [[29, "term-model"]], "monoidal category": [[29, "term-monoidal-category"]], "natural language processing (nlp)": [[29, "term-natural-language-processing-NLP"]], "noise": [[29, "term-noise"]], "parser": [[29, "term-parser"]], "post-selection": [[29, "term-post-selection"]], "pregroup grammar": [[29, "term-pregroup-grammar"]], "pytket": [[29, "term-pytket"]], "quantum nlp (qnlp)": [[29, "term-quantum-NLP-QNLP"]], "quantum circuit": [[29, "term-quantum-circuit"]], "quantum gate": [[29, "term-quantum-gate"]], "qubit": [[29, "term-qubit"]], "reader": [[29, "term-reader"]], "rewrite rule": [[29, "term-rewrite-rule"]], "rewriter": [[29, "term-rewriter"]], "rigid category": [[29, "term-rigid-category"]], "shots": [[29, "term-shots"]], "snake equations": [[29, "term-snake-equations"]], "spider": [[29, "term-spider"]], "string diagram": [[29, "term-string-diagram"]], "swap": [[29, "term-swap"]], "symbol": [[29, "term-symbol"]], "symmetric monoidal category": [[29, "term-symmetric-monoidal-category"]], "syntax tree": [[29, "term-syntax-tree"]], "tensor network": [[29, "term-tensor-network"]], "tensor train": [[29, "term-tensor-train"]], "tket": [[29, "term-tket"]], "trainer": [[29, "term-trainer"]], "tree reader": [[29, "term-tree-reader"]], "word-sequence model": [[29, "term-word-sequence-model"]], "bond_type (lambeq.ansatz.mpsansatz attribute)": [[32, "lambeq.ansatz.MPSAnsatz.BOND_TYPE"]], "baseansatz (class in lambeq.ansatz)": [[32, "lambeq.ansatz.BaseAnsatz"]], "circuitansatz (class in lambeq.ansatz)": [[32, "lambeq.ansatz.CircuitAnsatz"]], "iqpansatz (class in lambeq.ansatz)": [[32, "lambeq.ansatz.IQPAnsatz"]], "mpsansatz (class in lambeq.ansatz)": [[32, "lambeq.ansatz.MPSAnsatz"]], "sim14ansatz (class in lambeq.ansatz)": [[32, "lambeq.ansatz.Sim14Ansatz"]], "sim15ansatz (class in lambeq.ansatz)": [[32, "lambeq.ansatz.Sim15Ansatz"]], "sim4ansatz (class in lambeq.ansatz)": [[32, "lambeq.ansatz.Sim4Ansatz"]], "spideransatz (class in lambeq.ansatz)": [[32, "lambeq.ansatz.SpiderAnsatz"]], "stronglyentanglingansatz (class in lambeq.ansatz)": [[32, "lambeq.ansatz.StronglyEntanglingAnsatz"]], "symbol (class in lambeq.ansatz)": [[32, "lambeq.ansatz.Symbol"]], "tensoransatz (class in lambeq.ansatz)": [[32, "lambeq.ansatz.TensorAnsatz"]], "__call__() (lambeq.ansatz.baseansatz method)": [[32, "lambeq.ansatz.BaseAnsatz.__call__"]], "__call__() (lambeq.ansatz.circuitansatz method)": [[32, "lambeq.ansatz.CircuitAnsatz.__call__"]], "__call__() (lambeq.ansatz.mpsansatz method)": [[32, "lambeq.ansatz.MPSAnsatz.__call__"]], "__call__() (lambeq.ansatz.spideransatz method)": [[32, "lambeq.ansatz.SpiderAnsatz.__call__"]], "__call__() (lambeq.ansatz.tensoransatz method)": [[32, "lambeq.ansatz.TensorAnsatz.__call__"]], "__init__() (lambeq.ansatz.baseansatz method)": [[32, "lambeq.ansatz.BaseAnsatz.__init__"]], "__init__() (lambeq.ansatz.circuitansatz method)": [[32, "lambeq.ansatz.CircuitAnsatz.__init__"]], "__init__() (lambeq.ansatz.iqpansatz method)": [[32, "lambeq.ansatz.IQPAnsatz.__init__"]], "__init__() (lambeq.ansatz.mpsansatz method)": [[32, "lambeq.ansatz.MPSAnsatz.__init__"]], "__init__() (lambeq.ansatz.sim14ansatz method)": [[32, "lambeq.ansatz.Sim14Ansatz.__init__"]], "__init__() (lambeq.ansatz.sim15ansatz method)": [[32, "lambeq.ansatz.Sim15Ansatz.__init__"]], "__init__() (lambeq.ansatz.sim4ansatz method)": [[32, "lambeq.ansatz.Sim4Ansatz.__init__"]], "__init__() (lambeq.ansatz.spideransatz method)": [[32, "lambeq.ansatz.SpiderAnsatz.__init__"]], "__init__() (lambeq.ansatz.stronglyentanglingansatz method)": [[32, "lambeq.ansatz.StronglyEntanglingAnsatz.__init__"]], "__init__() (lambeq.ansatz.tensoransatz method)": [[32, "lambeq.ansatz.TensorAnsatz.__init__"]], "circuit() (lambeq.ansatz.iqpansatz method)": [[32, "lambeq.ansatz.IQPAnsatz.circuit"]], "circuit() (lambeq.ansatz.sim14ansatz method)": [[32, "lambeq.ansatz.Sim14Ansatz.circuit"]], "circuit() (lambeq.ansatz.sim15ansatz method)": [[32, "lambeq.ansatz.Sim15Ansatz.circuit"]], "circuit() (lambeq.ansatz.sim4ansatz method)": [[32, "lambeq.ansatz.Sim4Ansatz.circuit"]], "circuit() (lambeq.ansatz.stronglyentanglingansatz method)": [[32, "lambeq.ansatz.StronglyEntanglingAnsatz.circuit"]], "default_assumptions (lambeq.ansatz.symbol attribute)": [[32, "lambeq.ansatz.Symbol.default_assumptions"]], "directed_cod (lambeq.ansatz.symbol attribute)": [[32, "lambeq.ansatz.Symbol.directed_cod"]], "directed_dom (lambeq.ansatz.symbol attribute)": [[32, "lambeq.ansatz.Symbol.directed_dom"]], "lambeq.ansatz": [[32, "module-lambeq.ansatz"]], "module": [[32, "module-lambeq.ansatz"], [33, "module-lambeq.backend.drawing"], [33, "module-lambeq.backend.grammar"], [33, "module-lambeq.backend.numerical_backend"], [33, "module-lambeq.backend.quantum"], [33, "module-lambeq.backend.tensor"], [34, "module-lambeq.bobcat"], [35, "module-lambeq.rewrite"], [36, "module-lambeq.text2diagram"], [37, "module-lambeq.tokeniser"], [38, "module-lambeq.training"], [52, "module-lambeq"]], "name (lambeq.ansatz.symbol attribute)": [[32, "lambeq.ansatz.Symbol.name"]], "ob_size() (lambeq.ansatz.circuitansatz method)": [[32, "lambeq.ansatz.CircuitAnsatz.ob_size"]], "params_shape() (lambeq.ansatz.circuitansatz method)": [[32, "lambeq.ansatz.CircuitAnsatz.params_shape"]], "params_shape() (lambeq.ansatz.iqpansatz method)": [[32, "lambeq.ansatz.IQPAnsatz.params_shape"]], "params_shape() (lambeq.ansatz.sim14ansatz method)": [[32, "lambeq.ansatz.Sim14Ansatz.params_shape"]], "params_shape() (lambeq.ansatz.sim15ansatz method)": [[32, "lambeq.ansatz.Sim15Ansatz.params_shape"]], "params_shape() (lambeq.ansatz.sim4ansatz method)": [[32, "lambeq.ansatz.Sim4Ansatz.params_shape"]], "params_shape() (lambeq.ansatz.stronglyentanglingansatz method)": [[32, "lambeq.ansatz.StronglyEntanglingAnsatz.params_shape"]], "size (lambeq.ansatz.symbol property)": [[32, "lambeq.ansatz.Symbol.size"]], "sort_key() (lambeq.ansatz.symbol method)": [[32, "lambeq.ansatz.Symbol.sort_key"]], "anticonjugate (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.AntiConjugate"]], "backend (class in lambeq.backend.numerical_backend)": [[33, "lambeq.backend.numerical_backend.Backend"]], "bit (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Bit"]], "box (class in lambeq.backend.grammar)": [[33, "lambeq.backend.grammar.Box"]], "box (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Box"]], "box (class in lambeq.backend.tensor)": [[33, "lambeq.backend.tensor.Box"]], "box (lambeq.backend.grammar.category attribute)": [[33, "lambeq.backend.grammar.Category.Box"]], "bra (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Bra"]], "crx() (in module lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.CRx"]], "cry() (in module lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.CRy"]], "crz() (in module lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.CRz"]], "cap (class in lambeq.backend.grammar)": [[33, "lambeq.backend.grammar.Cap"]], "cap (class in lambeq.backend.tensor)": [[33, "lambeq.backend.tensor.Cap"]], "category (class in lambeq.backend.grammar)": [[33, "lambeq.backend.grammar.Category"]], "controlled (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Controlled"]], "cup (class in lambeq.backend.grammar)": [[33, "lambeq.backend.grammar.Cup"]], "cup (class in lambeq.backend.tensor)": [[33, "lambeq.backend.tensor.Cup"]], "daggered (class in lambeq.backend.grammar)": [[33, "lambeq.backend.grammar.Daggered"]], "daggered (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Daggered"]], "daggered (class in lambeq.backend.tensor)": [[33, "lambeq.backend.tensor.Daggered"]], "diagram (class in lambeq.backend.grammar)": [[33, "lambeq.backend.grammar.Diagram"]], "diagram (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Diagram"]], "diagram (class in lambeq.backend.tensor)": [[33, "lambeq.backend.tensor.Diagram"]], "diagram (lambeq.backend.grammar.category attribute)": [[33, "lambeq.backend.grammar.Category.Diagram"]], "diagrammable (class in lambeq.backend.grammar)": [[33, "lambeq.backend.grammar.Diagrammable"]], "dim (class in lambeq.backend.tensor)": [[33, "lambeq.backend.tensor.Dim"]], "discard (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Discard"]], "drawablediagram (class in lambeq.backend.drawing)": [[33, "lambeq.backend.drawing.DrawableDiagram"]], "encode (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Encode"]], "entity (class in lambeq.backend.grammar)": [[33, "lambeq.backend.grammar.Entity"]], "functor (class in lambeq.backend.grammar)": [[33, "lambeq.backend.grammar.Functor"]], "id() (in module lambeq.backend.grammar)": [[33, "lambeq.backend.grammar.Id"]], "id() (in module lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Id"]], "jax (class in lambeq.backend.numerical_backend)": [[33, "lambeq.backend.numerical_backend.JAX"]], "ket (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Ket"]], "layer (class in lambeq.backend.grammar)": [[33, "lambeq.backend.grammar.Layer"]], "layer (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Layer"]], "layer (class in lambeq.backend.tensor)": [[33, "lambeq.backend.tensor.Layer"]], "layer (lambeq.backend.grammar.category attribute)": [[33, "lambeq.backend.grammar.Category.Layer"]], "measure (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Measure"]], "mixedstate (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.MixedState"]], "numpy (class in lambeq.backend.numerical_backend)": [[33, "lambeq.backend.numerical_backend.NumPy"]], "parametrized (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Parametrized"]], "pytorch (class in lambeq.backend.numerical_backend)": [[33, "lambeq.backend.numerical_backend.PyTorch"]], "rotation (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Rotation"]], "rx (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Rx"]], "ry (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Ry"]], "rz (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Rz"]], "scalar (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Scalar"]], "selfconjugate (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.SelfConjugate"]], "spider (class in lambeq.backend.grammar)": [[33, "lambeq.backend.grammar.Spider"]], "spider (class in lambeq.backend.tensor)": [[33, "lambeq.backend.tensor.Spider"]], "sqrt (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Sqrt"]], "swap (class in lambeq.backend.grammar)": [[33, "lambeq.backend.grammar.Swap"]], "swap (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Swap"]], "swap (class in lambeq.backend.tensor)": [[33, "lambeq.backend.tensor.Swap"]], "tensorflow (class in lambeq.backend.numerical_backend)": [[33, "lambeq.backend.numerical_backend.TensorFlow"]], "ty (class in lambeq.backend.grammar)": [[33, "lambeq.backend.grammar.Ty"]], "ty (class in lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.Ty"]], "ty (lambeq.backend.grammar.category attribute)": [[33, "lambeq.backend.grammar.Category.Ty"]], "word (class in lambeq.backend.grammar)": [[33, "lambeq.backend.grammar.Word"]], "__call__() (lambeq.backend.grammar.category method)": [[33, "lambeq.backend.grammar.Category.__call__"]], "__call__() (lambeq.backend.grammar.functor method)": [[33, "lambeq.backend.grammar.Functor.__call__"]], "__init__() (lambeq.backend.drawing.drawablediagram method)": [[33, "lambeq.backend.drawing.DrawableDiagram.__init__"]], "__init__() (lambeq.backend.grammar.box method)": [[33, "lambeq.backend.grammar.Box.__init__"]], "__init__() (lambeq.backend.grammar.cap method)": [[33, "lambeq.backend.grammar.Cap.__init__"]], "__init__() (lambeq.backend.grammar.category method)": [[33, "lambeq.backend.grammar.Category.__init__"]], "__init__() (lambeq.backend.grammar.cup method)": [[33, "lambeq.backend.grammar.Cup.__init__"]], "__init__() (lambeq.backend.grammar.daggered method)": [[33, "lambeq.backend.grammar.Daggered.__init__"]], "__init__() (lambeq.backend.grammar.diagram method)": [[33, "lambeq.backend.grammar.Diagram.__init__"]], "__init__() (lambeq.backend.grammar.diagrammable method)": [[33, "lambeq.backend.grammar.Diagrammable.__init__"]], "__init__() (lambeq.backend.grammar.entity method)": [[33, "lambeq.backend.grammar.Entity.__init__"]], "__init__() (lambeq.backend.grammar.functor method)": [[33, "lambeq.backend.grammar.Functor.__init__"]], "__init__() (lambeq.backend.grammar.layer method)": [[33, "lambeq.backend.grammar.Layer.__init__"]], "__init__() (lambeq.backend.grammar.spider method)": [[33, "lambeq.backend.grammar.Spider.__init__"]], "__init__() (lambeq.backend.grammar.swap method)": [[33, "lambeq.backend.grammar.Swap.__init__"]], "__init__() (lambeq.backend.grammar.ty method)": [[33, "lambeq.backend.grammar.Ty.__init__"]], "__init__() (lambeq.backend.grammar.word method)": [[33, "lambeq.backend.grammar.Word.__init__"]], "__init__() (lambeq.backend.numerical_backend.backend method)": [[33, "lambeq.backend.numerical_backend.Backend.__init__"]], "__init__() (lambeq.backend.numerical_backend.jax method)": [[33, "lambeq.backend.numerical_backend.JAX.__init__"]], "__init__() (lambeq.backend.numerical_backend.numpy method)": [[33, "lambeq.backend.numerical_backend.NumPy.__init__"]], "__init__() (lambeq.backend.numerical_backend.pytorch method)": [[33, "lambeq.backend.numerical_backend.PyTorch.__init__"]], "__init__() (lambeq.backend.numerical_backend.tensorflow method)": [[33, "lambeq.backend.numerical_backend.TensorFlow.__init__"]], "__init__() (lambeq.backend.quantum.anticonjugate method)": [[33, "lambeq.backend.quantum.AntiConjugate.__init__"]], "__init__() (lambeq.backend.quantum.bit method)": [[33, "lambeq.backend.quantum.Bit.__init__"]], "__init__() (lambeq.backend.quantum.box method)": [[33, "lambeq.backend.quantum.Box.__init__"]], "__init__() (lambeq.backend.quantum.bra method)": [[33, "lambeq.backend.quantum.Bra.__init__"]], "__init__() (lambeq.backend.quantum.controlled method)": [[33, "lambeq.backend.quantum.Controlled.__init__"]], "__init__() (lambeq.backend.quantum.daggered method)": [[33, "lambeq.backend.quantum.Daggered.__init__"]], "__init__() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.__init__"]], "__init__() (lambeq.backend.quantum.discard method)": [[33, "lambeq.backend.quantum.Discard.__init__"]], "__init__() (lambeq.backend.quantum.encode method)": [[33, "lambeq.backend.quantum.Encode.__init__"]], "__init__() (lambeq.backend.quantum.ket method)": [[33, "lambeq.backend.quantum.Ket.__init__"]], "__init__() (lambeq.backend.quantum.layer method)": [[33, "lambeq.backend.quantum.Layer.__init__"]], "__init__() (lambeq.backend.quantum.measure method)": [[33, "lambeq.backend.quantum.Measure.__init__"]], "__init__() (lambeq.backend.quantum.mixedstate method)": [[33, "lambeq.backend.quantum.MixedState.__init__"]], "__init__() (lambeq.backend.quantum.parametrized method)": [[33, "lambeq.backend.quantum.Parametrized.__init__"]], "__init__() (lambeq.backend.quantum.rotation method)": [[33, "lambeq.backend.quantum.Rotation.__init__"]], "__init__() (lambeq.backend.quantum.rx method)": [[33, "lambeq.backend.quantum.Rx.__init__"]], "__init__() (lambeq.backend.quantum.ry method)": [[33, "lambeq.backend.quantum.Ry.__init__"]], "__init__() (lambeq.backend.quantum.rz method)": [[33, "lambeq.backend.quantum.Rz.__init__"]], "__init__() (lambeq.backend.quantum.scalar method)": [[33, "lambeq.backend.quantum.Scalar.__init__"]], "__init__() (lambeq.backend.quantum.selfconjugate method)": [[33, "lambeq.backend.quantum.SelfConjugate.__init__"]], "__init__() (lambeq.backend.quantum.sqrt method)": [[33, "lambeq.backend.quantum.Sqrt.__init__"]], "__init__() (lambeq.backend.quantum.swap method)": [[33, "lambeq.backend.quantum.Swap.__init__"]], "__init__() (lambeq.backend.quantum.ty method)": [[33, "lambeq.backend.quantum.Ty.__init__"]], "__init__() (lambeq.backend.tensor.box method)": [[33, "lambeq.backend.tensor.Box.__init__"]], "__init__() (lambeq.backend.tensor.cap method)": [[33, "lambeq.backend.tensor.Cap.__init__"]], "__init__() (lambeq.backend.tensor.cup method)": [[33, "lambeq.backend.tensor.Cup.__init__"]], "__init__() (lambeq.backend.tensor.daggered method)": [[33, "lambeq.backend.tensor.Daggered.__init__"]], "__init__() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.__init__"]], "__init__() (lambeq.backend.tensor.dim method)": [[33, "lambeq.backend.tensor.Dim.__init__"]], "__init__() (lambeq.backend.tensor.layer method)": [[33, "lambeq.backend.tensor.Layer.__init__"]], "__init__() (lambeq.backend.tensor.spider method)": [[33, "lambeq.backend.tensor.Spider.__init__"]], "__init__() (lambeq.backend.tensor.swap method)": [[33, "lambeq.backend.tensor.Swap.__init__"]], "apply_functor() (lambeq.backend.grammar.box method)": [[33, "lambeq.backend.grammar.Box.apply_functor"]], "apply_functor() (lambeq.backend.grammar.cap method)": [[33, "lambeq.backend.grammar.Cap.apply_functor"]], "apply_functor() (lambeq.backend.grammar.cup method)": [[33, "lambeq.backend.grammar.Cup.apply_functor"]], "apply_functor() (lambeq.backend.grammar.daggered method)": [[33, "lambeq.backend.grammar.Daggered.apply_functor"]], "apply_functor() (lambeq.backend.grammar.diagram method)": [[33, "lambeq.backend.grammar.Diagram.apply_functor"]], "apply_functor() (lambeq.backend.grammar.diagrammable method)": [[33, "lambeq.backend.grammar.Diagrammable.apply_functor"]], "apply_functor() (lambeq.backend.grammar.spider method)": [[33, "lambeq.backend.grammar.Spider.apply_functor"]], "apply_functor() (lambeq.backend.grammar.swap method)": [[33, "lambeq.backend.grammar.Swap.apply_functor"]], "apply_functor() (lambeq.backend.grammar.ty method)": [[33, "lambeq.backend.grammar.Ty.apply_functor"]], "apply_functor() (lambeq.backend.grammar.word method)": [[33, "lambeq.backend.grammar.Word.apply_functor"]], "apply_functor() (lambeq.backend.quantum.anticonjugate method)": [[33, "lambeq.backend.quantum.AntiConjugate.apply_functor"]], "apply_functor() (lambeq.backend.quantum.bit method)": [[33, "lambeq.backend.quantum.Bit.apply_functor"]], "apply_functor() (lambeq.backend.quantum.box method)": [[33, "lambeq.backend.quantum.Box.apply_functor"]], "apply_functor() (lambeq.backend.quantum.bra method)": [[33, "lambeq.backend.quantum.Bra.apply_functor"]], "apply_functor() (lambeq.backend.quantum.controlled method)": [[33, "lambeq.backend.quantum.Controlled.apply_functor"]], "apply_functor() (lambeq.backend.quantum.daggered method)": [[33, "lambeq.backend.quantum.Daggered.apply_functor"]], "apply_functor() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.apply_functor"]], "apply_functor() (lambeq.backend.quantum.discard method)": [[33, "lambeq.backend.quantum.Discard.apply_functor"]], "apply_functor() (lambeq.backend.quantum.encode method)": [[33, "lambeq.backend.quantum.Encode.apply_functor"]], "apply_functor() (lambeq.backend.quantum.ket method)": [[33, "lambeq.backend.quantum.Ket.apply_functor"]], "apply_functor() (lambeq.backend.quantum.measure method)": [[33, "lambeq.backend.quantum.Measure.apply_functor"]], "apply_functor() (lambeq.backend.quantum.mixedstate method)": [[33, "lambeq.backend.quantum.MixedState.apply_functor"]], "apply_functor() (lambeq.backend.quantum.parametrized method)": [[33, "lambeq.backend.quantum.Parametrized.apply_functor"]], "apply_functor() (lambeq.backend.quantum.rotation method)": [[33, "lambeq.backend.quantum.Rotation.apply_functor"]], "apply_functor() (lambeq.backend.quantum.rx method)": [[33, "lambeq.backend.quantum.Rx.apply_functor"]], "apply_functor() (lambeq.backend.quantum.ry method)": [[33, "lambeq.backend.quantum.Ry.apply_functor"]], "apply_functor() (lambeq.backend.quantum.rz method)": [[33, "lambeq.backend.quantum.Rz.apply_functor"]], "apply_functor() (lambeq.backend.quantum.scalar method)": [[33, "lambeq.backend.quantum.Scalar.apply_functor"]], "apply_functor() (lambeq.backend.quantum.selfconjugate method)": [[33, "lambeq.backend.quantum.SelfConjugate.apply_functor"]], "apply_functor() (lambeq.backend.quantum.sqrt method)": [[33, "lambeq.backend.quantum.Sqrt.apply_functor"]], "apply_functor() (lambeq.backend.quantum.swap method)": [[33, "lambeq.backend.quantum.Swap.apply_functor"]], "apply_functor() (lambeq.backend.quantum.ty method)": [[33, "lambeq.backend.quantum.Ty.apply_functor"]], "apply_functor() (lambeq.backend.tensor.box method)": [[33, "lambeq.backend.tensor.Box.apply_functor"]], "apply_functor() (lambeq.backend.tensor.cap method)": [[33, "lambeq.backend.tensor.Cap.apply_functor"]], "apply_functor() (lambeq.backend.tensor.cup method)": [[33, "lambeq.backend.tensor.Cup.apply_functor"]], "apply_functor() (lambeq.backend.tensor.daggered method)": [[33, "lambeq.backend.tensor.Daggered.apply_functor"]], "apply_functor() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.apply_functor"]], "apply_functor() (lambeq.backend.tensor.dim method)": [[33, "lambeq.backend.tensor.Dim.apply_functor"]], "apply_functor() (lambeq.backend.tensor.spider method)": [[33, "lambeq.backend.tensor.Spider.apply_functor"]], "apply_functor() (lambeq.backend.tensor.swap method)": [[33, "lambeq.backend.tensor.Swap.apply_functor"]], "apply_gate() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.apply_gate"]], "apply_parametrized_gate() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.apply_parametrized_gate"]], "ar() (lambeq.backend.grammar.functor method)": [[33, "lambeq.backend.grammar.Functor.ar"]], "ar_with_cache() (lambeq.backend.grammar.functor method)": [[33, "lambeq.backend.grammar.Functor.ar_with_cache"]], "array (lambeq.backend.quantum.anticonjugate property)": [[33, "lambeq.backend.quantum.AntiConjugate.array"]], "array (lambeq.backend.quantum.bit property)": [[33, "lambeq.backend.quantum.Bit.array"]], "array (lambeq.backend.quantum.box property)": [[33, "lambeq.backend.quantum.Box.array"]], "array (lambeq.backend.quantum.bra property)": [[33, "lambeq.backend.quantum.Bra.array"]], "array (lambeq.backend.quantum.controlled property)": [[33, "lambeq.backend.quantum.Controlled.array"]], "array (lambeq.backend.quantum.daggered property)": [[33, "lambeq.backend.quantum.Daggered.array"]], "array (lambeq.backend.quantum.discard property)": [[33, "lambeq.backend.quantum.Discard.array"]], "array (lambeq.backend.quantum.encode property)": [[33, "lambeq.backend.quantum.Encode.array"]], "array (lambeq.backend.quantum.ket property)": [[33, "lambeq.backend.quantum.Ket.array"]], "array (lambeq.backend.quantum.measure property)": [[33, "lambeq.backend.quantum.Measure.array"]], "array (lambeq.backend.quantum.mixedstate property)": [[33, "lambeq.backend.quantum.MixedState.array"]], "array (lambeq.backend.quantum.parametrized property)": [[33, "lambeq.backend.quantum.Parametrized.array"]], "array (lambeq.backend.quantum.rotation property)": [[33, "lambeq.backend.quantum.Rotation.array"]], "array (lambeq.backend.quantum.rx property)": [[33, "lambeq.backend.quantum.Rx.array"]], "array (lambeq.backend.quantum.ry property)": [[33, "lambeq.backend.quantum.Ry.array"]], "array (lambeq.backend.quantum.rz property)": [[33, "lambeq.backend.quantum.Rz.array"]], "array (lambeq.backend.quantum.scalar property)": [[33, "lambeq.backend.quantum.Scalar.array"]], "array (lambeq.backend.quantum.selfconjugate property)": [[33, "lambeq.backend.quantum.SelfConjugate.array"]], "array (lambeq.backend.quantum.sqrt property)": [[33, "lambeq.backend.quantum.Sqrt.array"]], "array (lambeq.backend.quantum.swap property)": [[33, "lambeq.backend.quantum.Swap.array"]], "array (lambeq.backend.tensor.box property)": [[33, "lambeq.backend.tensor.Box.array"]], "array (lambeq.backend.tensor.cap property)": [[33, "lambeq.backend.tensor.Cap.array"]], "array (lambeq.backend.tensor.cup property)": [[33, "lambeq.backend.tensor.Cup.array"]], "array (lambeq.backend.tensor.daggered property)": [[33, "lambeq.backend.tensor.Daggered.array"]], "array (lambeq.backend.tensor.spider property)": [[33, "lambeq.backend.tensor.Spider.array"]], "array (lambeq.backend.tensor.swap property)": [[33, "lambeq.backend.tensor.Swap.array"]], "ba() (lambeq.backend.grammar.diagram class method)": [[33, "lambeq.backend.grammar.Diagram.ba"]], "ba() (lambeq.backend.quantum.diagram class method)": [[33, "lambeq.backend.quantum.Diagram.ba"]], "ba() (lambeq.backend.tensor.diagram class method)": [[33, "lambeq.backend.tensor.Diagram.ba"]], "backend() (in module lambeq.backend.numerical_backend)": [[33, "lambeq.backend.numerical_backend.backend"]], "bc() (lambeq.backend.grammar.diagram class method)": [[33, "lambeq.backend.grammar.Diagram.bc"]], "bc() (lambeq.backend.quantum.diagram class method)": [[33, "lambeq.backend.quantum.Diagram.bc"]], "bc() (lambeq.backend.tensor.diagram class method)": [[33, "lambeq.backend.tensor.Diagram.bc"]], "box (lambeq.backend.grammar.daggered attribute)": [[33, "lambeq.backend.grammar.Daggered.box"]], "box (lambeq.backend.grammar.layer attribute)": [[33, "lambeq.backend.grammar.Layer.box"]], "box (lambeq.backend.quantum.daggered attribute)": [[33, "lambeq.backend.quantum.Daggered.box"]], "box (lambeq.backend.quantum.layer attribute)": [[33, "lambeq.backend.quantum.Layer.box"]], "box (lambeq.backend.tensor.daggered attribute)": [[33, "lambeq.backend.tensor.Daggered.box"]], "box (lambeq.backend.tensor.layer attribute)": [[33, "lambeq.backend.tensor.Layer.box"]], "boxes (lambeq.backend.drawing.drawablediagram attribute)": [[33, "lambeq.backend.drawing.DrawableDiagram.boxes"]], "boxes (lambeq.backend.grammar.diagram property)": [[33, "lambeq.backend.grammar.Diagram.boxes"]], "boxes (lambeq.backend.quantum.diagram property)": [[33, "lambeq.backend.quantum.Diagram.boxes"]], "boxes (lambeq.backend.tensor.diagram property)": [[33, "lambeq.backend.tensor.Diagram.boxes"]], "bx() (lambeq.backend.grammar.diagram class method)": [[33, "lambeq.backend.grammar.Diagram.bx"]], "bx() (lambeq.backend.quantum.diagram class method)": [[33, "lambeq.backend.quantum.Diagram.bx"]], "bx() (lambeq.backend.tensor.diagram class method)": [[33, "lambeq.backend.tensor.Diagram.bx"]], "caps() (lambeq.backend.grammar.diagram class method)": [[33, "lambeq.backend.grammar.Diagram.caps"]], "caps() (lambeq.backend.quantum.diagram class method)": [[33, "lambeq.backend.quantum.Diagram.caps"]], "caps() (lambeq.backend.tensor.diagram class method)": [[33, "lambeq.backend.tensor.Diagram.caps"]], "category (lambeq.backend.grammar.box attribute)": [[33, "lambeq.backend.grammar.Box.category"]], "category (lambeq.backend.grammar.cap attribute)": [[33, "lambeq.backend.grammar.Cap.category"]], "category (lambeq.backend.grammar.cup attribute)": [[33, "lambeq.backend.grammar.Cup.category"]], "category (lambeq.backend.grammar.daggered attribute)": [[33, "lambeq.backend.grammar.Daggered.category"]], "category (lambeq.backend.grammar.diagram attribute)": [[33, "lambeq.backend.grammar.Diagram.category"]], "category (lambeq.backend.grammar.entity attribute)": [[33, "lambeq.backend.grammar.Entity.category"]], "category (lambeq.backend.grammar.layer attribute)": [[33, "lambeq.backend.grammar.Layer.category"]], "category (lambeq.backend.grammar.spider attribute)": [[33, "lambeq.backend.grammar.Spider.category"]], "category (lambeq.backend.grammar.swap attribute)": [[33, "lambeq.backend.grammar.Swap.category"]], "category (lambeq.backend.grammar.ty attribute)": [[33, "lambeq.backend.grammar.Ty.category"]], "category (lambeq.backend.grammar.word attribute)": [[33, "lambeq.backend.grammar.Word.category"]], "category (lambeq.backend.quantum.anticonjugate attribute)": [[33, "lambeq.backend.quantum.AntiConjugate.category"]], "category (lambeq.backend.quantum.bit attribute)": [[33, "lambeq.backend.quantum.Bit.category"]], "category (lambeq.backend.quantum.box attribute)": [[33, "lambeq.backend.quantum.Box.category"]], "category (lambeq.backend.quantum.bra attribute)": [[33, "lambeq.backend.quantum.Bra.category"]], "category (lambeq.backend.quantum.controlled attribute)": [[33, "lambeq.backend.quantum.Controlled.category"]], "category (lambeq.backend.quantum.daggered attribute)": [[33, "lambeq.backend.quantum.Daggered.category"]], "category (lambeq.backend.quantum.diagram attribute)": [[33, "lambeq.backend.quantum.Diagram.category"]], "category (lambeq.backend.quantum.discard attribute)": [[33, "lambeq.backend.quantum.Discard.category"]], "category (lambeq.backend.quantum.encode attribute)": [[33, "lambeq.backend.quantum.Encode.category"]], "category (lambeq.backend.quantum.ket attribute)": [[33, "lambeq.backend.quantum.Ket.category"]], "category (lambeq.backend.quantum.layer attribute)": [[33, "lambeq.backend.quantum.Layer.category"]], "category (lambeq.backend.quantum.measure attribute)": [[33, "lambeq.backend.quantum.Measure.category"]], "category (lambeq.backend.quantum.mixedstate attribute)": [[33, "lambeq.backend.quantum.MixedState.category"]], "category (lambeq.backend.quantum.parametrized attribute)": [[33, "lambeq.backend.quantum.Parametrized.category"]], "category (lambeq.backend.quantum.rotation attribute)": [[33, "lambeq.backend.quantum.Rotation.category"]], "category (lambeq.backend.quantum.rx attribute)": [[33, "lambeq.backend.quantum.Rx.category"]], "category (lambeq.backend.quantum.ry attribute)": [[33, "lambeq.backend.quantum.Ry.category"]], "category (lambeq.backend.quantum.rz attribute)": [[33, "lambeq.backend.quantum.Rz.category"]], "category (lambeq.backend.quantum.scalar attribute)": [[33, "lambeq.backend.quantum.Scalar.category"]], "category (lambeq.backend.quantum.selfconjugate attribute)": [[33, "lambeq.backend.quantum.SelfConjugate.category"]], "category (lambeq.backend.quantum.sqrt attribute)": [[33, "lambeq.backend.quantum.Sqrt.category"]], "category (lambeq.backend.quantum.swap attribute)": [[33, "lambeq.backend.quantum.Swap.category"]], "category (lambeq.backend.quantum.ty attribute)": [[33, "lambeq.backend.quantum.Ty.category"]], "category (lambeq.backend.tensor.box attribute)": [[33, "lambeq.backend.tensor.Box.category"]], "category (lambeq.backend.tensor.cap attribute)": [[33, "lambeq.backend.tensor.Cap.category"]], "category (lambeq.backend.tensor.cup attribute)": [[33, "lambeq.backend.tensor.Cup.category"]], "category (lambeq.backend.tensor.daggered attribute)": [[33, "lambeq.backend.tensor.Daggered.category"]], "category (lambeq.backend.tensor.diagram attribute)": [[33, "lambeq.backend.tensor.Diagram.category"]], "category (lambeq.backend.tensor.dim attribute)": [[33, "lambeq.backend.tensor.Dim.category"]], "category (lambeq.backend.tensor.layer attribute)": [[33, "lambeq.backend.tensor.Layer.category"]], "category (lambeq.backend.tensor.spider attribute)": [[33, "lambeq.backend.tensor.Spider.category"]], "category (lambeq.backend.tensor.swap attribute)": [[33, "lambeq.backend.tensor.Swap.category"]], "cod (lambeq.backend.grammar.box attribute)": [[33, "lambeq.backend.grammar.Box.cod"]], "cod (lambeq.backend.grammar.cap attribute)": [[33, "lambeq.backend.grammar.Cap.cod"]], "cod (lambeq.backend.grammar.cup attribute)": [[33, "lambeq.backend.grammar.Cup.cod"]], "cod (lambeq.backend.grammar.daggered attribute)": [[33, "lambeq.backend.grammar.Daggered.cod"]], "cod (lambeq.backend.grammar.diagram attribute)": [[33, "lambeq.backend.grammar.Diagram.cod"]], "cod (lambeq.backend.grammar.diagrammable property)": [[33, "lambeq.backend.grammar.Diagrammable.cod"]], "cod (lambeq.backend.grammar.layer property)": [[33, "lambeq.backend.grammar.Layer.cod"]], "cod (lambeq.backend.grammar.spider attribute)": [[33, "lambeq.backend.grammar.Spider.cod"]], "cod (lambeq.backend.grammar.swap attribute)": [[33, "lambeq.backend.grammar.Swap.cod"]], "cod (lambeq.backend.grammar.word attribute)": [[33, "lambeq.backend.grammar.Word.cod"]], "cod (lambeq.backend.quantum.anticonjugate attribute)": [[33, "lambeq.backend.quantum.AntiConjugate.cod"]], "cod (lambeq.backend.quantum.bit attribute)": [[33, "lambeq.backend.quantum.Bit.cod"]], "cod (lambeq.backend.quantum.box attribute)": [[33, "lambeq.backend.quantum.Box.cod"]], "cod (lambeq.backend.quantum.bra attribute)": [[33, "lambeq.backend.quantum.Bra.cod"]], "cod (lambeq.backend.quantum.controlled attribute)": [[33, "lambeq.backend.quantum.Controlled.cod"]], "cod (lambeq.backend.quantum.daggered attribute)": [[33, "lambeq.backend.quantum.Daggered.cod"]], "cod (lambeq.backend.quantum.diagram attribute)": [[33, "lambeq.backend.quantum.Diagram.cod"]], "cod (lambeq.backend.quantum.discard attribute)": [[33, "lambeq.backend.quantum.Discard.cod"]], "cod (lambeq.backend.quantum.encode attribute)": [[33, "lambeq.backend.quantum.Encode.cod"]], "cod (lambeq.backend.quantum.ket attribute)": [[33, "lambeq.backend.quantum.Ket.cod"]], "cod (lambeq.backend.quantum.layer property)": [[33, "lambeq.backend.quantum.Layer.cod"]], "cod (lambeq.backend.quantum.measure attribute)": [[33, "lambeq.backend.quantum.Measure.cod"]], "cod (lambeq.backend.quantum.mixedstate attribute)": [[33, "lambeq.backend.quantum.MixedState.cod"]], "cod (lambeq.backend.quantum.parametrized attribute)": [[33, "lambeq.backend.quantum.Parametrized.cod"]], "cod (lambeq.backend.quantum.rotation attribute)": [[33, "lambeq.backend.quantum.Rotation.cod"]], "cod (lambeq.backend.quantum.rx attribute)": [[33, "lambeq.backend.quantum.Rx.cod"]], "cod (lambeq.backend.quantum.ry attribute)": [[33, "lambeq.backend.quantum.Ry.cod"]], "cod (lambeq.backend.quantum.rz attribute)": [[33, "lambeq.backend.quantum.Rz.cod"]], "cod (lambeq.backend.quantum.scalar attribute)": [[33, "lambeq.backend.quantum.Scalar.cod"]], "cod (lambeq.backend.quantum.selfconjugate attribute)": [[33, "lambeq.backend.quantum.SelfConjugate.cod"]], "cod (lambeq.backend.quantum.sqrt attribute)": [[33, "lambeq.backend.quantum.Sqrt.cod"]], "cod (lambeq.backend.quantum.swap attribute)": [[33, "lambeq.backend.quantum.Swap.cod"]], "cod (lambeq.backend.tensor.box attribute)": [[33, "lambeq.backend.tensor.Box.cod"]], "cod (lambeq.backend.tensor.cap attribute)": [[33, "lambeq.backend.tensor.Cap.cod"]], "cod (lambeq.backend.tensor.cup attribute)": [[33, "lambeq.backend.tensor.Cup.cod"]], "cod (lambeq.backend.tensor.daggered attribute)": [[33, "lambeq.backend.tensor.Daggered.cod"]], "cod (lambeq.backend.tensor.diagram attribute)": [[33, "lambeq.backend.tensor.Diagram.cod"]], "cod (lambeq.backend.tensor.layer property)": [[33, "lambeq.backend.tensor.Layer.cod"]], "cod (lambeq.backend.tensor.spider attribute)": [[33, "lambeq.backend.tensor.Spider.cod"]], "cod (lambeq.backend.tensor.swap attribute)": [[33, "lambeq.backend.tensor.Swap.cod"]], "count() (lambeq.backend.grammar.ty method)": [[33, "lambeq.backend.grammar.Ty.count"]], "count() (lambeq.backend.quantum.ty method)": [[33, "lambeq.backend.quantum.Ty.count"]], "count() (lambeq.backend.tensor.dim method)": [[33, "lambeq.backend.tensor.Dim.count"]], "create_pregroup_diagram() (lambeq.backend.grammar.diagram class method)": [[33, "lambeq.backend.grammar.Diagram.create_pregroup_diagram"]], "create_pregroup_diagram() (lambeq.backend.quantum.diagram class method)": [[33, "lambeq.backend.quantum.Diagram.create_pregroup_diagram"]], "create_pregroup_diagram() (lambeq.backend.tensor.diagram class method)": [[33, "lambeq.backend.tensor.Diagram.create_pregroup_diagram"]], "cups() (lambeq.backend.grammar.diagram class method)": [[33, "lambeq.backend.grammar.Diagram.cups"]], "cups() (lambeq.backend.quantum.diagram class method)": [[33, "lambeq.backend.quantum.Diagram.cups"]], "cups() (lambeq.backend.tensor.diagram class method)": [[33, "lambeq.backend.tensor.Diagram.cups"]], "curry() (lambeq.backend.grammar.diagram method)": [[33, "lambeq.backend.grammar.Diagram.curry"]], "curry() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.curry"]], "curry() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.curry"]], "dagger() (lambeq.backend.grammar.box method)": [[33, "lambeq.backend.grammar.Box.dagger"]], "dagger() (lambeq.backend.grammar.cap method)": [[33, "lambeq.backend.grammar.Cap.dagger"]], "dagger() (lambeq.backend.grammar.cup method)": [[33, "lambeq.backend.grammar.Cup.dagger"]], "dagger() (lambeq.backend.grammar.daggered method)": [[33, "lambeq.backend.grammar.Daggered.dagger"]], "dagger() (lambeq.backend.grammar.diagram method)": [[33, "lambeq.backend.grammar.Diagram.dagger"]], "dagger() (lambeq.backend.grammar.layer method)": [[33, "lambeq.backend.grammar.Layer.dagger"]], "dagger() (lambeq.backend.grammar.spider method)": [[33, "lambeq.backend.grammar.Spider.dagger"]], "dagger() (lambeq.backend.grammar.swap method)": [[33, "lambeq.backend.grammar.Swap.dagger"]], "dagger() (lambeq.backend.grammar.word method)": [[33, "lambeq.backend.grammar.Word.dagger"]], "dagger() (lambeq.backend.quantum.anticonjugate method)": [[33, "lambeq.backend.quantum.AntiConjugate.dagger"]], "dagger() (lambeq.backend.quantum.bit method)": [[33, "lambeq.backend.quantum.Bit.dagger"]], "dagger() (lambeq.backend.quantum.box method)": [[33, "lambeq.backend.quantum.Box.dagger"]], "dagger() (lambeq.backend.quantum.bra method)": [[33, "lambeq.backend.quantum.Bra.dagger"]], "dagger() (lambeq.backend.quantum.controlled method)": [[33, "lambeq.backend.quantum.Controlled.dagger"]], "dagger() (lambeq.backend.quantum.daggered method)": [[33, "lambeq.backend.quantum.Daggered.dagger"]], "dagger() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.dagger"]], "dagger() (lambeq.backend.quantum.discard method)": [[33, "lambeq.backend.quantum.Discard.dagger"]], "dagger() (lambeq.backend.quantum.encode method)": [[33, "lambeq.backend.quantum.Encode.dagger"]], "dagger() (lambeq.backend.quantum.ket method)": [[33, "lambeq.backend.quantum.Ket.dagger"]], "dagger() (lambeq.backend.quantum.layer method)": [[33, "lambeq.backend.quantum.Layer.dagger"]], "dagger() (lambeq.backend.quantum.measure method)": [[33, "lambeq.backend.quantum.Measure.dagger"]], "dagger() (lambeq.backend.quantum.mixedstate method)": [[33, "lambeq.backend.quantum.MixedState.dagger"]], "dagger() (lambeq.backend.quantum.parametrized method)": [[33, "lambeq.backend.quantum.Parametrized.dagger"]], "dagger() (lambeq.backend.quantum.rotation method)": [[33, "lambeq.backend.quantum.Rotation.dagger"]], "dagger() (lambeq.backend.quantum.rx method)": [[33, "lambeq.backend.quantum.Rx.dagger"]], "dagger() (lambeq.backend.quantum.ry method)": [[33, "lambeq.backend.quantum.Ry.dagger"]], "dagger() (lambeq.backend.quantum.rz method)": [[33, "lambeq.backend.quantum.Rz.dagger"]], "dagger() (lambeq.backend.quantum.scalar method)": [[33, "lambeq.backend.quantum.Scalar.dagger"]], "dagger() (lambeq.backend.quantum.selfconjugate method)": [[33, "lambeq.backend.quantum.SelfConjugate.dagger"]], "dagger() (lambeq.backend.quantum.sqrt method)": [[33, "lambeq.backend.quantum.Sqrt.dagger"]], "dagger() (lambeq.backend.quantum.swap method)": [[33, "lambeq.backend.quantum.Swap.dagger"]], "dagger() (lambeq.backend.tensor.box method)": [[33, "lambeq.backend.tensor.Box.dagger"]], "dagger() (lambeq.backend.tensor.cap method)": [[33, "lambeq.backend.tensor.Cap.dagger"]], "dagger() (lambeq.backend.tensor.cup method)": [[33, "lambeq.backend.tensor.Cup.dagger"]], "dagger() (lambeq.backend.tensor.daggered method)": [[33, "lambeq.backend.tensor.Daggered.dagger"]], "dagger() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.dagger"]], "dagger() (lambeq.backend.tensor.layer method)": [[33, "lambeq.backend.tensor.Layer.dagger"]], "dagger() (lambeq.backend.tensor.spider method)": [[33, "lambeq.backend.tensor.Spider.dagger"]], "dagger() (lambeq.backend.tensor.swap method)": [[33, "lambeq.backend.tensor.Swap.dagger"]], "data (lambeq.backend.quantum.anticonjugate attribute)": [[33, "lambeq.backend.quantum.AntiConjugate.data"]], "data (lambeq.backend.quantum.bit attribute)": [[33, "lambeq.backend.quantum.Bit.data"]], "data (lambeq.backend.quantum.box attribute)": [[33, "lambeq.backend.quantum.Box.data"]], "data (lambeq.backend.quantum.bra attribute)": [[33, "lambeq.backend.quantum.Bra.data"]], "data (lambeq.backend.quantum.controlled attribute)": [[33, "lambeq.backend.quantum.Controlled.data"]], "data (lambeq.backend.quantum.daggered attribute)": [[33, "lambeq.backend.quantum.Daggered.data"]], "data (lambeq.backend.quantum.discard attribute)": [[33, "lambeq.backend.quantum.Discard.data"]], "data (lambeq.backend.quantum.encode attribute)": [[33, "lambeq.backend.quantum.Encode.data"]], "data (lambeq.backend.quantum.ket attribute)": [[33, "lambeq.backend.quantum.Ket.data"]], "data (lambeq.backend.quantum.measure attribute)": [[33, "lambeq.backend.quantum.Measure.data"]], "data (lambeq.backend.quantum.mixedstate attribute)": [[33, "lambeq.backend.quantum.MixedState.data"]], "data (lambeq.backend.quantum.parametrized attribute)": [[33, "lambeq.backend.quantum.Parametrized.data"]], "data (lambeq.backend.quantum.rotation attribute)": [[33, "lambeq.backend.quantum.Rotation.data"]], "data (lambeq.backend.quantum.rx attribute)": [[33, "lambeq.backend.quantum.Rx.data"]], "data (lambeq.backend.quantum.ry attribute)": [[33, "lambeq.backend.quantum.Ry.data"]], "data (lambeq.backend.quantum.rz attribute)": [[33, "lambeq.backend.quantum.Rz.data"]], "data (lambeq.backend.quantum.scalar attribute)": [[33, "lambeq.backend.quantum.Scalar.data"]], "data (lambeq.backend.quantum.selfconjugate attribute)": [[33, "lambeq.backend.quantum.SelfConjugate.data"]], "data (lambeq.backend.quantum.sqrt attribute)": [[33, "lambeq.backend.quantum.Sqrt.data"]], "data (lambeq.backend.quantum.swap attribute)": [[33, "lambeq.backend.quantum.Swap.data"]], "data (lambeq.backend.tensor.box attribute)": [[33, "lambeq.backend.tensor.Box.data"]], "data (lambeq.backend.tensor.cap attribute)": [[33, "lambeq.backend.tensor.Cap.data"]], "data (lambeq.backend.tensor.cup attribute)": [[33, "lambeq.backend.tensor.Cup.data"]], "data (lambeq.backend.tensor.daggered attribute)": [[33, "lambeq.backend.tensor.Daggered.data"]], "data (lambeq.backend.tensor.spider attribute)": [[33, "lambeq.backend.tensor.Spider.data"]], "data (lambeq.backend.tensor.swap attribute)": [[33, "lambeq.backend.tensor.Swap.data"]], "decompose() (lambeq.backend.quantum.controlled method)": [[33, "lambeq.backend.quantum.Controlled.decompose"]], "dim (lambeq.backend.quantum.ty property)": [[33, "lambeq.backend.quantum.Ty.dim"]], "dim (lambeq.backend.tensor.dim property)": [[33, "lambeq.backend.tensor.Dim.dim"]], "dom (lambeq.backend.grammar.box attribute)": [[33, "lambeq.backend.grammar.Box.dom"]], "dom (lambeq.backend.grammar.cap attribute)": [[33, "lambeq.backend.grammar.Cap.dom"]], "dom (lambeq.backend.grammar.cup attribute)": [[33, "lambeq.backend.grammar.Cup.dom"]], "dom (lambeq.backend.grammar.daggered attribute)": [[33, "lambeq.backend.grammar.Daggered.dom"]], "dom (lambeq.backend.grammar.diagram attribute)": [[33, "lambeq.backend.grammar.Diagram.dom"]], "dom (lambeq.backend.grammar.diagrammable property)": [[33, "lambeq.backend.grammar.Diagrammable.dom"]], "dom (lambeq.backend.grammar.layer property)": [[33, "lambeq.backend.grammar.Layer.dom"]], "dom (lambeq.backend.grammar.spider attribute)": [[33, "lambeq.backend.grammar.Spider.dom"]], "dom (lambeq.backend.grammar.swap attribute)": [[33, "lambeq.backend.grammar.Swap.dom"]], "dom (lambeq.backend.grammar.word attribute)": [[33, "lambeq.backend.grammar.Word.dom"]], "dom (lambeq.backend.quantum.anticonjugate attribute)": [[33, "lambeq.backend.quantum.AntiConjugate.dom"]], "dom (lambeq.backend.quantum.bit attribute)": [[33, "lambeq.backend.quantum.Bit.dom"]], "dom (lambeq.backend.quantum.box attribute)": [[33, "lambeq.backend.quantum.Box.dom"]], "dom (lambeq.backend.quantum.bra attribute)": [[33, "lambeq.backend.quantum.Bra.dom"]], "dom (lambeq.backend.quantum.controlled attribute)": [[33, "lambeq.backend.quantum.Controlled.dom"]], "dom (lambeq.backend.quantum.daggered attribute)": [[33, "lambeq.backend.quantum.Daggered.dom"]], "dom (lambeq.backend.quantum.diagram attribute)": [[33, "lambeq.backend.quantum.Diagram.dom"]], "dom (lambeq.backend.quantum.discard attribute)": [[33, "lambeq.backend.quantum.Discard.dom"]], "dom (lambeq.backend.quantum.encode attribute)": [[33, "lambeq.backend.quantum.Encode.dom"]], "dom (lambeq.backend.quantum.ket attribute)": [[33, "lambeq.backend.quantum.Ket.dom"]], "dom (lambeq.backend.quantum.layer property)": [[33, "lambeq.backend.quantum.Layer.dom"]], "dom (lambeq.backend.quantum.measure attribute)": [[33, "lambeq.backend.quantum.Measure.dom"]], "dom (lambeq.backend.quantum.mixedstate attribute)": [[33, "lambeq.backend.quantum.MixedState.dom"]], "dom (lambeq.backend.quantum.parametrized attribute)": [[33, "lambeq.backend.quantum.Parametrized.dom"]], "dom (lambeq.backend.quantum.rotation attribute)": [[33, "lambeq.backend.quantum.Rotation.dom"]], "dom (lambeq.backend.quantum.rx attribute)": [[33, "lambeq.backend.quantum.Rx.dom"]], "dom (lambeq.backend.quantum.ry attribute)": [[33, "lambeq.backend.quantum.Ry.dom"]], "dom (lambeq.backend.quantum.rz attribute)": [[33, "lambeq.backend.quantum.Rz.dom"]], "dom (lambeq.backend.quantum.scalar attribute)": [[33, "lambeq.backend.quantum.Scalar.dom"]], "dom (lambeq.backend.quantum.selfconjugate attribute)": [[33, "lambeq.backend.quantum.SelfConjugate.dom"]], "dom (lambeq.backend.quantum.sqrt attribute)": [[33, "lambeq.backend.quantum.Sqrt.dom"]], "dom (lambeq.backend.quantum.swap attribute)": [[33, "lambeq.backend.quantum.Swap.dom"]], "dom (lambeq.backend.tensor.box attribute)": [[33, "lambeq.backend.tensor.Box.dom"]], "dom (lambeq.backend.tensor.cap attribute)": [[33, "lambeq.backend.tensor.Cap.dom"]], "dom (lambeq.backend.tensor.cup attribute)": [[33, "lambeq.backend.tensor.Cup.dom"]], "dom (lambeq.backend.tensor.daggered attribute)": [[33, "lambeq.backend.tensor.Daggered.dom"]], "dom (lambeq.backend.tensor.diagram attribute)": [[33, "lambeq.backend.tensor.Diagram.dom"]], "dom (lambeq.backend.tensor.layer property)": [[33, "lambeq.backend.tensor.Layer.dom"]], "dom (lambeq.backend.tensor.spider attribute)": [[33, "lambeq.backend.tensor.Spider.dom"]], "dom (lambeq.backend.tensor.swap attribute)": [[33, "lambeq.backend.tensor.Swap.dom"]], "draw() (in module lambeq.backend.drawing)": [[33, "lambeq.backend.drawing.draw"]], "draw() (lambeq.backend.grammar.diagram method)": [[33, "lambeq.backend.grammar.Diagram.draw"]], "draw() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.draw"]], "draw() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.draw"]], "draw_equation() (in module lambeq.backend.drawing)": [[33, "lambeq.backend.drawing.draw_equation"]], "draw_pregroup() (in module lambeq.backend.drawing)": [[33, "lambeq.backend.drawing.draw_pregroup"]], "eval() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.eval"]], "eval() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.eval"]], "extend() (lambeq.backend.grammar.layer method)": [[33, "lambeq.backend.grammar.Layer.extend"]], "extend() (lambeq.backend.quantum.layer method)": [[33, "lambeq.backend.quantum.Layer.extend"]], "extend() (lambeq.backend.tensor.layer method)": [[33, "lambeq.backend.tensor.Layer.extend"]], "fa() (lambeq.backend.grammar.diagram class method)": [[33, "lambeq.backend.grammar.Diagram.fa"]], "fa() (lambeq.backend.quantum.diagram class method)": [[33, "lambeq.backend.quantum.Diagram.fa"]], "fa() (lambeq.backend.tensor.diagram class method)": [[33, "lambeq.backend.tensor.Diagram.fa"]], "fc() (lambeq.backend.grammar.diagram class method)": [[33, "lambeq.backend.grammar.Diagram.fc"]], "fc() (lambeq.backend.quantum.diagram class method)": [[33, "lambeq.backend.quantum.Diagram.fc"]], "fc() (lambeq.backend.tensor.diagram class method)": [[33, "lambeq.backend.tensor.Diagram.fc"]], "free_symbols (lambeq.backend.quantum.anticonjugate property)": [[33, "lambeq.backend.quantum.AntiConjugate.free_symbols"]], "free_symbols (lambeq.backend.quantum.bit property)": [[33, "lambeq.backend.quantum.Bit.free_symbols"]], "free_symbols (lambeq.backend.quantum.box property)": [[33, "lambeq.backend.quantum.Box.free_symbols"]], "free_symbols (lambeq.backend.quantum.bra property)": [[33, "lambeq.backend.quantum.Bra.free_symbols"]], "free_symbols (lambeq.backend.quantum.controlled property)": [[33, "lambeq.backend.quantum.Controlled.free_symbols"]], "free_symbols (lambeq.backend.quantum.daggered property)": [[33, "lambeq.backend.quantum.Daggered.free_symbols"]], "free_symbols (lambeq.backend.quantum.diagram property)": [[33, "lambeq.backend.quantum.Diagram.free_symbols"]], "free_symbols (lambeq.backend.quantum.discard property)": [[33, "lambeq.backend.quantum.Discard.free_symbols"]], "free_symbols (lambeq.backend.quantum.encode property)": [[33, "lambeq.backend.quantum.Encode.free_symbols"]], "free_symbols (lambeq.backend.quantum.ket property)": [[33, "lambeq.backend.quantum.Ket.free_symbols"]], "free_symbols (lambeq.backend.quantum.measure property)": [[33, "lambeq.backend.quantum.Measure.free_symbols"]], "free_symbols (lambeq.backend.quantum.mixedstate property)": [[33, "lambeq.backend.quantum.MixedState.free_symbols"]], "free_symbols (lambeq.backend.quantum.parametrized property)": [[33, "lambeq.backend.quantum.Parametrized.free_symbols"]], "free_symbols (lambeq.backend.quantum.rotation property)": [[33, "lambeq.backend.quantum.Rotation.free_symbols"]], "free_symbols (lambeq.backend.quantum.rx property)": [[33, "lambeq.backend.quantum.Rx.free_symbols"]], "free_symbols (lambeq.backend.quantum.ry property)": [[33, "lambeq.backend.quantum.Ry.free_symbols"]], "free_symbols (lambeq.backend.quantum.rz property)": [[33, "lambeq.backend.quantum.Rz.free_symbols"]], "free_symbols (lambeq.backend.quantum.scalar property)": [[33, "lambeq.backend.quantum.Scalar.free_symbols"]], "free_symbols (lambeq.backend.quantum.selfconjugate property)": [[33, "lambeq.backend.quantum.SelfConjugate.free_symbols"]], "free_symbols (lambeq.backend.quantum.sqrt property)": [[33, "lambeq.backend.quantum.Sqrt.free_symbols"]], "free_symbols (lambeq.backend.quantum.swap property)": [[33, "lambeq.backend.quantum.Swap.free_symbols"]], "free_symbols (lambeq.backend.tensor.box property)": [[33, "lambeq.backend.tensor.Box.free_symbols"]], "free_symbols (lambeq.backend.tensor.cap property)": [[33, "lambeq.backend.tensor.Cap.free_symbols"]], "free_symbols (lambeq.backend.tensor.cup property)": [[33, "lambeq.backend.tensor.Cup.free_symbols"]], "free_symbols (lambeq.backend.tensor.daggered property)": [[33, "lambeq.backend.tensor.Daggered.free_symbols"]], "free_symbols (lambeq.backend.tensor.diagram property)": [[33, "lambeq.backend.tensor.Diagram.free_symbols"]], "free_symbols (lambeq.backend.tensor.spider property)": [[33, "lambeq.backend.tensor.Spider.free_symbols"]], "free_symbols (lambeq.backend.tensor.swap property)": [[33, "lambeq.backend.tensor.Swap.free_symbols"]], "from_diagram() (lambeq.backend.drawing.drawablediagram class method)": [[33, "lambeq.backend.drawing.DrawableDiagram.from_diagram"]], "from_discopy() (lambeq.backend.grammar.diagram class method)": [[33, "lambeq.backend.grammar.Diagram.from_discopy"]], "from_discopy() (lambeq.backend.quantum.diagram class method)": [[33, "lambeq.backend.quantum.Diagram.from_discopy"]], "from_discopy() (lambeq.backend.tensor.diagram class method)": [[33, "lambeq.backend.tensor.Diagram.from_discopy"]], "from_json() (lambeq.backend.grammar.box class method)": [[33, "lambeq.backend.grammar.Box.from_json"]], "from_json() (lambeq.backend.grammar.cap class method)": [[33, "lambeq.backend.grammar.Cap.from_json"]], "from_json() (lambeq.backend.grammar.category method)": [[33, "lambeq.backend.grammar.Category.from_json"]], "from_json() (lambeq.backend.grammar.cup class method)": [[33, "lambeq.backend.grammar.Cup.from_json"]], "from_json() (lambeq.backend.grammar.daggered class method)": [[33, "lambeq.backend.grammar.Daggered.from_json"]], "from_json() (lambeq.backend.grammar.diagram class method)": [[33, "lambeq.backend.grammar.Diagram.from_json"]], "from_json() (lambeq.backend.grammar.layer class method)": [[33, "lambeq.backend.grammar.Layer.from_json"]], "from_json() (lambeq.backend.grammar.spider class method)": [[33, "lambeq.backend.grammar.Spider.from_json"]], "from_json() (lambeq.backend.grammar.swap class method)": [[33, "lambeq.backend.grammar.Swap.from_json"]], "from_json() (lambeq.backend.grammar.ty class method)": [[33, "lambeq.backend.grammar.Ty.from_json"]], "from_json() (lambeq.backend.grammar.word class method)": [[33, "lambeq.backend.grammar.Word.from_json"]], "from_json() (lambeq.backend.quantum.anticonjugate class method)": [[33, "lambeq.backend.quantum.AntiConjugate.from_json"]], "from_json() (lambeq.backend.quantum.bit class method)": [[33, "lambeq.backend.quantum.Bit.from_json"]], "from_json() (lambeq.backend.quantum.box class method)": [[33, "lambeq.backend.quantum.Box.from_json"]], "from_json() (lambeq.backend.quantum.bra class method)": [[33, "lambeq.backend.quantum.Bra.from_json"]], "from_json() (lambeq.backend.quantum.controlled class method)": [[33, "lambeq.backend.quantum.Controlled.from_json"]], "from_json() (lambeq.backend.quantum.daggered class method)": [[33, "lambeq.backend.quantum.Daggered.from_json"]], "from_json() (lambeq.backend.quantum.diagram class method)": [[33, "lambeq.backend.quantum.Diagram.from_json"]], "from_json() (lambeq.backend.quantum.discard class method)": [[33, "lambeq.backend.quantum.Discard.from_json"]], "from_json() (lambeq.backend.quantum.encode class method)": [[33, "lambeq.backend.quantum.Encode.from_json"]], "from_json() (lambeq.backend.quantum.ket class method)": [[33, "lambeq.backend.quantum.Ket.from_json"]], "from_json() (lambeq.backend.quantum.layer class method)": [[33, "lambeq.backend.quantum.Layer.from_json"]], "from_json() (lambeq.backend.quantum.measure class method)": [[33, "lambeq.backend.quantum.Measure.from_json"]], "from_json() (lambeq.backend.quantum.mixedstate class method)": [[33, "lambeq.backend.quantum.MixedState.from_json"]], "from_json() (lambeq.backend.quantum.parametrized class method)": [[33, "lambeq.backend.quantum.Parametrized.from_json"]], "from_json() (lambeq.backend.quantum.rotation class method)": [[33, "lambeq.backend.quantum.Rotation.from_json"]], "from_json() (lambeq.backend.quantum.rx class method)": [[33, "lambeq.backend.quantum.Rx.from_json"]], "from_json() (lambeq.backend.quantum.ry class method)": [[33, "lambeq.backend.quantum.Ry.from_json"]], "from_json() (lambeq.backend.quantum.rz class method)": [[33, "lambeq.backend.quantum.Rz.from_json"]], "from_json() (lambeq.backend.quantum.scalar class method)": [[33, "lambeq.backend.quantum.Scalar.from_json"]], "from_json() (lambeq.backend.quantum.selfconjugate class method)": [[33, "lambeq.backend.quantum.SelfConjugate.from_json"]], "from_json() (lambeq.backend.quantum.sqrt class method)": [[33, "lambeq.backend.quantum.Sqrt.from_json"]], "from_json() (lambeq.backend.quantum.swap class method)": [[33, "lambeq.backend.quantum.Swap.from_json"]], "from_json() (lambeq.backend.quantum.ty class method)": [[33, "lambeq.backend.quantum.Ty.from_json"]], "from_json() (lambeq.backend.tensor.box class method)": [[33, "lambeq.backend.tensor.Box.from_json"]], "from_json() (lambeq.backend.tensor.cap class method)": [[33, "lambeq.backend.tensor.Cap.from_json"]], "from_json() (lambeq.backend.tensor.cup class method)": [[33, "lambeq.backend.tensor.Cup.from_json"]], "from_json() (lambeq.backend.tensor.daggered class method)": [[33, "lambeq.backend.tensor.Daggered.from_json"]], "from_json() (lambeq.backend.tensor.diagram class method)": [[33, "lambeq.backend.tensor.Diagram.from_json"]], "from_json() (lambeq.backend.tensor.dim class method)": [[33, "lambeq.backend.tensor.Dim.from_json"]], "from_json() (lambeq.backend.tensor.layer class method)": [[33, "lambeq.backend.tensor.Layer.from_json"]], "from_json() (lambeq.backend.tensor.spider class method)": [[33, "lambeq.backend.tensor.Spider.from_json"]], "from_json() (lambeq.backend.tensor.swap class method)": [[33, "lambeq.backend.tensor.Swap.from_json"]], "fx() (lambeq.backend.grammar.diagram class method)": [[33, "lambeq.backend.grammar.Diagram.fx"]], "fx() (lambeq.backend.quantum.diagram class method)": [[33, "lambeq.backend.quantum.Diagram.fx"]], "fx() (lambeq.backend.tensor.diagram class method)": [[33, "lambeq.backend.tensor.Diagram.fx"]], "generate_cap() (in module lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.generate_cap"]], "generate_cup() (in module lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.generate_cup"]], "generate_spider() (in module lambeq.backend.quantum)": [[33, "lambeq.backend.quantum.generate_spider"]], "get_backend() (in module lambeq.backend.numerical_backend)": [[33, "lambeq.backend.numerical_backend.get_backend"]], "id() (lambeq.backend.grammar.diagram class method)": [[33, "lambeq.backend.grammar.Diagram.id"]], "id() (lambeq.backend.quantum.diagram class method)": [[33, "lambeq.backend.quantum.Diagram.id"]], "id() (lambeq.backend.tensor.diagram class method)": [[33, "lambeq.backend.tensor.Diagram.id"]], "init_and_discard() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.init_and_discard"]], "is_atomic (lambeq.backend.grammar.ty property)": [[33, "lambeq.backend.grammar.Ty.is_atomic"]], "is_atomic (lambeq.backend.quantum.ty property)": [[33, "lambeq.backend.quantum.Ty.is_atomic"]], "is_atomic (lambeq.backend.tensor.dim property)": [[33, "lambeq.backend.tensor.Dim.is_atomic"]], "is_classical (lambeq.backend.quantum.anticonjugate property)": [[33, "lambeq.backend.quantum.AntiConjugate.is_classical"]], "is_classical (lambeq.backend.quantum.bit property)": [[33, "lambeq.backend.quantum.Bit.is_classical"]], "is_classical (lambeq.backend.quantum.box property)": [[33, "lambeq.backend.quantum.Box.is_classical"]], "is_classical (lambeq.backend.quantum.bra property)": [[33, "lambeq.backend.quantum.Bra.is_classical"]], "is_classical (lambeq.backend.quantum.controlled property)": [[33, "lambeq.backend.quantum.Controlled.is_classical"]], "is_classical (lambeq.backend.quantum.daggered property)": [[33, "lambeq.backend.quantum.Daggered.is_classical"]], "is_classical (lambeq.backend.quantum.discard property)": [[33, "lambeq.backend.quantum.Discard.is_classical"]], "is_classical (lambeq.backend.quantum.encode property)": [[33, "lambeq.backend.quantum.Encode.is_classical"]], "is_classical (lambeq.backend.quantum.ket property)": [[33, "lambeq.backend.quantum.Ket.is_classical"]], "is_classical (lambeq.backend.quantum.measure property)": [[33, "lambeq.backend.quantum.Measure.is_classical"]], "is_classical (lambeq.backend.quantum.mixedstate property)": [[33, "lambeq.backend.quantum.MixedState.is_classical"]], "is_classical (lambeq.backend.quantum.parametrized property)": [[33, "lambeq.backend.quantum.Parametrized.is_classical"]], "is_classical (lambeq.backend.quantum.rotation property)": [[33, "lambeq.backend.quantum.Rotation.is_classical"]], "is_classical (lambeq.backend.quantum.rx property)": [[33, "lambeq.backend.quantum.Rx.is_classical"]], "is_classical (lambeq.backend.quantum.ry property)": [[33, "lambeq.backend.quantum.Ry.is_classical"]], "is_classical (lambeq.backend.quantum.rz property)": [[33, "lambeq.backend.quantum.Rz.is_classical"]], "is_classical (lambeq.backend.quantum.scalar property)": [[33, "lambeq.backend.quantum.Scalar.is_classical"]], "is_classical (lambeq.backend.quantum.selfconjugate property)": [[33, "lambeq.backend.quantum.SelfConjugate.is_classical"]], "is_classical (lambeq.backend.quantum.sqrt property)": [[33, "lambeq.backend.quantum.Sqrt.is_classical"]], "is_classical (lambeq.backend.quantum.swap property)": [[33, "lambeq.backend.quantum.Swap.is_classical"]], "is_complex (lambeq.backend.grammar.ty property)": [[33, "lambeq.backend.grammar.Ty.is_complex"]], "is_complex (lambeq.backend.quantum.ty property)": [[33, "lambeq.backend.quantum.Ty.is_complex"]], "is_complex (lambeq.backend.tensor.dim property)": [[33, "lambeq.backend.tensor.Dim.is_complex"]], "is_empty (lambeq.backend.grammar.ty property)": [[33, "lambeq.backend.grammar.Ty.is_empty"]], "is_empty (lambeq.backend.quantum.ty property)": [[33, "lambeq.backend.quantum.Ty.is_empty"]], "is_empty (lambeq.backend.tensor.dim property)": [[33, "lambeq.backend.tensor.Dim.is_empty"]], "is_id (lambeq.backend.grammar.diagram property)": [[33, "lambeq.backend.grammar.Diagram.is_id"]], "is_id (lambeq.backend.grammar.diagrammable property)": [[33, "lambeq.backend.grammar.Diagrammable.is_id"]], "is_id (lambeq.backend.quantum.diagram property)": [[33, "lambeq.backend.quantum.Diagram.is_id"]], "is_id (lambeq.backend.tensor.diagram property)": [[33, "lambeq.backend.tensor.Diagram.is_id"]], "is_mixed (lambeq.backend.quantum.anticonjugate attribute)": [[33, "lambeq.backend.quantum.AntiConjugate.is_mixed"]], "is_mixed (lambeq.backend.quantum.bit attribute)": [[33, "lambeq.backend.quantum.Bit.is_mixed"]], "is_mixed (lambeq.backend.quantum.box attribute)": [[33, "lambeq.backend.quantum.Box.is_mixed"]], "is_mixed (lambeq.backend.quantum.bra attribute)": [[33, "lambeq.backend.quantum.Bra.is_mixed"]], "is_mixed (lambeq.backend.quantum.controlled attribute)": [[33, "lambeq.backend.quantum.Controlled.is_mixed"]], "is_mixed (lambeq.backend.quantum.daggered attribute)": [[33, "lambeq.backend.quantum.Daggered.is_mixed"]], "is_mixed (lambeq.backend.quantum.diagram property)": [[33, "lambeq.backend.quantum.Diagram.is_mixed"]], "is_mixed (lambeq.backend.quantum.discard attribute)": [[33, "lambeq.backend.quantum.Discard.is_mixed"]], "is_mixed (lambeq.backend.quantum.encode attribute)": [[33, "lambeq.backend.quantum.Encode.is_mixed"]], "is_mixed (lambeq.backend.quantum.ket attribute)": [[33, "lambeq.backend.quantum.Ket.is_mixed"]], "is_mixed (lambeq.backend.quantum.measure attribute)": [[33, "lambeq.backend.quantum.Measure.is_mixed"]], "is_mixed (lambeq.backend.quantum.mixedstate attribute)": [[33, "lambeq.backend.quantum.MixedState.is_mixed"]], "is_mixed (lambeq.backend.quantum.parametrized attribute)": [[33, "lambeq.backend.quantum.Parametrized.is_mixed"]], "is_mixed (lambeq.backend.quantum.rotation attribute)": [[33, "lambeq.backend.quantum.Rotation.is_mixed"]], "is_mixed (lambeq.backend.quantum.rx attribute)": [[33, "lambeq.backend.quantum.Rx.is_mixed"]], "is_mixed (lambeq.backend.quantum.ry attribute)": [[33, "lambeq.backend.quantum.Ry.is_mixed"]], "is_mixed (lambeq.backend.quantum.rz attribute)": [[33, "lambeq.backend.quantum.Rz.is_mixed"]], "is_mixed (lambeq.backend.quantum.scalar attribute)": [[33, "lambeq.backend.quantum.Scalar.is_mixed"]], "is_mixed (lambeq.backend.quantum.selfconjugate attribute)": [[33, "lambeq.backend.quantum.SelfConjugate.is_mixed"]], "is_mixed (lambeq.backend.quantum.sqrt attribute)": [[33, "lambeq.backend.quantum.Sqrt.is_mixed"]], "is_mixed (lambeq.backend.quantum.swap attribute)": [[33, "lambeq.backend.quantum.Swap.is_mixed"]], "is_pregroup (lambeq.backend.grammar.diagram property)": [[33, "lambeq.backend.grammar.Diagram.is_pregroup"]], "is_pregroup (lambeq.backend.quantum.diagram property)": [[33, "lambeq.backend.quantum.Diagram.is_pregroup"]], "is_pregroup (lambeq.backend.tensor.diagram property)": [[33, "lambeq.backend.tensor.Diagram.is_pregroup"]], "is_reversed (lambeq.backend.grammar.cap attribute)": [[33, "lambeq.backend.grammar.Cap.is_reversed"]], "is_reversed (lambeq.backend.grammar.cup attribute)": [[33, "lambeq.backend.grammar.Cup.is_reversed"]], "is_reversed (lambeq.backend.tensor.cap attribute)": [[33, "lambeq.backend.tensor.Cap.is_reversed"]], "is_reversed (lambeq.backend.tensor.cup attribute)": [[33, "lambeq.backend.tensor.Cup.is_reversed"]], "l (lambeq.backend.grammar.box property)": [[33, "lambeq.backend.grammar.Box.l"]], "l (lambeq.backend.grammar.cap property)": [[33, "lambeq.backend.grammar.Cap.l"]], "l (lambeq.backend.grammar.cup property)": [[33, "lambeq.backend.grammar.Cup.l"]], "l (lambeq.backend.grammar.daggered property)": [[33, "lambeq.backend.grammar.Daggered.l"]], "l (lambeq.backend.grammar.diagram property)": [[33, "lambeq.backend.grammar.Diagram.l"]], "l (lambeq.backend.grammar.spider property)": [[33, "lambeq.backend.grammar.Spider.l"]], "l (lambeq.backend.grammar.swap property)": [[33, "lambeq.backend.grammar.Swap.l"]], "l (lambeq.backend.grammar.ty property)": [[33, "lambeq.backend.grammar.Ty.l"]], "l (lambeq.backend.grammar.word property)": [[33, "lambeq.backend.grammar.Word.l"]], "l (lambeq.backend.quantum.anticonjugate property)": [[33, "lambeq.backend.quantum.AntiConjugate.l"]], "l (lambeq.backend.quantum.bit property)": [[33, "lambeq.backend.quantum.Bit.l"]], "l (lambeq.backend.quantum.box property)": [[33, "lambeq.backend.quantum.Box.l"]], "l (lambeq.backend.quantum.bra property)": [[33, "lambeq.backend.quantum.Bra.l"]], "l (lambeq.backend.quantum.controlled property)": [[33, "lambeq.backend.quantum.Controlled.l"]], "l (lambeq.backend.quantum.daggered property)": [[33, "lambeq.backend.quantum.Daggered.l"]], "l (lambeq.backend.quantum.diagram property)": [[33, "lambeq.backend.quantum.Diagram.l"]], "l (lambeq.backend.quantum.discard property)": [[33, "lambeq.backend.quantum.Discard.l"]], "l (lambeq.backend.quantum.encode property)": [[33, "lambeq.backend.quantum.Encode.l"]], "l (lambeq.backend.quantum.ket property)": [[33, "lambeq.backend.quantum.Ket.l"]], "l (lambeq.backend.quantum.measure property)": [[33, "lambeq.backend.quantum.Measure.l"]], "l (lambeq.backend.quantum.mixedstate property)": [[33, "lambeq.backend.quantum.MixedState.l"]], "l (lambeq.backend.quantum.parametrized property)": [[33, "lambeq.backend.quantum.Parametrized.l"]], "l (lambeq.backend.quantum.rotation property)": [[33, "lambeq.backend.quantum.Rotation.l"]], "l (lambeq.backend.quantum.rx property)": [[33, "lambeq.backend.quantum.Rx.l"]], "l (lambeq.backend.quantum.ry property)": [[33, "lambeq.backend.quantum.Ry.l"]], "l (lambeq.backend.quantum.rz property)": [[33, "lambeq.backend.quantum.Rz.l"]], "l (lambeq.backend.quantum.scalar property)": [[33, "lambeq.backend.quantum.Scalar.l"]], "l (lambeq.backend.quantum.selfconjugate property)": [[33, "lambeq.backend.quantum.SelfConjugate.l"]], "l (lambeq.backend.quantum.sqrt property)": [[33, "lambeq.backend.quantum.Sqrt.l"]], "l (lambeq.backend.quantum.swap property)": [[33, "lambeq.backend.quantum.Swap.l"]], "l (lambeq.backend.quantum.ty property)": [[33, "lambeq.backend.quantum.Ty.l"]], "l (lambeq.backend.tensor.box property)": [[33, "lambeq.backend.tensor.Box.l"]], "l (lambeq.backend.tensor.cap property)": [[33, "lambeq.backend.tensor.Cap.l"]], "l (lambeq.backend.tensor.cup property)": [[33, "lambeq.backend.tensor.Cup.l"]], "l (lambeq.backend.tensor.daggered property)": [[33, "lambeq.backend.tensor.Daggered.l"]], "l (lambeq.backend.tensor.diagram property)": [[33, "lambeq.backend.tensor.Diagram.l"]], "l (lambeq.backend.tensor.dim property)": [[33, "lambeq.backend.tensor.Dim.l"]], "l (lambeq.backend.tensor.spider property)": [[33, "lambeq.backend.tensor.Spider.l"]], "l (lambeq.backend.tensor.swap property)": [[33, "lambeq.backend.tensor.Swap.l"]], "lambdify() (lambeq.backend.quantum.anticonjugate method)": [[33, "lambeq.backend.quantum.AntiConjugate.lambdify"]], "lambdify() (lambeq.backend.quantum.bit method)": [[33, "lambeq.backend.quantum.Bit.lambdify"]], "lambdify() (lambeq.backend.quantum.box method)": [[33, "lambeq.backend.quantum.Box.lambdify"]], "lambdify() (lambeq.backend.quantum.bra method)": [[33, "lambeq.backend.quantum.Bra.lambdify"]], "lambdify() (lambeq.backend.quantum.controlled method)": [[33, "lambeq.backend.quantum.Controlled.lambdify"]], "lambdify() (lambeq.backend.quantum.daggered method)": [[33, "lambeq.backend.quantum.Daggered.lambdify"]], "lambdify() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.lambdify"]], "lambdify() (lambeq.backend.quantum.discard method)": [[33, "lambeq.backend.quantum.Discard.lambdify"]], "lambdify() (lambeq.backend.quantum.encode method)": [[33, "lambeq.backend.quantum.Encode.lambdify"]], "lambdify() (lambeq.backend.quantum.ket method)": [[33, "lambeq.backend.quantum.Ket.lambdify"]], "lambdify() (lambeq.backend.quantum.measure method)": [[33, "lambeq.backend.quantum.Measure.lambdify"]], "lambdify() (lambeq.backend.quantum.mixedstate method)": [[33, "lambeq.backend.quantum.MixedState.lambdify"]], "lambdify() (lambeq.backend.quantum.parametrized method)": [[33, "lambeq.backend.quantum.Parametrized.lambdify"]], "lambdify() (lambeq.backend.quantum.rotation method)": [[33, "lambeq.backend.quantum.Rotation.lambdify"]], "lambdify() (lambeq.backend.quantum.rx method)": [[33, "lambeq.backend.quantum.Rx.lambdify"]], "lambdify() (lambeq.backend.quantum.ry method)": [[33, "lambeq.backend.quantum.Ry.lambdify"]], "lambdify() (lambeq.backend.quantum.rz method)": [[33, "lambeq.backend.quantum.Rz.lambdify"]], "lambdify() (lambeq.backend.quantum.scalar method)": [[33, "lambeq.backend.quantum.Scalar.lambdify"]], "lambdify() (lambeq.backend.quantum.selfconjugate method)": [[33, "lambeq.backend.quantum.SelfConjugate.lambdify"]], "lambdify() (lambeq.backend.quantum.sqrt method)": [[33, "lambeq.backend.quantum.Sqrt.lambdify"]], "lambdify() (lambeq.backend.quantum.swap method)": [[33, "lambeq.backend.quantum.Swap.lambdify"]], "lambdify() (lambeq.backend.tensor.box method)": [[33, "lambeq.backend.tensor.Box.lambdify"]], "lambdify() (lambeq.backend.tensor.cap method)": [[33, "lambeq.backend.tensor.Cap.lambdify"]], "lambdify() (lambeq.backend.tensor.cup method)": [[33, "lambeq.backend.tensor.Cup.lambdify"]], "lambdify() (lambeq.backend.tensor.daggered method)": [[33, "lambeq.backend.tensor.Daggered.lambdify"]], "lambdify() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.lambdify"]], "lambdify() (lambeq.backend.tensor.spider method)": [[33, "lambeq.backend.tensor.Spider.lambdify"]], "lambdify() (lambeq.backend.tensor.swap method)": [[33, "lambeq.backend.tensor.Swap.lambdify"]], "lambeq.backend.drawing": [[33, "module-lambeq.backend.drawing"]], "lambeq.backend.grammar": [[33, "module-lambeq.backend.grammar"]], "lambeq.backend.numerical_backend": [[33, "module-lambeq.backend.numerical_backend"]], "lambeq.backend.quantum": [[33, "module-lambeq.backend.quantum"]], "lambeq.backend.tensor": [[33, "module-lambeq.backend.tensor"]], "layers (lambeq.backend.grammar.diagram attribute)": [[33, "lambeq.backend.grammar.Diagram.layers"]], "layers (lambeq.backend.quantum.diagram attribute)": [[33, "lambeq.backend.quantum.Diagram.layers"]], "layers (lambeq.backend.tensor.diagram attribute)": [[33, "lambeq.backend.tensor.Diagram.layers"]], "left (lambeq.backend.grammar.cap attribute)": [[33, "lambeq.backend.grammar.Cap.left"]], "left (lambeq.backend.grammar.cup attribute)": [[33, "lambeq.backend.grammar.Cup.left"]], "left (lambeq.backend.grammar.layer attribute)": [[33, "lambeq.backend.grammar.Layer.left"]], "left (lambeq.backend.grammar.swap attribute)": [[33, "lambeq.backend.grammar.Swap.left"]], "left (lambeq.backend.quantum.layer attribute)": [[33, "lambeq.backend.quantum.Layer.left"]], "left (lambeq.backend.quantum.swap attribute)": [[33, "lambeq.backend.quantum.Swap.left"]], "left (lambeq.backend.tensor.cap attribute)": [[33, "lambeq.backend.tensor.Cap.left"]], "left (lambeq.backend.tensor.cup attribute)": [[33, "lambeq.backend.tensor.Cup.left"]], "left (lambeq.backend.tensor.layer attribute)": [[33, "lambeq.backend.tensor.Layer.left"]], "left (lambeq.backend.tensor.swap attribute)": [[33, "lambeq.backend.tensor.Swap.left"]], "lift() (lambeq.backend.grammar.diagram class method)": [[33, "lambeq.backend.grammar.Diagram.lift"]], "lift() (lambeq.backend.quantum.diagram class method)": [[33, "lambeq.backend.quantum.Diagram.lift"]], "lift() (lambeq.backend.tensor.diagram class method)": [[33, "lambeq.backend.tensor.Diagram.lift"]], "modules (lambeq.backend.quantum.controlled property)": [[33, "lambeq.backend.quantum.Controlled.modules"]], "modules (lambeq.backend.quantum.parametrized property)": [[33, "lambeq.backend.quantum.Parametrized.modules"]], "modules (lambeq.backend.quantum.rotation property)": [[33, "lambeq.backend.quantum.Rotation.modules"]], "modules (lambeq.backend.quantum.rx property)": [[33, "lambeq.backend.quantum.Rx.modules"]], "modules (lambeq.backend.quantum.ry property)": [[33, "lambeq.backend.quantum.Ry.modules"]], "modules (lambeq.backend.quantum.rz property)": [[33, "lambeq.backend.quantum.Rz.modules"]], "n_legs_in (lambeq.backend.grammar.spider attribute)": [[33, "lambeq.backend.grammar.Spider.n_legs_in"]], "n_legs_in (lambeq.backend.quantum.swap attribute)": [[33, "lambeq.backend.quantum.Swap.n_legs_in"]], "n_legs_in (lambeq.backend.tensor.spider attribute)": [[33, "lambeq.backend.tensor.Spider.n_legs_in"]], "n_legs_out (lambeq.backend.grammar.spider attribute)": [[33, "lambeq.backend.grammar.Spider.n_legs_out"]], "n_legs_out (lambeq.backend.quantum.swap attribute)": [[33, "lambeq.backend.quantum.Swap.n_legs_out"]], "n_legs_out (lambeq.backend.tensor.spider attribute)": [[33, "lambeq.backend.tensor.Spider.n_legs_out"]], "name (lambeq.backend.grammar.box attribute)": [[33, "lambeq.backend.grammar.Box.name"]], "name (lambeq.backend.grammar.cap attribute)": [[33, "lambeq.backend.grammar.Cap.name"]], "name (lambeq.backend.grammar.category attribute)": [[33, "lambeq.backend.grammar.Category.name"]], "name (lambeq.backend.grammar.cup attribute)": [[33, "lambeq.backend.grammar.Cup.name"]], "name (lambeq.backend.grammar.daggered attribute)": [[33, "lambeq.backend.grammar.Daggered.name"]], "name (lambeq.backend.grammar.spider attribute)": [[33, "lambeq.backend.grammar.Spider.name"]], "name (lambeq.backend.grammar.swap attribute)": [[33, "lambeq.backend.grammar.Swap.name"]], "name (lambeq.backend.grammar.ty attribute)": [[33, "lambeq.backend.grammar.Ty.name"]], "name (lambeq.backend.grammar.word attribute)": [[33, "lambeq.backend.grammar.Word.name"]], "name (lambeq.backend.numerical_backend.backend property)": [[33, "lambeq.backend.numerical_backend.Backend.name"]], "name (lambeq.backend.numerical_backend.jax property)": [[33, "lambeq.backend.numerical_backend.JAX.name"]], "name (lambeq.backend.numerical_backend.numpy property)": [[33, "lambeq.backend.numerical_backend.NumPy.name"]], "name (lambeq.backend.numerical_backend.pytorch property)": [[33, "lambeq.backend.numerical_backend.PyTorch.name"]], "name (lambeq.backend.numerical_backend.tensorflow property)": [[33, "lambeq.backend.numerical_backend.TensorFlow.name"]], "name (lambeq.backend.quantum.anticonjugate attribute)": [[33, "lambeq.backend.quantum.AntiConjugate.name"]], "name (lambeq.backend.quantum.bit attribute)": [[33, "lambeq.backend.quantum.Bit.name"]], "name (lambeq.backend.quantum.box attribute)": [[33, "lambeq.backend.quantum.Box.name"]], "name (lambeq.backend.quantum.bra attribute)": [[33, "lambeq.backend.quantum.Bra.name"]], "name (lambeq.backend.quantum.controlled attribute)": [[33, "lambeq.backend.quantum.Controlled.name"]], "name (lambeq.backend.quantum.daggered attribute)": [[33, "lambeq.backend.quantum.Daggered.name"]], "name (lambeq.backend.quantum.discard attribute)": [[33, "lambeq.backend.quantum.Discard.name"]], "name (lambeq.backend.quantum.encode attribute)": [[33, "lambeq.backend.quantum.Encode.name"]], "name (lambeq.backend.quantum.ket attribute)": [[33, "lambeq.backend.quantum.Ket.name"]], "name (lambeq.backend.quantum.measure attribute)": [[33, "lambeq.backend.quantum.Measure.name"]], "name (lambeq.backend.quantum.mixedstate attribute)": [[33, "lambeq.backend.quantum.MixedState.name"]], "name (lambeq.backend.quantum.parametrized attribute)": [[33, "lambeq.backend.quantum.Parametrized.name"]], "name (lambeq.backend.quantum.rotation attribute)": [[33, "lambeq.backend.quantum.Rotation.name"]], "name (lambeq.backend.quantum.rx attribute)": [[33, "lambeq.backend.quantum.Rx.name"]], "name (lambeq.backend.quantum.ry attribute)": [[33, "lambeq.backend.quantum.Ry.name"]], "name (lambeq.backend.quantum.rz attribute)": [[33, "lambeq.backend.quantum.Rz.name"]], "name (lambeq.backend.quantum.scalar attribute)": [[33, "lambeq.backend.quantum.Scalar.name"]], "name (lambeq.backend.quantum.selfconjugate attribute)": [[33, "lambeq.backend.quantum.SelfConjugate.name"]], "name (lambeq.backend.quantum.sqrt attribute)": [[33, "lambeq.backend.quantum.Sqrt.name"]], "name (lambeq.backend.quantum.swap attribute)": [[33, "lambeq.backend.quantum.Swap.name"]], "name (lambeq.backend.quantum.ty attribute)": [[33, "lambeq.backend.quantum.Ty.name"]], "name (lambeq.backend.tensor.box attribute)": [[33, "lambeq.backend.tensor.Box.name"]], "name (lambeq.backend.tensor.cap attribute)": [[33, "lambeq.backend.tensor.Cap.name"]], "name (lambeq.backend.tensor.cup attribute)": [[33, "lambeq.backend.tensor.Cup.name"]], "name (lambeq.backend.tensor.daggered attribute)": [[33, "lambeq.backend.tensor.Daggered.name"]], "name (lambeq.backend.tensor.dim attribute)": [[33, "lambeq.backend.tensor.Dim.name"]], "name (lambeq.backend.tensor.spider attribute)": [[33, "lambeq.backend.tensor.Spider.name"]], "name (lambeq.backend.tensor.swap attribute)": [[33, "lambeq.backend.tensor.Swap.name"]], "normal_form() (lambeq.backend.grammar.diagram method)": [[33, "lambeq.backend.grammar.Diagram.normal_form"]], "normal_form() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.normal_form"]], "normal_form() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.normal_form"]], "ob() (lambeq.backend.grammar.functor method)": [[33, "lambeq.backend.grammar.Functor.ob"]], "ob_with_cache() (lambeq.backend.grammar.functor method)": [[33, "lambeq.backend.grammar.Functor.ob_with_cache"]], "objects (lambeq.backend.grammar.ty attribute)": [[33, "lambeq.backend.grammar.Ty.objects"]], "objects (lambeq.backend.quantum.ty attribute)": [[33, "lambeq.backend.quantum.Ty.objects"]], "objects (lambeq.backend.tensor.dim attribute)": [[33, "lambeq.backend.tensor.Dim.objects"]], "offsets (lambeq.backend.grammar.diagram property)": [[33, "lambeq.backend.grammar.Diagram.offsets"]], "offsets (lambeq.backend.quantum.diagram property)": [[33, "lambeq.backend.quantum.Diagram.offsets"]], "offsets (lambeq.backend.tensor.diagram property)": [[33, "lambeq.backend.tensor.Diagram.offsets"]], "permutation() (lambeq.backend.grammar.diagram class method)": [[33, "lambeq.backend.grammar.Diagram.permutation"]], "permutation() (lambeq.backend.quantum.diagram class method)": [[33, "lambeq.backend.quantum.Diagram.permutation"]], "permutation() (lambeq.backend.tensor.diagram class method)": [[33, "lambeq.backend.tensor.Diagram.permutation"]], "permuted() (lambeq.backend.grammar.diagram method)": [[33, "lambeq.backend.grammar.Diagram.permuted"]], "permuted() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.permuted"]], "permuted() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.permuted"]], "phase (lambeq.backend.quantum.controlled property)": [[33, "lambeq.backend.quantum.Controlled.phase"]], "phase (lambeq.backend.quantum.rotation property)": [[33, "lambeq.backend.quantum.Rotation.phase"]], "phase (lambeq.backend.quantum.rx property)": [[33, "lambeq.backend.quantum.Rx.phase"]], "phase (lambeq.backend.quantum.ry property)": [[33, "lambeq.backend.quantum.Ry.phase"]], "phase (lambeq.backend.quantum.rz property)": [[33, "lambeq.backend.quantum.Rz.phase"]], "pregroup_normal_form() (lambeq.backend.grammar.diagram method)": [[33, "lambeq.backend.grammar.Diagram.pregroup_normal_form"]], "pregroup_normal_form() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.pregroup_normal_form"]], "pregroup_normal_form() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.pregroup_normal_form"]], "product (lambeq.backend.quantum.ty property)": [[33, "lambeq.backend.quantum.Ty.product"]], "product (lambeq.backend.tensor.dim property)": [[33, "lambeq.backend.tensor.Dim.product"]], "r (lambeq.backend.grammar.box property)": [[33, "lambeq.backend.grammar.Box.r"]], "r (lambeq.backend.grammar.cap property)": [[33, "lambeq.backend.grammar.Cap.r"]], "r (lambeq.backend.grammar.cup property)": [[33, "lambeq.backend.grammar.Cup.r"]], "r (lambeq.backend.grammar.daggered property)": [[33, "lambeq.backend.grammar.Daggered.r"]], "r (lambeq.backend.grammar.diagram property)": [[33, "lambeq.backend.grammar.Diagram.r"]], "r (lambeq.backend.grammar.spider property)": [[33, "lambeq.backend.grammar.Spider.r"]], "r (lambeq.backend.grammar.swap property)": [[33, "lambeq.backend.grammar.Swap.r"]], "r (lambeq.backend.grammar.ty property)": [[33, "lambeq.backend.grammar.Ty.r"]], "r (lambeq.backend.grammar.word property)": [[33, "lambeq.backend.grammar.Word.r"]], "r (lambeq.backend.quantum.anticonjugate property)": [[33, "lambeq.backend.quantum.AntiConjugate.r"]], "r (lambeq.backend.quantum.bit property)": [[33, "lambeq.backend.quantum.Bit.r"]], "r (lambeq.backend.quantum.box property)": [[33, "lambeq.backend.quantum.Box.r"]], "r (lambeq.backend.quantum.bra property)": [[33, "lambeq.backend.quantum.Bra.r"]], "r (lambeq.backend.quantum.controlled property)": [[33, "lambeq.backend.quantum.Controlled.r"]], "r (lambeq.backend.quantum.daggered property)": [[33, "lambeq.backend.quantum.Daggered.r"]], "r (lambeq.backend.quantum.diagram property)": [[33, "lambeq.backend.quantum.Diagram.r"]], "r (lambeq.backend.quantum.discard property)": [[33, "lambeq.backend.quantum.Discard.r"]], "r (lambeq.backend.quantum.encode property)": [[33, "lambeq.backend.quantum.Encode.r"]], "r (lambeq.backend.quantum.ket property)": [[33, "lambeq.backend.quantum.Ket.r"]], "r (lambeq.backend.quantum.measure property)": [[33, "lambeq.backend.quantum.Measure.r"]], "r (lambeq.backend.quantum.mixedstate property)": [[33, "lambeq.backend.quantum.MixedState.r"]], "r (lambeq.backend.quantum.parametrized property)": [[33, "lambeq.backend.quantum.Parametrized.r"]], "r (lambeq.backend.quantum.rotation property)": [[33, "lambeq.backend.quantum.Rotation.r"]], "r (lambeq.backend.quantum.rx property)": [[33, "lambeq.backend.quantum.Rx.r"]], "r (lambeq.backend.quantum.ry property)": [[33, "lambeq.backend.quantum.Ry.r"]], "r (lambeq.backend.quantum.rz property)": [[33, "lambeq.backend.quantum.Rz.r"]], "r (lambeq.backend.quantum.scalar property)": [[33, "lambeq.backend.quantum.Scalar.r"]], "r (lambeq.backend.quantum.selfconjugate property)": [[33, "lambeq.backend.quantum.SelfConjugate.r"]], "r (lambeq.backend.quantum.sqrt property)": [[33, "lambeq.backend.quantum.Sqrt.r"]], "r (lambeq.backend.quantum.swap property)": [[33, "lambeq.backend.quantum.Swap.r"]], "r (lambeq.backend.quantum.ty property)": [[33, "lambeq.backend.quantum.Ty.r"]], "r (lambeq.backend.tensor.box property)": [[33, "lambeq.backend.tensor.Box.r"]], "r (lambeq.backend.tensor.cap property)": [[33, "lambeq.backend.tensor.Cap.r"]], "r (lambeq.backend.tensor.cup property)": [[33, "lambeq.backend.tensor.Cup.r"]], "r (lambeq.backend.tensor.daggered property)": [[33, "lambeq.backend.tensor.Daggered.r"]], "r (lambeq.backend.tensor.diagram property)": [[33, "lambeq.backend.tensor.Diagram.r"]], "r (lambeq.backend.tensor.dim property)": [[33, "lambeq.backend.tensor.Dim.r"]], "r (lambeq.backend.tensor.spider property)": [[33, "lambeq.backend.tensor.Spider.r"]], "r (lambeq.backend.tensor.swap property)": [[33, "lambeq.backend.tensor.Swap.r"]], "register_special_box() (lambeq.backend.grammar.diagram class method)": [[33, "lambeq.backend.grammar.Diagram.register_special_box"]], "register_special_box() (lambeq.backend.quantum.diagram class method)": [[33, "lambeq.backend.quantum.Diagram.register_special_box"]], "register_special_box() (lambeq.backend.tensor.diagram class method)": [[33, "lambeq.backend.tensor.Diagram.register_special_box"]], "render_as_str() (in module lambeq.backend.drawing)": [[33, "lambeq.backend.drawing.render_as_str"]], "render_as_str() (lambeq.backend.grammar.diagram method)": [[33, "lambeq.backend.grammar.Diagram.render_as_str"]], "render_as_str() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.render_as_str"]], "render_as_str() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.render_as_str"]], "repeat() (lambeq.backend.grammar.ty method)": [[33, "lambeq.backend.grammar.Ty.repeat"]], "repeat() (lambeq.backend.quantum.ty method)": [[33, "lambeq.backend.quantum.Ty.repeat"]], "repeat() (lambeq.backend.tensor.dim method)": [[33, "lambeq.backend.tensor.Dim.repeat"]], "right (lambeq.backend.grammar.cap attribute)": [[33, "lambeq.backend.grammar.Cap.right"]], "right (lambeq.backend.grammar.cup attribute)": [[33, "lambeq.backend.grammar.Cup.right"]], "right (lambeq.backend.grammar.layer attribute)": [[33, "lambeq.backend.grammar.Layer.right"]], "right (lambeq.backend.grammar.swap attribute)": [[33, "lambeq.backend.grammar.Swap.right"]], "right (lambeq.backend.quantum.layer attribute)": [[33, "lambeq.backend.quantum.Layer.right"]], "right (lambeq.backend.quantum.swap attribute)": [[33, "lambeq.backend.quantum.Swap.right"]], "right (lambeq.backend.tensor.cap attribute)": [[33, "lambeq.backend.tensor.Cap.right"]], "right (lambeq.backend.tensor.cup attribute)": [[33, "lambeq.backend.tensor.Cup.right"]], "right (lambeq.backend.tensor.layer attribute)": [[33, "lambeq.backend.tensor.Layer.right"]], "right (lambeq.backend.tensor.swap attribute)": [[33, "lambeq.backend.tensor.Swap.right"]], "rotate() (lambeq.backend.grammar.box method)": [[33, "lambeq.backend.grammar.Box.rotate"]], "rotate() (lambeq.backend.grammar.cap method)": [[33, "lambeq.backend.grammar.Cap.rotate"]], "rotate() (lambeq.backend.grammar.cup method)": [[33, "lambeq.backend.grammar.Cup.rotate"]], "rotate() (lambeq.backend.grammar.daggered method)": [[33, "lambeq.backend.grammar.Daggered.rotate"]], "rotate() (lambeq.backend.grammar.diagram method)": [[33, "lambeq.backend.grammar.Diagram.rotate"]], "rotate() (lambeq.backend.grammar.diagrammable method)": [[33, "lambeq.backend.grammar.Diagrammable.rotate"]], "rotate() (lambeq.backend.grammar.layer method)": [[33, "lambeq.backend.grammar.Layer.rotate"]], "rotate() (lambeq.backend.grammar.spider method)": [[33, "lambeq.backend.grammar.Spider.rotate"]], "rotate() (lambeq.backend.grammar.swap method)": [[33, "lambeq.backend.grammar.Swap.rotate"]], "rotate() (lambeq.backend.grammar.ty method)": [[33, "lambeq.backend.grammar.Ty.rotate"]], "rotate() (lambeq.backend.grammar.word method)": [[33, "lambeq.backend.grammar.Word.rotate"]], "rotate() (lambeq.backend.quantum.anticonjugate method)": [[33, "lambeq.backend.quantum.AntiConjugate.rotate"]], "rotate() (lambeq.backend.quantum.bit method)": [[33, "lambeq.backend.quantum.Bit.rotate"]], "rotate() (lambeq.backend.quantum.box method)": [[33, "lambeq.backend.quantum.Box.rotate"]], "rotate() (lambeq.backend.quantum.bra method)": [[33, "lambeq.backend.quantum.Bra.rotate"]], "rotate() (lambeq.backend.quantum.controlled method)": [[33, "lambeq.backend.quantum.Controlled.rotate"]], "rotate() (lambeq.backend.quantum.daggered method)": [[33, "lambeq.backend.quantum.Daggered.rotate"]], "rotate() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.rotate"]], "rotate() (lambeq.backend.quantum.discard method)": [[33, "lambeq.backend.quantum.Discard.rotate"]], "rotate() (lambeq.backend.quantum.encode method)": [[33, "lambeq.backend.quantum.Encode.rotate"]], "rotate() (lambeq.backend.quantum.ket method)": [[33, "lambeq.backend.quantum.Ket.rotate"]], "rotate() (lambeq.backend.quantum.layer method)": [[33, "lambeq.backend.quantum.Layer.rotate"]], "rotate() (lambeq.backend.quantum.measure method)": [[33, "lambeq.backend.quantum.Measure.rotate"]], "rotate() (lambeq.backend.quantum.mixedstate method)": [[33, "lambeq.backend.quantum.MixedState.rotate"]], "rotate() (lambeq.backend.quantum.parametrized method)": [[33, "lambeq.backend.quantum.Parametrized.rotate"]], "rotate() (lambeq.backend.quantum.rotation method)": [[33, "lambeq.backend.quantum.Rotation.rotate"]], "rotate() (lambeq.backend.quantum.rx method)": [[33, "lambeq.backend.quantum.Rx.rotate"]], "rotate() (lambeq.backend.quantum.ry method)": [[33, "lambeq.backend.quantum.Ry.rotate"]], "rotate() (lambeq.backend.quantum.rz method)": [[33, "lambeq.backend.quantum.Rz.rotate"]], "rotate() (lambeq.backend.quantum.scalar method)": [[33, "lambeq.backend.quantum.Scalar.rotate"]], "rotate() (lambeq.backend.quantum.selfconjugate method)": [[33, "lambeq.backend.quantum.SelfConjugate.rotate"]], "rotate() (lambeq.backend.quantum.sqrt method)": [[33, "lambeq.backend.quantum.Sqrt.rotate"]], "rotate() (lambeq.backend.quantum.swap method)": [[33, "lambeq.backend.quantum.Swap.rotate"]], "rotate() (lambeq.backend.quantum.ty method)": [[33, "lambeq.backend.quantum.Ty.rotate"]], "rotate() (lambeq.backend.tensor.box method)": [[33, "lambeq.backend.tensor.Box.rotate"]], "rotate() (lambeq.backend.tensor.cap method)": [[33, "lambeq.backend.tensor.Cap.rotate"]], "rotate() (lambeq.backend.tensor.cup method)": [[33, "lambeq.backend.tensor.Cup.rotate"]], "rotate() (lambeq.backend.tensor.daggered method)": [[33, "lambeq.backend.tensor.Daggered.rotate"]], "rotate() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.rotate"]], "rotate() (lambeq.backend.tensor.dim method)": [[33, "lambeq.backend.tensor.Dim.rotate"]], "rotate() (lambeq.backend.tensor.layer method)": [[33, "lambeq.backend.tensor.Layer.rotate"]], "rotate() (lambeq.backend.tensor.spider method)": [[33, "lambeq.backend.tensor.Spider.rotate"]], "rotate() (lambeq.backend.tensor.swap method)": [[33, "lambeq.backend.tensor.Swap.rotate"]], "scale_and_pad() (lambeq.backend.drawing.drawablediagram method)": [[33, "lambeq.backend.drawing.DrawableDiagram.scale_and_pad"]], "self_adjoint (lambeq.backend.quantum.anticonjugate attribute)": [[33, "lambeq.backend.quantum.AntiConjugate.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.bit attribute)": [[33, "lambeq.backend.quantum.Bit.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.box attribute)": [[33, "lambeq.backend.quantum.Box.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.bra attribute)": [[33, "lambeq.backend.quantum.Bra.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.controlled attribute)": [[33, "lambeq.backend.quantum.Controlled.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.daggered attribute)": [[33, "lambeq.backend.quantum.Daggered.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.discard attribute)": [[33, "lambeq.backend.quantum.Discard.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.encode attribute)": [[33, "lambeq.backend.quantum.Encode.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.ket attribute)": [[33, "lambeq.backend.quantum.Ket.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.measure attribute)": [[33, "lambeq.backend.quantum.Measure.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.mixedstate attribute)": [[33, "lambeq.backend.quantum.MixedState.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.parametrized attribute)": [[33, "lambeq.backend.quantum.Parametrized.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.rotation attribute)": [[33, "lambeq.backend.quantum.Rotation.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.rx attribute)": [[33, "lambeq.backend.quantum.Rx.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.ry attribute)": [[33, "lambeq.backend.quantum.Ry.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.rz attribute)": [[33, "lambeq.backend.quantum.Rz.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.scalar attribute)": [[33, "lambeq.backend.quantum.Scalar.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.selfconjugate attribute)": [[33, "lambeq.backend.quantum.SelfConjugate.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.sqrt attribute)": [[33, "lambeq.backend.quantum.Sqrt.self_adjoint"]], "self_adjoint (lambeq.backend.quantum.swap attribute)": [[33, "lambeq.backend.quantum.Swap.self_adjoint"]], "set() (lambeq.backend.grammar.category method)": [[33, "lambeq.backend.grammar.Category.set"]], "set_backend() (in module lambeq.backend.numerical_backend)": [[33, "lambeq.backend.numerical_backend.set_backend"]], "special_boxes (lambeq.backend.grammar.diagram attribute)": [[33, "lambeq.backend.grammar.Diagram.special_boxes"]], "special_boxes (lambeq.backend.quantum.diagram attribute)": [[33, "lambeq.backend.quantum.Diagram.special_boxes"]], "special_boxes (lambeq.backend.tensor.diagram attribute)": [[33, "lambeq.backend.tensor.Diagram.special_boxes"]], "swap() (lambeq.backend.grammar.diagram class method)": [[33, "lambeq.backend.grammar.Diagram.swap"]], "swap() (lambeq.backend.quantum.diagram class method)": [[33, "lambeq.backend.quantum.Diagram.swap"]], "swap() (lambeq.backend.tensor.diagram class method)": [[33, "lambeq.backend.tensor.Diagram.swap"]], "target_category (lambeq.backend.grammar.functor attribute)": [[33, "lambeq.backend.grammar.Functor.target_category"]], "tensor() (lambeq.backend.grammar.diagram method)": [[33, "lambeq.backend.grammar.Diagram.tensor"]], "tensor() (lambeq.backend.grammar.ty method)": [[33, "lambeq.backend.grammar.Ty.tensor"]], "tensor() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.tensor"]], "tensor() (lambeq.backend.quantum.ty method)": [[33, "lambeq.backend.quantum.Ty.tensor"]], "tensor() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.tensor"]], "tensor() (lambeq.backend.tensor.dim method)": [[33, "lambeq.backend.tensor.Dim.tensor"]], "then() (lambeq.backend.grammar.diagram method)": [[33, "lambeq.backend.grammar.Diagram.then"]], "then() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.then"]], "then() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.then"]], "then_at() (lambeq.backend.grammar.diagram method)": [[33, "lambeq.backend.grammar.Diagram.then_at"]], "then_at() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.then_at"]], "then_at() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.then_at"]], "to_diagram() (lambeq.backend.grammar.box method)": [[33, "lambeq.backend.grammar.Box.to_diagram"]], "to_diagram() (lambeq.backend.grammar.cap method)": [[33, "lambeq.backend.grammar.Cap.to_diagram"]], "to_diagram() (lambeq.backend.grammar.cup method)": [[33, "lambeq.backend.grammar.Cup.to_diagram"]], "to_diagram() (lambeq.backend.grammar.daggered method)": [[33, "lambeq.backend.grammar.Daggered.to_diagram"]], "to_diagram() (lambeq.backend.grammar.diagram method)": [[33, "lambeq.backend.grammar.Diagram.to_diagram"]], "to_diagram() (lambeq.backend.grammar.diagrammable method)": [[33, "lambeq.backend.grammar.Diagrammable.to_diagram"]], "to_diagram() (lambeq.backend.grammar.spider method)": [[33, "lambeq.backend.grammar.Spider.to_diagram"]], "to_diagram() (lambeq.backend.grammar.swap method)": [[33, "lambeq.backend.grammar.Swap.to_diagram"]], "to_diagram() (lambeq.backend.grammar.ty method)": [[33, "lambeq.backend.grammar.Ty.to_diagram"]], "to_diagram() (lambeq.backend.grammar.word method)": [[33, "lambeq.backend.grammar.Word.to_diagram"]], "to_diagram() (lambeq.backend.quantum.anticonjugate method)": [[33, "lambeq.backend.quantum.AntiConjugate.to_diagram"]], "to_diagram() (lambeq.backend.quantum.bit method)": [[33, "lambeq.backend.quantum.Bit.to_diagram"]], "to_diagram() (lambeq.backend.quantum.box method)": [[33, "lambeq.backend.quantum.Box.to_diagram"]], "to_diagram() (lambeq.backend.quantum.bra method)": [[33, "lambeq.backend.quantum.Bra.to_diagram"]], "to_diagram() (lambeq.backend.quantum.controlled method)": [[33, "lambeq.backend.quantum.Controlled.to_diagram"]], "to_diagram() (lambeq.backend.quantum.daggered method)": [[33, "lambeq.backend.quantum.Daggered.to_diagram"]], "to_diagram() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.to_diagram"]], "to_diagram() (lambeq.backend.quantum.discard method)": [[33, "lambeq.backend.quantum.Discard.to_diagram"]], "to_diagram() (lambeq.backend.quantum.encode method)": [[33, "lambeq.backend.quantum.Encode.to_diagram"]], "to_diagram() (lambeq.backend.quantum.ket method)": [[33, "lambeq.backend.quantum.Ket.to_diagram"]], "to_diagram() (lambeq.backend.quantum.measure method)": [[33, "lambeq.backend.quantum.Measure.to_diagram"]], "to_diagram() (lambeq.backend.quantum.mixedstate method)": [[33, "lambeq.backend.quantum.MixedState.to_diagram"]], "to_diagram() (lambeq.backend.quantum.parametrized method)": [[33, "lambeq.backend.quantum.Parametrized.to_diagram"]], "to_diagram() (lambeq.backend.quantum.rotation method)": [[33, "lambeq.backend.quantum.Rotation.to_diagram"]], "to_diagram() (lambeq.backend.quantum.rx method)": [[33, "lambeq.backend.quantum.Rx.to_diagram"]], "to_diagram() (lambeq.backend.quantum.ry method)": [[33, "lambeq.backend.quantum.Ry.to_diagram"]], "to_diagram() (lambeq.backend.quantum.rz method)": [[33, "lambeq.backend.quantum.Rz.to_diagram"]], "to_diagram() (lambeq.backend.quantum.scalar method)": [[33, "lambeq.backend.quantum.Scalar.to_diagram"]], "to_diagram() (lambeq.backend.quantum.selfconjugate method)": [[33, "lambeq.backend.quantum.SelfConjugate.to_diagram"]], "to_diagram() (lambeq.backend.quantum.sqrt method)": [[33, "lambeq.backend.quantum.Sqrt.to_diagram"]], "to_diagram() (lambeq.backend.quantum.swap method)": [[33, "lambeq.backend.quantum.Swap.to_diagram"]], "to_diagram() (lambeq.backend.quantum.ty method)": [[33, "lambeq.backend.quantum.Ty.to_diagram"]], "to_diagram() (lambeq.backend.tensor.box method)": [[33, "lambeq.backend.tensor.Box.to_diagram"]], "to_diagram() (lambeq.backend.tensor.cap method)": [[33, "lambeq.backend.tensor.Cap.to_diagram"]], "to_diagram() (lambeq.backend.tensor.cup method)": [[33, "lambeq.backend.tensor.Cup.to_diagram"]], "to_diagram() (lambeq.backend.tensor.daggered method)": [[33, "lambeq.backend.tensor.Daggered.to_diagram"]], "to_diagram() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.to_diagram"]], "to_diagram() (lambeq.backend.tensor.dim method)": [[33, "lambeq.backend.tensor.Dim.to_diagram"]], "to_diagram() (lambeq.backend.tensor.spider method)": [[33, "lambeq.backend.tensor.Spider.to_diagram"]], "to_diagram() (lambeq.backend.tensor.swap method)": [[33, "lambeq.backend.tensor.Swap.to_diagram"]], "to_discopy() (lambeq.backend.grammar.diagram method)": [[33, "lambeq.backend.grammar.Diagram.to_discopy"]], "to_discopy() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.to_discopy"]], "to_discopy() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.to_discopy"]], "to_gif() (in module lambeq.backend.drawing)": [[33, "lambeq.backend.drawing.to_gif"]], "to_json() (lambeq.backend.grammar.box method)": [[33, "lambeq.backend.grammar.Box.to_json"]], "to_json() (lambeq.backend.grammar.cap method)": [[33, "lambeq.backend.grammar.Cap.to_json"]], "to_json() (lambeq.backend.grammar.cup method)": [[33, "lambeq.backend.grammar.Cup.to_json"]], "to_json() (lambeq.backend.grammar.daggered method)": [[33, "lambeq.backend.grammar.Daggered.to_json"]], "to_json() (lambeq.backend.grammar.diagram method)": [[33, "lambeq.backend.grammar.Diagram.to_json"]], "to_json() (lambeq.backend.grammar.layer method)": [[33, "lambeq.backend.grammar.Layer.to_json"]], "to_json() (lambeq.backend.grammar.spider method)": [[33, "lambeq.backend.grammar.Spider.to_json"]], "to_json() (lambeq.backend.grammar.swap method)": [[33, "lambeq.backend.grammar.Swap.to_json"]], "to_json() (lambeq.backend.grammar.ty method)": [[33, "lambeq.backend.grammar.Ty.to_json"]], "to_json() (lambeq.backend.grammar.word method)": [[33, "lambeq.backend.grammar.Word.to_json"]], "to_json() (lambeq.backend.quantum.anticonjugate method)": [[33, "lambeq.backend.quantum.AntiConjugate.to_json"]], "to_json() (lambeq.backend.quantum.bit method)": [[33, "lambeq.backend.quantum.Bit.to_json"]], "to_json() (lambeq.backend.quantum.box method)": [[33, "lambeq.backend.quantum.Box.to_json"]], "to_json() (lambeq.backend.quantum.bra method)": [[33, "lambeq.backend.quantum.Bra.to_json"]], "to_json() (lambeq.backend.quantum.controlled method)": [[33, "lambeq.backend.quantum.Controlled.to_json"]], "to_json() (lambeq.backend.quantum.daggered method)": [[33, "lambeq.backend.quantum.Daggered.to_json"]], "to_json() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.to_json"]], "to_json() (lambeq.backend.quantum.discard method)": [[33, "lambeq.backend.quantum.Discard.to_json"]], "to_json() (lambeq.backend.quantum.encode method)": [[33, "lambeq.backend.quantum.Encode.to_json"]], "to_json() (lambeq.backend.quantum.ket method)": [[33, "lambeq.backend.quantum.Ket.to_json"]], "to_json() (lambeq.backend.quantum.layer method)": [[33, "lambeq.backend.quantum.Layer.to_json"]], "to_json() (lambeq.backend.quantum.measure method)": [[33, "lambeq.backend.quantum.Measure.to_json"]], "to_json() (lambeq.backend.quantum.mixedstate method)": [[33, "lambeq.backend.quantum.MixedState.to_json"]], "to_json() (lambeq.backend.quantum.parametrized method)": [[33, "lambeq.backend.quantum.Parametrized.to_json"]], "to_json() (lambeq.backend.quantum.rotation method)": [[33, "lambeq.backend.quantum.Rotation.to_json"]], "to_json() (lambeq.backend.quantum.rx method)": [[33, "lambeq.backend.quantum.Rx.to_json"]], "to_json() (lambeq.backend.quantum.ry method)": [[33, "lambeq.backend.quantum.Ry.to_json"]], "to_json() (lambeq.backend.quantum.rz method)": [[33, "lambeq.backend.quantum.Rz.to_json"]], "to_json() (lambeq.backend.quantum.scalar method)": [[33, "lambeq.backend.quantum.Scalar.to_json"]], "to_json() (lambeq.backend.quantum.selfconjugate method)": [[33, "lambeq.backend.quantum.SelfConjugate.to_json"]], "to_json() (lambeq.backend.quantum.sqrt method)": [[33, "lambeq.backend.quantum.Sqrt.to_json"]], "to_json() (lambeq.backend.quantum.swap method)": [[33, "lambeq.backend.quantum.Swap.to_json"]], "to_json() (lambeq.backend.quantum.ty method)": [[33, "lambeq.backend.quantum.Ty.to_json"]], "to_json() (lambeq.backend.tensor.box method)": [[33, "lambeq.backend.tensor.Box.to_json"]], "to_json() (lambeq.backend.tensor.cap method)": [[33, "lambeq.backend.tensor.Cap.to_json"]], "to_json() (lambeq.backend.tensor.cup method)": [[33, "lambeq.backend.tensor.Cup.to_json"]], "to_json() (lambeq.backend.tensor.daggered method)": [[33, "lambeq.backend.tensor.Daggered.to_json"]], "to_json() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.to_json"]], "to_json() (lambeq.backend.tensor.dim method)": [[33, "lambeq.backend.tensor.Dim.to_json"]], "to_json() (lambeq.backend.tensor.layer method)": [[33, "lambeq.backend.tensor.Layer.to_json"]], "to_json() (lambeq.backend.tensor.spider method)": [[33, "lambeq.backend.tensor.Spider.to_json"]], "to_json() (lambeq.backend.tensor.swap method)": [[33, "lambeq.backend.tensor.Swap.to_json"]], "to_left() (lambeq.backend.grammar.cap class method)": [[33, "lambeq.backend.grammar.Cap.to_left"]], "to_left() (lambeq.backend.grammar.cup class method)": [[33, "lambeq.backend.grammar.Cup.to_left"]], "to_left() (lambeq.backend.tensor.cap class method)": [[33, "lambeq.backend.tensor.Cap.to_left"]], "to_left() (lambeq.backend.tensor.cup class method)": [[33, "lambeq.backend.tensor.Cup.to_left"]], "to_pennylane() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.to_pennylane"]], "to_right() (lambeq.backend.grammar.cap class method)": [[33, "lambeq.backend.grammar.Cap.to_right"]], "to_right() (lambeq.backend.grammar.cup class method)": [[33, "lambeq.backend.grammar.Cup.to_right"]], "to_right() (lambeq.backend.tensor.cap class method)": [[33, "lambeq.backend.tensor.Cap.to_right"]], "to_right() (lambeq.backend.tensor.cup class method)": [[33, "lambeq.backend.tensor.Cup.to_right"]], "to_tk() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.to_tk"]], "to_tn() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.to_tn"]], "to_tn() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.to_tn"]], "transpose() (lambeq.backend.grammar.diagram method)": [[33, "lambeq.backend.grammar.Diagram.transpose"]], "transpose() (lambeq.backend.quantum.diagram method)": [[33, "lambeq.backend.quantum.Diagram.transpose"]], "transpose() (lambeq.backend.tensor.diagram method)": [[33, "lambeq.backend.tensor.Diagram.transpose"]], "type (lambeq.backend.grammar.spider attribute)": [[33, "lambeq.backend.grammar.Spider.type"]], "type (lambeq.backend.quantum.swap attribute)": [[33, "lambeq.backend.quantum.Swap.type"]], "type (lambeq.backend.tensor.spider attribute)": [[33, "lambeq.backend.tensor.Spider.type"]], "unpack() (lambeq.backend.grammar.layer method)": [[33, "lambeq.backend.grammar.Layer.unpack"]], "unpack() (lambeq.backend.quantum.layer method)": [[33, "lambeq.backend.quantum.Layer.unpack"]], "unpack() (lambeq.backend.tensor.layer method)": [[33, "lambeq.backend.tensor.Layer.unpack"]], "unwind() (lambeq.backend.grammar.box method)": [[33, "lambeq.backend.grammar.Box.unwind"]], "unwind() (lambeq.backend.grammar.cap method)": [[33, "lambeq.backend.grammar.Cap.unwind"]], "unwind() (lambeq.backend.grammar.cup method)": [[33, "lambeq.backend.grammar.Cup.unwind"]], "unwind() (lambeq.backend.grammar.daggered method)": [[33, "lambeq.backend.grammar.Daggered.unwind"]], "unwind() (lambeq.backend.grammar.spider method)": [[33, "lambeq.backend.grammar.Spider.unwind"]], "unwind() (lambeq.backend.grammar.swap method)": [[33, "lambeq.backend.grammar.Swap.unwind"]], "unwind() (lambeq.backend.grammar.ty method)": [[33, "lambeq.backend.grammar.Ty.unwind"]], "unwind() (lambeq.backend.grammar.word method)": [[33, "lambeq.backend.grammar.Word.unwind"]], "unwind() (lambeq.backend.quantum.anticonjugate method)": [[33, "lambeq.backend.quantum.AntiConjugate.unwind"]], "unwind() (lambeq.backend.quantum.bit method)": [[33, "lambeq.backend.quantum.Bit.unwind"]], "unwind() (lambeq.backend.quantum.box method)": [[33, "lambeq.backend.quantum.Box.unwind"]], "unwind() (lambeq.backend.quantum.bra method)": [[33, "lambeq.backend.quantum.Bra.unwind"]], "unwind() (lambeq.backend.quantum.controlled method)": [[33, "lambeq.backend.quantum.Controlled.unwind"]], "unwind() (lambeq.backend.quantum.daggered method)": [[33, "lambeq.backend.quantum.Daggered.unwind"]], "unwind() (lambeq.backend.quantum.discard method)": [[33, "lambeq.backend.quantum.Discard.unwind"]], "unwind() (lambeq.backend.quantum.encode method)": [[33, "lambeq.backend.quantum.Encode.unwind"]], "unwind() (lambeq.backend.quantum.ket method)": [[33, "lambeq.backend.quantum.Ket.unwind"]], "unwind() (lambeq.backend.quantum.measure method)": [[33, "lambeq.backend.quantum.Measure.unwind"]], "unwind() (lambeq.backend.quantum.mixedstate method)": [[33, "lambeq.backend.quantum.MixedState.unwind"]], "unwind() (lambeq.backend.quantum.parametrized method)": [[33, "lambeq.backend.quantum.Parametrized.unwind"]], "unwind() (lambeq.backend.quantum.rotation method)": [[33, "lambeq.backend.quantum.Rotation.unwind"]], "unwind() (lambeq.backend.quantum.rx method)": [[33, "lambeq.backend.quantum.Rx.unwind"]], "unwind() (lambeq.backend.quantum.ry method)": [[33, "lambeq.backend.quantum.Ry.unwind"]], "unwind() (lambeq.backend.quantum.rz method)": [[33, "lambeq.backend.quantum.Rz.unwind"]], "unwind() (lambeq.backend.quantum.scalar method)": [[33, "lambeq.backend.quantum.Scalar.unwind"]], "unwind() (lambeq.backend.quantum.selfconjugate method)": [[33, "lambeq.backend.quantum.SelfConjugate.unwind"]], "unwind() (lambeq.backend.quantum.sqrt method)": [[33, "lambeq.backend.quantum.Sqrt.unwind"]], "unwind() (lambeq.backend.quantum.swap method)": [[33, "lambeq.backend.quantum.Swap.unwind"]], "unwind() (lambeq.backend.quantum.ty method)": [[33, "lambeq.backend.quantum.Ty.unwind"]], "unwind() (lambeq.backend.tensor.box method)": [[33, "lambeq.backend.tensor.Box.unwind"]], "unwind() (lambeq.backend.tensor.cap method)": [[33, "lambeq.backend.tensor.Cap.unwind"]], "unwind() (lambeq.backend.tensor.cup method)": [[33, "lambeq.backend.tensor.Cup.unwind"]], "unwind() (lambeq.backend.tensor.daggered method)": [[33, "lambeq.backend.tensor.Daggered.unwind"]], "unwind() (lambeq.backend.tensor.dim method)": [[33, "lambeq.backend.tensor.Dim.unwind"]], "unwind() (lambeq.backend.tensor.spider method)": [[33, "lambeq.backend.tensor.Spider.unwind"]], "unwind() (lambeq.backend.tensor.swap method)": [[33, "lambeq.backend.tensor.Swap.unwind"]], "wire_endpoints (lambeq.backend.drawing.drawablediagram attribute)": [[33, "lambeq.backend.drawing.DrawableDiagram.wire_endpoints"]], "wires (lambeq.backend.drawing.drawablediagram attribute)": [[33, "lambeq.backend.drawing.DrawableDiagram.wires"]], "z (lambeq.backend.grammar.box attribute)": [[33, "lambeq.backend.grammar.Box.z"]], "z (lambeq.backend.grammar.cap attribute)": [[33, "lambeq.backend.grammar.Cap.z"]], "z (lambeq.backend.grammar.cup attribute)": [[33, "lambeq.backend.grammar.Cup.z"]], "z (lambeq.backend.grammar.daggered attribute)": [[33, "lambeq.backend.grammar.Daggered.z"]], "z (lambeq.backend.grammar.spider attribute)": [[33, "lambeq.backend.grammar.Spider.z"]], "z (lambeq.backend.grammar.swap attribute)": [[33, "lambeq.backend.grammar.Swap.z"]], "z (lambeq.backend.grammar.ty attribute)": [[33, "lambeq.backend.grammar.Ty.z"]], "z (lambeq.backend.grammar.word attribute)": [[33, "lambeq.backend.grammar.Word.z"]], "z (lambeq.backend.quantum.anticonjugate attribute)": [[33, "lambeq.backend.quantum.AntiConjugate.z"]], "z (lambeq.backend.quantum.bit attribute)": [[33, "lambeq.backend.quantum.Bit.z"]], "z (lambeq.backend.quantum.box attribute)": [[33, "lambeq.backend.quantum.Box.z"]], "z (lambeq.backend.quantum.bra attribute)": [[33, "lambeq.backend.quantum.Bra.z"]], "z (lambeq.backend.quantum.controlled attribute)": [[33, "lambeq.backend.quantum.Controlled.z"]], "z (lambeq.backend.quantum.daggered attribute)": [[33, "lambeq.backend.quantum.Daggered.z"]], "z (lambeq.backend.quantum.discard attribute)": [[33, "lambeq.backend.quantum.Discard.z"]], "z (lambeq.backend.quantum.encode attribute)": [[33, "lambeq.backend.quantum.Encode.z"]], "z (lambeq.backend.quantum.ket attribute)": [[33, "lambeq.backend.quantum.Ket.z"]], "z (lambeq.backend.quantum.measure attribute)": [[33, "lambeq.backend.quantum.Measure.z"]], "z (lambeq.backend.quantum.mixedstate attribute)": [[33, "lambeq.backend.quantum.MixedState.z"]], "z (lambeq.backend.quantum.parametrized attribute)": [[33, "lambeq.backend.quantum.Parametrized.z"]], "z (lambeq.backend.quantum.rotation attribute)": [[33, "lambeq.backend.quantum.Rotation.z"]], "z (lambeq.backend.quantum.rx attribute)": [[33, "lambeq.backend.quantum.Rx.z"]], "z (lambeq.backend.quantum.ry attribute)": [[33, "lambeq.backend.quantum.Ry.z"]], "z (lambeq.backend.quantum.rz attribute)": [[33, "lambeq.backend.quantum.Rz.z"]], "z (lambeq.backend.quantum.scalar attribute)": [[33, "lambeq.backend.quantum.Scalar.z"]], "z (lambeq.backend.quantum.selfconjugate attribute)": [[33, "lambeq.backend.quantum.SelfConjugate.z"]], "z (lambeq.backend.quantum.sqrt attribute)": [[33, "lambeq.backend.quantum.Sqrt.z"]], "z (lambeq.backend.quantum.swap attribute)": [[33, "lambeq.backend.quantum.Swap.z"]], "z (lambeq.backend.quantum.ty attribute)": [[33, "lambeq.backend.quantum.Ty.z"]], "z (lambeq.backend.tensor.box attribute)": [[33, "lambeq.backend.tensor.Box.z"]], "z (lambeq.backend.tensor.cap attribute)": [[33, "lambeq.backend.tensor.Cap.z"]], "z (lambeq.backend.tensor.cup attribute)": [[33, "lambeq.backend.tensor.Cup.z"]], "z (lambeq.backend.tensor.daggered attribute)": [[33, "lambeq.backend.tensor.Daggered.z"]], "z (lambeq.backend.tensor.dim attribute)": [[33, "lambeq.backend.tensor.Dim.z"]], "z (lambeq.backend.tensor.spider attribute)": [[33, "lambeq.backend.tensor.Spider.z"]], "z (lambeq.backend.tensor.swap attribute)": [[33, "lambeq.backend.tensor.Swap.z"]], "bertforchartclassification (class in lambeq.bobcat)": [[34, "lambeq.bobcat.BertForChartClassification"]], "category (class in lambeq.bobcat)": [[34, "lambeq.bobcat.Category"]], "chartparser (class in lambeq.bobcat)": [[34, "lambeq.bobcat.ChartParser"]], "grammar (class in lambeq.bobcat)": [[34, "lambeq.bobcat.Grammar"]], "parsetree (class in lambeq.bobcat)": [[34, "lambeq.bobcat.ParseTree"]], "sentence (class in lambeq.bobcat)": [[34, "lambeq.bobcat.Sentence"]], "supertag (class in lambeq.bobcat)": [[34, "lambeq.bobcat.Supertag"]], "t_destination (lambeq.bobcat.bertforchartclassification attribute)": [[34, "lambeq.bobcat.BertForChartClassification.T_destination"]], "tagger (class in lambeq.bobcat)": [[34, "lambeq.bobcat.Tagger"]], "__call__() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.__call__"]], "__call__() (lambeq.bobcat.chartparser method)": [[34, "lambeq.bobcat.ChartParser.__call__"]], "__call__() (lambeq.bobcat.tagger method)": [[34, "lambeq.bobcat.Tagger.__call__"]], "__init__() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.__init__"]], "__init__() (lambeq.bobcat.category method)": [[34, "lambeq.bobcat.Category.__init__"]], "__init__() (lambeq.bobcat.chartparser method)": [[34, "lambeq.bobcat.ChartParser.__init__"]], "__init__() (lambeq.bobcat.grammar method)": [[34, "lambeq.bobcat.Grammar.__init__"]], "__init__() (lambeq.bobcat.parsetree method)": [[34, "lambeq.bobcat.ParseTree.__init__"]], "__init__() (lambeq.bobcat.sentence method)": [[34, "lambeq.bobcat.Sentence.__init__"]], "__init__() (lambeq.bobcat.supertag method)": [[34, "lambeq.bobcat.Supertag.__init__"]], "__init__() (lambeq.bobcat.tagger method)": [[34, "lambeq.bobcat.Tagger.__init__"]], "active_adapter() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.active_adapter"]], "active_adapters() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.active_adapters"]], "add_adapter() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.add_adapter"]], "add_memory_hooks() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.add_memory_hooks"]], "add_model_tags() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.add_model_tags"]], "add_module() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.add_module"]], "apply() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.apply"]], "argument (lambeq.bobcat.category attribute)": [[34, "lambeq.bobcat.Category.argument"]], "assisted_decoding() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.assisted_decoding"]], "atom (lambeq.bobcat.category attribute)": [[34, "lambeq.bobcat.Category.atom"]], "base_model (lambeq.bobcat.bertforchartclassification property)": [[34, "lambeq.bobcat.BertForChartClassification.base_model"]], "base_model_prefix (lambeq.bobcat.bertforchartclassification attribute)": [[34, "lambeq.bobcat.BertForChartClassification.base_model_prefix"]], "beam_sample() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.beam_sample"]], "beam_search() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.beam_search"]], "bfloat16() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.bfloat16"]], "binary_rules (lambeq.bobcat.grammar attribute)": [[34, "lambeq.bobcat.Grammar.binary_rules"]], "buffers() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.buffers"]], "bwd (lambeq.bobcat.category property)": [[34, "lambeq.bobcat.Category.bwd"]], "bwd_comp (lambeq.bobcat.parsetree property)": [[34, "lambeq.bobcat.ParseTree.bwd_comp"]], "calc_score_binary() (lambeq.bobcat.chartparser method)": [[34, "lambeq.bobcat.ChartParser.calc_score_binary"]], "calc_score_unary() (lambeq.bobcat.chartparser method)": [[34, "lambeq.bobcat.ChartParser.calc_score_unary"]], "call_super_init (lambeq.bobcat.bertforchartclassification attribute)": [[34, "lambeq.bobcat.BertForChartClassification.call_super_init"]], "can_generate() (lambeq.bobcat.bertforchartclassification class method)": [[34, "lambeq.bobcat.BertForChartClassification.can_generate"]], "cat (lambeq.bobcat.parsetree attribute)": [[34, "lambeq.bobcat.ParseTree.cat"]], "categories (lambeq.bobcat.grammar attribute)": [[34, "lambeq.bobcat.Grammar.categories"]], "category (lambeq.bobcat.supertag attribute)": [[34, "lambeq.bobcat.Supertag.category"]], "children() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.children"]], "compile() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.compile"]], "compute_transition_scores() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.compute_transition_scores"]], "config_class (lambeq.bobcat.bertforchartclassification attribute)": [[34, "lambeq.bobcat.BertForChartClassification.config_class"]], "constrained_beam_search() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.constrained_beam_search"]], "contrastive_search() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.contrastive_search"]], "coordinated (lambeq.bobcat.parsetree property)": [[34, "lambeq.bobcat.ParseTree.coordinated"]], "coordinated_or_type_raised (lambeq.bobcat.parsetree property)": [[34, "lambeq.bobcat.ParseTree.coordinated_or_type_raised"]], "cpu() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.cpu"]], "create_extended_attention_mask_for_decoder() (lambeq.bobcat.bertforchartclassification static method)": [[34, "lambeq.bobcat.BertForChartClassification.create_extended_attention_mask_for_decoder"]], "cuda() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.cuda"]], "deps (lambeq.bobcat.parsetree property)": [[34, "lambeq.bobcat.ParseTree.deps"]], "deps_and_tags (lambeq.bobcat.parsetree property)": [[34, "lambeq.bobcat.ParseTree.deps_and_tags"]], "device (lambeq.bobcat.bertforchartclassification property)": [[34, "lambeq.bobcat.BertForChartClassification.device"]], "dir (lambeq.bobcat.category attribute)": [[34, "lambeq.bobcat.Category.dir"]], "disable_adapters() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.disable_adapters"]], "disable_input_require_grads() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.disable_input_require_grads"]], "double() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.double"]], "dtype (lambeq.bobcat.bertforchartclassification property)": [[34, "lambeq.bobcat.BertForChartClassification.dtype"]], "dummy_inputs (lambeq.bobcat.bertforchartclassification property)": [[34, "lambeq.bobcat.BertForChartClassification.dummy_inputs"]], "dump_patches (lambeq.bobcat.bertforchartclassification attribute)": [[34, "lambeq.bobcat.BertForChartClassification.dump_patches"]], "enable_adapters() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.enable_adapters"]], "enable_input_require_grads() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.enable_input_require_grads"]], "estimate_tokens() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.estimate_tokens"]], "eval() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.eval"]], "extra_repr() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.extra_repr"]], "feature (lambeq.bobcat.category attribute)": [[34, "lambeq.bobcat.Category.feature"]], "filled_deps (lambeq.bobcat.parsetree attribute)": [[34, "lambeq.bobcat.ParseTree.filled_deps"]], "filter_root() (lambeq.bobcat.chartparser method)": [[34, "lambeq.bobcat.ChartParser.filter_root"]], "float() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.float"]], "floating_point_ops() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.floating_point_ops"]], "forward() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.forward"]], "framework (lambeq.bobcat.bertforchartclassification property)": [[34, "lambeq.bobcat.BertForChartClassification.framework"]], "from_pretrained() (lambeq.bobcat.bertforchartclassification class method)": [[34, "lambeq.bobcat.BertForChartClassification.from_pretrained"]], "fwd (lambeq.bobcat.category property)": [[34, "lambeq.bobcat.Category.fwd"]], "fwd_comp (lambeq.bobcat.parsetree property)": [[34, "lambeq.bobcat.ParseTree.fwd_comp"]], "generate() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.generate"]], "get_adapter_state_dict() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.get_adapter_state_dict"]], "get_buffer() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.get_buffer"]], "get_extended_attention_mask() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.get_extended_attention_mask"]], "get_extra_state() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.get_extra_state"]], "get_head_mask() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.get_head_mask"]], "get_input_embeddings() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.get_input_embeddings"]], "get_memory_footprint() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.get_memory_footprint"]], "get_output_embeddings() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.get_output_embeddings"]], "get_parameter() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.get_parameter"]], "get_position_embeddings() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.get_position_embeddings"]], "get_span_score() (lambeq.bobcat.chartparser method)": [[34, "lambeq.bobcat.ChartParser.get_span_score"]], "get_submodule() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.get_submodule"]], "gradient_checkpointing_disable() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.gradient_checkpointing_disable"]], "gradient_checkpointing_enable() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.gradient_checkpointing_enable"]], "greedy_search() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.greedy_search"]], "group_beam_search() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.group_beam_search"]], "half() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.half"]], "init_weights() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.init_weights"]], "input_supertags (lambeq.bobcat.sentence attribute)": [[34, "lambeq.bobcat.Sentence.input_supertags"]], "invert_attention_mask() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.invert_attention_mask"]], "ipu() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.ipu"]], "is_gradient_checkpointing (lambeq.bobcat.bertforchartclassification property)": [[34, "lambeq.bobcat.BertForChartClassification.is_gradient_checkpointing"]], "is_leaf (lambeq.bobcat.parsetree property)": [[34, "lambeq.bobcat.ParseTree.is_leaf"]], "is_parallelizable (lambeq.bobcat.bertforchartclassification attribute)": [[34, "lambeq.bobcat.BertForChartClassification.is_parallelizable"]], "lambeq.bobcat": [[34, "module-lambeq.bobcat"]], "left (lambeq.bobcat.parsetree attribute)": [[34, "lambeq.bobcat.ParseTree.left"]], "load() (lambeq.bobcat.grammar class method)": [[34, "lambeq.bobcat.Grammar.load"]], "load_adapter() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.load_adapter"]], "load_state_dict() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.load_state_dict"]], "load_tf_weights() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.load_tf_weights"]], "main_input_name (lambeq.bobcat.bertforchartclassification attribute)": [[34, "lambeq.bobcat.BertForChartClassification.main_input_name"]], "matches() (lambeq.bobcat.category method)": [[34, "lambeq.bobcat.Category.matches"]], "model_tags (lambeq.bobcat.bertforchartclassification attribute)": [[34, "lambeq.bobcat.BertForChartClassification.model_tags"]], "modules() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.modules"]], "named_buffers() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.named_buffers"]], "named_children() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.named_children"]], "named_modules() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.named_modules"]], "named_parameters() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.named_parameters"]], "num_parameters() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.num_parameters"]], "parameters() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.parameters"]], "parse() (lambeq.bobcat.category static method)": [[34, "lambeq.bobcat.Category.parse"]], "parse() (lambeq.bobcat.tagger method)": [[34, "lambeq.bobcat.Tagger.parse"]], "post_init() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.post_init"]], "prepare_inputs() (lambeq.bobcat.tagger method)": [[34, "lambeq.bobcat.Tagger.prepare_inputs"]], "prepare_inputs_for_generation() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.prepare_inputs_for_generation"]], "probability (lambeq.bobcat.supertag attribute)": [[34, "lambeq.bobcat.Supertag.probability"]], "prune_heads() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.prune_heads"]], "push_to_hub() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.push_to_hub"]], "register_backward_hook() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.register_backward_hook"]], "register_buffer() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.register_buffer"]], "register_for_auto_class() (lambeq.bobcat.bertforchartclassification class method)": [[34, "lambeq.bobcat.BertForChartClassification.register_for_auto_class"]], "register_forward_hook() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.register_forward_hook"]], "register_forward_pre_hook() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.register_forward_pre_hook"]], "register_full_backward_hook() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.register_full_backward_hook"]], "register_full_backward_pre_hook() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.register_load_state_dict_post_hook"]], "register_module() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.register_module"]], "register_parameter() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.register_parameter"]], "register_state_dict_pre_hook() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.register_state_dict_pre_hook"]], "relation (lambeq.bobcat.category attribute)": [[34, "lambeq.bobcat.Category.relation"]], "requires_grad_() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.requires_grad_"]], "reset_memory_hooks_state() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.reset_memory_hooks_state"]], "resize_position_embeddings() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.resize_position_embeddings"]], "resize_token_embeddings() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.resize_token_embeddings"]], "result (lambeq.bobcat.category attribute)": [[34, "lambeq.bobcat.Category.result"]], "retrieve_modules_from_names() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.retrieve_modules_from_names"]], "reverse_bettertransformer() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.reverse_bettertransformer"]], "right (lambeq.bobcat.parsetree attribute)": [[34, "lambeq.bobcat.ParseTree.right"]], "rule (lambeq.bobcat.parsetree attribute)": [[34, "lambeq.bobcat.ParseTree.rule"]], "sample() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.sample"]], "save() (lambeq.bobcat.grammar method)": [[34, "lambeq.bobcat.Grammar.save"]], "save_pretrained() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.save_pretrained"]], "score (lambeq.bobcat.parsetree attribute)": [[34, "lambeq.bobcat.ParseTree.score"]], "set_adapter() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.set_adapter"]], "set_extra_state() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.set_extra_state"]], "set_input_embeddings() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.set_input_embeddings"]], "set_root_cats() (lambeq.bobcat.chartparser method)": [[34, "lambeq.bobcat.ChartParser.set_root_cats"]], "share_memory() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.share_memory"]], "slash() (lambeq.bobcat.category method)": [[34, "lambeq.bobcat.Category.slash"]], "span_scores (lambeq.bobcat.sentence attribute)": [[34, "lambeq.bobcat.Sentence.span_scores"]], "state_dict() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.state_dict"]], "supports_gradient_checkpointing (lambeq.bobcat.bertforchartclassification attribute)": [[34, "lambeq.bobcat.BertForChartClassification.supports_gradient_checkpointing"]], "tie_weights() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.tie_weights"]], "to() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.to"]], "to_bettertransformer() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.to_bettertransformer"]], "to_empty() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.to_empty"]], "train() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.train"]], "training (lambeq.bobcat.bertforchartclassification attribute)": [[34, "lambeq.bobcat.BertForChartClassification.training"]], "translate() (lambeq.bobcat.category method)": [[34, "lambeq.bobcat.Category.translate"]], "type() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.type"]], "type_changing_rules (lambeq.bobcat.grammar attribute)": [[34, "lambeq.bobcat.Grammar.type_changing_rules"]], "type_raising_dep_var (lambeq.bobcat.category attribute)": [[34, "lambeq.bobcat.Category.type_raising_dep_var"]], "type_raising_rules (lambeq.bobcat.grammar attribute)": [[34, "lambeq.bobcat.Grammar.type_raising_rules"]], "unfilled_deps (lambeq.bobcat.parsetree attribute)": [[34, "lambeq.bobcat.ParseTree.unfilled_deps"]], "var (lambeq.bobcat.category attribute)": [[34, "lambeq.bobcat.Category.var"]], "var_map (lambeq.bobcat.parsetree attribute)": [[34, "lambeq.bobcat.ParseTree.var_map"]], "variable (lambeq.bobcat.parsetree property)": [[34, "lambeq.bobcat.ParseTree.variable"]], "warn_if_padding_and_no_attention_mask() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.warn_if_padding_and_no_attention_mask"]], "word (lambeq.bobcat.parsetree property)": [[34, "lambeq.bobcat.ParseTree.word"]], "words (lambeq.bobcat.sentence attribute)": [[34, "lambeq.bobcat.Sentence.words"]], "xpu() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.xpu"]], "zero_grad() (lambeq.bobcat.bertforchartclassification method)": [[34, "lambeq.bobcat.BertForChartClassification.zero_grad"]], "coordinationrewriterule (class in lambeq.rewrite)": [[35, "lambeq.rewrite.CoordinationRewriteRule"]], "curryrewriterule (class in lambeq.rewrite)": [[35, "lambeq.rewrite.CurryRewriteRule"]], "diagramrewriter (class in lambeq.rewrite)": [[35, "lambeq.rewrite.DiagramRewriter"]], "removecupsrewriter (class in lambeq.rewrite)": [[35, "lambeq.rewrite.RemoveCupsRewriter"]], "removeswapsrewriter (class in lambeq.rewrite)": [[35, "lambeq.rewrite.RemoveSwapsRewriter"]], "rewriterule (class in lambeq.rewrite)": [[35, "lambeq.rewrite.RewriteRule"]], "rewriter (class in lambeq.rewrite)": [[35, "lambeq.rewrite.Rewriter"]], "simplerewriterule (class in lambeq.rewrite)": [[35, "lambeq.rewrite.SimpleRewriteRule"]], "unifycodomainrewriter (class in lambeq.rewrite)": [[35, "lambeq.rewrite.UnifyCodomainRewriter"]], "unknownwordsrewriterule (class in lambeq.rewrite)": [[35, "lambeq.rewrite.UnknownWordsRewriteRule"]], "__call__() (lambeq.rewrite.coordinationrewriterule method)": [[35, "lambeq.rewrite.CoordinationRewriteRule.__call__"]], "__call__() (lambeq.rewrite.curryrewriterule method)": [[35, "lambeq.rewrite.CurryRewriteRule.__call__"]], "__call__() (lambeq.rewrite.diagramrewriter method)": [[35, "lambeq.rewrite.DiagramRewriter.__call__"]], "__call__() (lambeq.rewrite.removecupsrewriter method)": [[35, "lambeq.rewrite.RemoveCupsRewriter.__call__"]], "__call__() (lambeq.rewrite.removeswapsrewriter method)": [[35, "lambeq.rewrite.RemoveSwapsRewriter.__call__"]], "__call__() (lambeq.rewrite.rewriterule method)": [[35, "lambeq.rewrite.RewriteRule.__call__"]], "__call__() (lambeq.rewrite.rewriter method)": [[35, "lambeq.rewrite.Rewriter.__call__"]], "__call__() (lambeq.rewrite.simplerewriterule method)": [[35, "lambeq.rewrite.SimpleRewriteRule.__call__"]], "__call__() (lambeq.rewrite.unifycodomainrewriter method)": [[35, "lambeq.rewrite.UnifyCodomainRewriter.__call__"]], "__call__() (lambeq.rewrite.unknownwordsrewriterule method)": [[35, "lambeq.rewrite.UnknownWordsRewriteRule.__call__"]], "__init__() (lambeq.rewrite.coordinationrewriterule method)": [[35, "lambeq.rewrite.CoordinationRewriteRule.__init__"]], "__init__() (lambeq.rewrite.curryrewriterule method)": [[35, "lambeq.rewrite.CurryRewriteRule.__init__"]], "__init__() (lambeq.rewrite.rewriter method)": [[35, "lambeq.rewrite.Rewriter.__init__"]], "__init__() (lambeq.rewrite.simplerewriterule method)": [[35, "lambeq.rewrite.SimpleRewriteRule.__init__"]], "__init__() (lambeq.rewrite.unifycodomainrewriter method)": [[35, "lambeq.rewrite.UnifyCodomainRewriter.__init__"]], "__init__() (lambeq.rewrite.unknownwordsrewriterule method)": [[35, "lambeq.rewrite.UnknownWordsRewriteRule.__init__"]], "add_rules() (lambeq.rewrite.rewriter method)": [[35, "lambeq.rewrite.Rewriter.add_rules"]], "available_rules() (lambeq.rewrite.rewriter class method)": [[35, "lambeq.rewrite.Rewriter.available_rules"]], "from_diagrams() (lambeq.rewrite.unknownwordsrewriterule class method)": [[35, "lambeq.rewrite.UnknownWordsRewriteRule.from_diagrams"]], "lambeq.rewrite": [[35, "module-lambeq.rewrite"]], "matches() (lambeq.rewrite.coordinationrewriterule method)": [[35, "lambeq.rewrite.CoordinationRewriteRule.matches"]], "matches() (lambeq.rewrite.curryrewriterule method)": [[35, "lambeq.rewrite.CurryRewriteRule.matches"]], "matches() (lambeq.rewrite.diagramrewriter method)": [[35, "lambeq.rewrite.DiagramRewriter.matches"]], "matches() (lambeq.rewrite.removecupsrewriter method)": [[35, "lambeq.rewrite.RemoveCupsRewriter.matches"]], "matches() (lambeq.rewrite.removeswapsrewriter method)": [[35, "lambeq.rewrite.RemoveSwapsRewriter.matches"]], "matches() (lambeq.rewrite.rewriterule method)": [[35, "lambeq.rewrite.RewriteRule.matches"]], "matches() (lambeq.rewrite.simplerewriterule method)": [[35, "lambeq.rewrite.SimpleRewriteRule.matches"]], "matches() (lambeq.rewrite.unifycodomainrewriter method)": [[35, "lambeq.rewrite.UnifyCodomainRewriter.matches"]], "matches() (lambeq.rewrite.unknownwordsrewriterule method)": [[35, "lambeq.rewrite.UnknownWordsRewriteRule.matches"]], "output_type (lambeq.rewrite.unifycodomainrewriter attribute)": [[35, "lambeq.rewrite.UnifyCodomainRewriter.output_type"]], "placeholder() (lambeq.rewrite.simplerewriterule class method)": [[35, "lambeq.rewrite.SimpleRewriteRule.placeholder"]], "rewrite() (lambeq.rewrite.coordinationrewriterule method)": [[35, "lambeq.rewrite.CoordinationRewriteRule.rewrite"]], "rewrite() (lambeq.rewrite.curryrewriterule method)": [[35, "lambeq.rewrite.CurryRewriteRule.rewrite"]], "rewrite() (lambeq.rewrite.diagramrewriter method)": [[35, "lambeq.rewrite.DiagramRewriter.rewrite"]], "rewrite() (lambeq.rewrite.removecupsrewriter method)": [[35, "lambeq.rewrite.RemoveCupsRewriter.rewrite"]], "rewrite() (lambeq.rewrite.removeswapsrewriter method)": [[35, "lambeq.rewrite.RemoveSwapsRewriter.rewrite"]], "rewrite() (lambeq.rewrite.rewriterule method)": [[35, "lambeq.rewrite.RewriteRule.rewrite"]], "rewrite() (lambeq.rewrite.simplerewriterule method)": [[35, "lambeq.rewrite.SimpleRewriteRule.rewrite"]], "rewrite() (lambeq.rewrite.unifycodomainrewriter method)": [[35, "lambeq.rewrite.UnifyCodomainRewriter.rewrite"]], "rewrite() (lambeq.rewrite.unknownwordsrewriterule method)": [[35, "lambeq.rewrite.UnknownWordsRewriteRule.rewrite"]], "backward_application (lambeq.text2diagram.ccgrule attribute)": [[36, "lambeq.text2diagram.CCGRule.BACKWARD_APPLICATION"]], "backward_composition (lambeq.text2diagram.ccgrule attribute)": [[36, "lambeq.text2diagram.CCGRule.BACKWARD_COMPOSITION"]], "backward_crossed_composition (lambeq.text2diagram.ccgrule attribute)": [[36, "lambeq.text2diagram.CCGRule.BACKWARD_CROSSED_COMPOSITION"]], "backward_type_raising (lambeq.text2diagram.ccgrule attribute)": [[36, "lambeq.text2diagram.CCGRule.BACKWARD_TYPE_RAISING"]], "bobcatparseerror": [[36, "lambeq.text2diagram.BobcatParseError"], [52, "lambeq.BobcatParseError"]], "bobcatparser (class in lambeq.text2diagram)": [[36, "lambeq.text2diagram.BobcatParser"]], "ccgbankparseerror": [[36, "lambeq.text2diagram.CCGBankParseError"], [52, "lambeq.CCGBankParseError"]], "ccgbankparser (class in lambeq.text2diagram)": [[36, "lambeq.text2diagram.CCGBankParser"]], "ccgparser (class in lambeq.text2diagram)": [[36, "lambeq.text2diagram.CCGParser"]], "ccgrule (class in lambeq.text2diagram)": [[36, "lambeq.text2diagram.CCGRule"]], "ccgruleuseerror": [[36, "lambeq.text2diagram.CCGRuleUseError"], [52, "lambeq.CCGRuleUseError"]], "ccgtree (class in lambeq.text2diagram)": [[36, "lambeq.text2diagram.CCGTree"]], "ccgtype (class in lambeq.text2diagram)": [[36, "lambeq.text2diagram.CCGType"]], "conjunction (lambeq.text2diagram.ccgrule attribute)": [[36, "lambeq.text2diagram.CCGRule.CONJUNCTION"]], "conjunction (lambeq.text2diagram.ccgtype attribute)": [[36, "lambeq.text2diagram.CCGType.CONJUNCTION"]], "conj_tag (lambeq.text2diagram.ccgtype attribute)": [[36, "lambeq.text2diagram.CCGType.CONJ_TAG"]], "depccgparseerror": [[36, "lambeq.text2diagram.DepCCGParseError"], [52, "lambeq.DepCCGParseError"]], "depccgparser (class in lambeq.text2diagram)": [[36, "lambeq.text2diagram.DepCCGParser"]], "forward_application (lambeq.text2diagram.ccgrule attribute)": [[36, "lambeq.text2diagram.CCGRule.FORWARD_APPLICATION"]], "forward_composition (lambeq.text2diagram.ccgrule attribute)": [[36, "lambeq.text2diagram.CCGRule.FORWARD_COMPOSITION"]], "forward_crossed_composition (lambeq.text2diagram.ccgrule attribute)": [[36, "lambeq.text2diagram.CCGRule.FORWARD_CROSSED_COMPOSITION"]], "forward_type_raising (lambeq.text2diagram.ccgrule attribute)": [[36, "lambeq.text2diagram.CCGRule.FORWARD_TYPE_RAISING"]], "generalized_backward_composition (lambeq.text2diagram.ccgrule attribute)": [[36, "lambeq.text2diagram.CCGRule.GENERALIZED_BACKWARD_COMPOSITION"]], "generalized_backward_crossed_composition (lambeq.text2diagram.ccgrule attribute)": [[36, "lambeq.text2diagram.CCGRule.GENERALIZED_BACKWARD_CROSSED_COMPOSITION"]], "generalized_forward_composition (lambeq.text2diagram.ccgrule attribute)": [[36, "lambeq.text2diagram.CCGRule.GENERALIZED_FORWARD_COMPOSITION"]], "generalized_forward_crossed_composition (lambeq.text2diagram.ccgrule attribute)": [[36, "lambeq.text2diagram.CCGRule.GENERALIZED_FORWARD_CROSSED_COMPOSITION"]], "height": [[36, "term-HEIGHT"], [52, "term-HEIGHT"]], "height (lambeq.text2diagram.treereadermode attribute)": [[36, "lambeq.text2diagram.TreeReaderMode.HEIGHT"]], "lexical (lambeq.text2diagram.ccgrule attribute)": [[36, "lambeq.text2diagram.CCGRule.LEXICAL"]], "linearreader (class in lambeq.text2diagram)": [[36, "lambeq.text2diagram.LinearReader"]], "noun (lambeq.text2diagram.ccgtype attribute)": [[36, "lambeq.text2diagram.CCGType.NOUN"]], "noun_phrase (lambeq.text2diagram.ccgtype attribute)": [[36, "lambeq.text2diagram.CCGType.NOUN_PHRASE"]], "no_type": [[36, "term-NO_TYPE"], [52, "term-NO_TYPE"]], "no_type (lambeq.text2diagram.treereadermode attribute)": [[36, "lambeq.text2diagram.TreeReaderMode.NO_TYPE"]], "prepositional_phrase (lambeq.text2diagram.ccgtype attribute)": [[36, "lambeq.text2diagram.CCGType.PREPOSITIONAL_PHRASE"]], "punctuation (lambeq.text2diagram.ccgtype attribute)": [[36, "lambeq.text2diagram.CCGType.PUNCTUATION"]], "remove_punctuation_left (lambeq.text2diagram.ccgrule attribute)": [[36, "lambeq.text2diagram.CCGRule.REMOVE_PUNCTUATION_LEFT"]], "remove_punctuation_right (lambeq.text2diagram.ccgrule attribute)": [[36, "lambeq.text2diagram.CCGRule.REMOVE_PUNCTUATION_RIGHT"]], "rule_only": [[36, "term-RULE_ONLY"], [52, "term-RULE_ONLY"]], "rule_only (lambeq.text2diagram.treereadermode attribute)": [[36, "lambeq.text2diagram.TreeReaderMode.RULE_ONLY"]], "rule_type": [[36, "term-RULE_TYPE"], [52, "term-RULE_TYPE"]], "rule_type (lambeq.text2diagram.treereadermode attribute)": [[36, "lambeq.text2diagram.TreeReaderMode.RULE_TYPE"]], "reader (class in lambeq.text2diagram)": [[36, "lambeq.text2diagram.Reader"]], "sentence (lambeq.text2diagram.ccgtype attribute)": [[36, "lambeq.text2diagram.CCGType.SENTENCE"]], "treereader (class in lambeq.text2diagram)": [[36, "lambeq.text2diagram.TreeReader"]], "treereadermode (class in lambeq.text2diagram)": [[36, "lambeq.text2diagram.TreeReaderMode"]], "unary (lambeq.text2diagram.ccgrule attribute)": [[36, "lambeq.text2diagram.CCGRule.UNARY"]], "unknown (lambeq.text2diagram.ccgrule attribute)": [[36, "lambeq.text2diagram.CCGRule.UNKNOWN"]], "webparseerror": [[36, "lambeq.text2diagram.WebParseError"], [52, "lambeq.WebParseError"]], "webparser (class in lambeq.text2diagram)": [[36, "lambeq.text2diagram.WebParser"]], "__call__() (lambeq.text2diagram.ccgrule method)": [[36, "lambeq.text2diagram.CCGRule.__call__"]], "__init__() (lambeq.text2diagram.bobcatparseerror method)": [[36, "lambeq.text2diagram.BobcatParseError.__init__"]], "__init__() (lambeq.text2diagram.bobcatparser method)": [[36, "lambeq.text2diagram.BobcatParser.__init__"]], "__init__() (lambeq.text2diagram.ccgbankparseerror method)": [[36, "lambeq.text2diagram.CCGBankParseError.__init__"]], "__init__() (lambeq.text2diagram.ccgbankparser method)": [[36, "lambeq.text2diagram.CCGBankParser.__init__"]], "__init__() (lambeq.text2diagram.ccgparser method)": [[36, "lambeq.text2diagram.CCGParser.__init__"]], "__init__() (lambeq.text2diagram.ccgruleuseerror method)": [[36, "lambeq.text2diagram.CCGRuleUseError.__init__"]], "__init__() (lambeq.text2diagram.ccgtree method)": [[36, "lambeq.text2diagram.CCGTree.__init__"]], "__init__() (lambeq.text2diagram.ccgtype method)": [[36, "lambeq.text2diagram.CCGType.__init__"]], "__init__() (lambeq.text2diagram.depccgparseerror method)": [[36, "lambeq.text2diagram.DepCCGParseError.__init__"]], "__init__() (lambeq.text2diagram.depccgparser method)": [[36, "lambeq.text2diagram.DepCCGParser.__init__"]], "__init__() (lambeq.text2diagram.linearreader method)": [[36, "lambeq.text2diagram.LinearReader.__init__"]], "__init__() (lambeq.text2diagram.treereader method)": [[36, "lambeq.text2diagram.TreeReader.__init__"]], "__init__() (lambeq.text2diagram.webparseerror method)": [[36, "lambeq.text2diagram.WebParseError.__init__"]], "__init__() (lambeq.text2diagram.webparser method)": [[36, "lambeq.text2diagram.WebParser.__init__"]], "apply() (lambeq.text2diagram.ccgrule method)": [[36, "lambeq.text2diagram.CCGRule.apply"]], "args (lambeq.text2diagram.bobcatparseerror attribute)": [[36, "lambeq.text2diagram.BobcatParseError.args"]], "args (lambeq.text2diagram.ccgbankparseerror attribute)": [[36, "lambeq.text2diagram.CCGBankParseError.args"]], "args (lambeq.text2diagram.ccgruleuseerror attribute)": [[36, "lambeq.text2diagram.CCGRuleUseError.args"]], "args (lambeq.text2diagram.depccgparseerror attribute)": [[36, "lambeq.text2diagram.DepCCGParseError.args"]], "args (lambeq.text2diagram.webparseerror attribute)": [[36, "lambeq.text2diagram.WebParseError.args"]], "argument (lambeq.text2diagram.ccgtype property)": [[36, "lambeq.text2diagram.CCGType.argument"]], "available_models() (lambeq.text2diagram.bobcatparser static method)": [[36, "lambeq.text2diagram.BobcatParser.available_models"]], "available_modes() (lambeq.text2diagram.treereader class method)": [[36, "lambeq.text2diagram.TreeReader.available_modes"]], "bag_of_words_reader (in module lambeq.text2diagram)": [[36, "lambeq.text2diagram.bag_of_words_reader"]], "characters_written (lambeq.text2diagram.webparseerror attribute)": [[36, "lambeq.text2diagram.WebParseError.characters_written"]], "check_match() (lambeq.text2diagram.ccgrule method)": [[36, "lambeq.text2diagram.CCGRule.check_match"]], "child (lambeq.text2diagram.ccgtree property)": [[36, "lambeq.text2diagram.CCGTree.child"]], "collapse_noun_phrases() (lambeq.text2diagram.ccgtree method)": [[36, "lambeq.text2diagram.CCGTree.collapse_noun_phrases"]], "cups_reader (in module lambeq.text2diagram)": [[36, "lambeq.text2diagram.cups_reader"]], "deriv() (lambeq.text2diagram.ccgtree method)": [[36, "lambeq.text2diagram.CCGTree.deriv"]], "direction (lambeq.text2diagram.ccgtype property)": [[36, "lambeq.text2diagram.CCGType.direction"]], "errno (lambeq.text2diagram.webparseerror attribute)": [[36, "lambeq.text2diagram.WebParseError.errno"]], "filename (lambeq.text2diagram.webparseerror attribute)": [[36, "lambeq.text2diagram.WebParseError.filename"]], "filename2 (lambeq.text2diagram.webparseerror attribute)": [[36, "lambeq.text2diagram.WebParseError.filename2"]], "from_json() (lambeq.text2diagram.ccgtree class method)": [[36, "lambeq.text2diagram.CCGTree.from_json"]], "infer_rule() (lambeq.text2diagram.ccgrule class method)": [[36, "lambeq.text2diagram.CCGRule.infer_rule"]], "is_atomic (lambeq.text2diagram.ccgtype attribute)": [[36, "lambeq.text2diagram.CCGType.is_atomic"]], "is_complex (lambeq.text2diagram.ccgtype attribute)": [[36, "lambeq.text2diagram.CCGType.is_complex"]], "is_conjoinable (lambeq.text2diagram.ccgtype property)": [[36, "lambeq.text2diagram.CCGType.is_conjoinable"]], "is_empty (lambeq.text2diagram.ccgtype attribute)": [[36, "lambeq.text2diagram.CCGType.is_empty"]], "is_over (lambeq.text2diagram.ccgtype attribute)": [[36, "lambeq.text2diagram.CCGType.is_over"]], "is_under (lambeq.text2diagram.ccgtype attribute)": [[36, "lambeq.text2diagram.CCGType.is_under"]], "lambeq.text2diagram": [[36, "module-lambeq.text2diagram"]], "left (lambeq.text2diagram.ccgtree property)": [[36, "lambeq.text2diagram.CCGTree.left"]], "left (lambeq.text2diagram.ccgtype property)": [[36, "lambeq.text2diagram.CCGType.left"]], "name (lambeq.text2diagram.ccgtype property)": [[36, "lambeq.text2diagram.CCGType.name"]], "over() (lambeq.text2diagram.ccgtype method)": [[36, "lambeq.text2diagram.CCGType.over"]], "parse() (lambeq.text2diagram.ccgtype class method)": [[36, "lambeq.text2diagram.CCGType.parse"]], "replace() (lambeq.text2diagram.ccgtype method)": [[36, "lambeq.text2diagram.CCGType.replace"]], "replace_result() (lambeq.text2diagram.ccgtype method)": [[36, "lambeq.text2diagram.CCGType.replace_result"]], "resolve() (lambeq.text2diagram.ccgrule method)": [[36, "lambeq.text2diagram.CCGRule.resolve"]], "result (lambeq.text2diagram.ccgtype property)": [[36, "lambeq.text2diagram.CCGType.result"]], "right (lambeq.text2diagram.ccgtree property)": [[36, "lambeq.text2diagram.CCGTree.right"]], "right (lambeq.text2diagram.ccgtype property)": [[36, "lambeq.text2diagram.CCGType.right"]], "section2diagrams() (lambeq.text2diagram.ccgbankparser method)": [[36, "lambeq.text2diagram.CCGBankParser.section2diagrams"]], "section2diagrams_gen() (lambeq.text2diagram.ccgbankparser method)": [[36, "lambeq.text2diagram.CCGBankParser.section2diagrams_gen"]], "section2trees() (lambeq.text2diagram.ccgbankparser method)": [[36, "lambeq.text2diagram.CCGBankParser.section2trees"]], "section2trees_gen() (lambeq.text2diagram.ccgbankparser method)": [[36, "lambeq.text2diagram.CCGBankParser.section2trees_gen"]], "sentence2diagram() (lambeq.text2diagram.bobcatparser method)": [[36, "lambeq.text2diagram.BobcatParser.sentence2diagram"]], "sentence2diagram() (lambeq.text2diagram.ccgbankparser method)": [[36, "lambeq.text2diagram.CCGBankParser.sentence2diagram"]], "sentence2diagram() (lambeq.text2diagram.ccgparser method)": [[36, "lambeq.text2diagram.CCGParser.sentence2diagram"]], "sentence2diagram() (lambeq.text2diagram.depccgparser method)": [[36, "lambeq.text2diagram.DepCCGParser.sentence2diagram"]], "sentence2diagram() (lambeq.text2diagram.linearreader method)": [[36, "lambeq.text2diagram.LinearReader.sentence2diagram"]], "sentence2diagram() (lambeq.text2diagram.reader method)": [[36, "lambeq.text2diagram.Reader.sentence2diagram"]], "sentence2diagram() (lambeq.text2diagram.treereader method)": [[36, "lambeq.text2diagram.TreeReader.sentence2diagram"]], "sentence2diagram() (lambeq.text2diagram.webparser method)": [[36, "lambeq.text2diagram.WebParser.sentence2diagram"]], "sentence2tree() (lambeq.text2diagram.bobcatparser method)": [[36, "lambeq.text2diagram.BobcatParser.sentence2tree"]], "sentence2tree() (lambeq.text2diagram.ccgbankparser method)": [[36, "lambeq.text2diagram.CCGBankParser.sentence2tree"]], "sentence2tree() (lambeq.text2diagram.ccgparser method)": [[36, "lambeq.text2diagram.CCGParser.sentence2tree"]], "sentence2tree() (lambeq.text2diagram.depccgparser method)": [[36, "lambeq.text2diagram.DepCCGParser.sentence2tree"]], "sentence2tree() (lambeq.text2diagram.webparser method)": [[36, "lambeq.text2diagram.WebParser.sentence2tree"]], "sentences2diagrams() (lambeq.text2diagram.bobcatparser method)": [[36, "lambeq.text2diagram.BobcatParser.sentences2diagrams"]], "sentences2diagrams() (lambeq.text2diagram.ccgbankparser method)": [[36, "lambeq.text2diagram.CCGBankParser.sentences2diagrams"]], "sentences2diagrams() (lambeq.text2diagram.ccgparser method)": [[36, "lambeq.text2diagram.CCGParser.sentences2diagrams"]], "sentences2diagrams() (lambeq.text2diagram.depccgparser method)": [[36, "lambeq.text2diagram.DepCCGParser.sentences2diagrams"]], "sentences2diagrams() (lambeq.text2diagram.linearreader method)": [[36, "lambeq.text2diagram.LinearReader.sentences2diagrams"]], "sentences2diagrams() (lambeq.text2diagram.reader method)": [[36, "lambeq.text2diagram.Reader.sentences2diagrams"]], "sentences2diagrams() (lambeq.text2diagram.treereader method)": [[36, "lambeq.text2diagram.TreeReader.sentences2diagrams"]], "sentences2diagrams() (lambeq.text2diagram.webparser method)": [[36, "lambeq.text2diagram.WebParser.sentences2diagrams"]], "sentences2trees() (lambeq.text2diagram.bobcatparser method)": [[36, "lambeq.text2diagram.BobcatParser.sentences2trees"]], "sentences2trees() (lambeq.text2diagram.ccgbankparser method)": [[36, "lambeq.text2diagram.CCGBankParser.sentences2trees"]], "sentences2trees() (lambeq.text2diagram.ccgparser method)": [[36, "lambeq.text2diagram.CCGParser.sentences2trees"]], "sentences2trees() (lambeq.text2diagram.depccgparser method)": [[36, "lambeq.text2diagram.DepCCGParser.sentences2trees"]], "sentences2trees() (lambeq.text2diagram.webparser method)": [[36, "lambeq.text2diagram.WebParser.sentences2trees"]], "slash() (lambeq.text2diagram.ccgtype method)": [[36, "lambeq.text2diagram.CCGType.slash"]], "spiders_reader (in module lambeq.text2diagram)": [[36, "lambeq.text2diagram.spiders_reader"]], "split() (lambeq.text2diagram.ccgtype method)": [[36, "lambeq.text2diagram.CCGType.split"]], "stairs_reader (in module lambeq.text2diagram)": [[36, "lambeq.text2diagram.stairs_reader"]], "strerror (lambeq.text2diagram.webparseerror attribute)": [[36, "lambeq.text2diagram.WebParseError.strerror"]], "symbol (lambeq.text2diagram.ccgrule property)": [[36, "lambeq.text2diagram.CCGRule.symbol"]], "text (lambeq.text2diagram.ccgtree property)": [[36, "lambeq.text2diagram.CCGTree.text"]], "to_diagram() (lambeq.text2diagram.ccgtree method)": [[36, "lambeq.text2diagram.CCGTree.to_diagram"]], "to_grammar() (lambeq.text2diagram.ccgtype method)": [[36, "lambeq.text2diagram.CCGType.to_grammar"]], "to_json() (lambeq.text2diagram.ccgtree method)": [[36, "lambeq.text2diagram.CCGTree.to_json"]], "to_string() (lambeq.text2diagram.ccgtype method)": [[36, "lambeq.text2diagram.CCGType.to_string"]], "tree2diagram() (lambeq.text2diagram.treereader static method)": [[36, "lambeq.text2diagram.TreeReader.tree2diagram"]], "under() (lambeq.text2diagram.ccgtype method)": [[36, "lambeq.text2diagram.CCGType.under"]], "with_traceback() (lambeq.text2diagram.bobcatparseerror method)": [[36, "lambeq.text2diagram.BobcatParseError.with_traceback"]], "with_traceback() (lambeq.text2diagram.ccgbankparseerror method)": [[36, "lambeq.text2diagram.CCGBankParseError.with_traceback"]], "with_traceback() (lambeq.text2diagram.ccgruleuseerror method)": [[36, "lambeq.text2diagram.CCGRuleUseError.with_traceback"]], "with_traceback() (lambeq.text2diagram.depccgparseerror method)": [[36, "lambeq.text2diagram.DepCCGParseError.with_traceback"]], "with_traceback() (lambeq.text2diagram.webparseerror method)": [[36, "lambeq.text2diagram.WebParseError.with_traceback"]], "without_trivial_unary_rules() (lambeq.text2diagram.ccgtree method)": [[36, "lambeq.text2diagram.CCGTree.without_trivial_unary_rules"]], "word_sequence_reader (in module lambeq.text2diagram)": [[36, "lambeq.text2diagram.word_sequence_reader"]], "spacytokeniser (class in lambeq.tokeniser)": [[37, "lambeq.tokeniser.SpacyTokeniser"]], "tokeniser (class in lambeq.tokeniser)": [[37, "lambeq.tokeniser.Tokeniser"]], "__init__() (lambeq.tokeniser.spacytokeniser method)": [[37, "lambeq.tokeniser.SpacyTokeniser.__init__"]], "lambeq.tokeniser": [[37, "module-lambeq.tokeniser"]], "split_sentences() (lambeq.tokeniser.spacytokeniser method)": [[37, "lambeq.tokeniser.SpacyTokeniser.split_sentences"]], "split_sentences() (lambeq.tokeniser.tokeniser method)": [[37, "lambeq.tokeniser.Tokeniser.split_sentences"]], "tokenise_sentence() (lambeq.tokeniser.spacytokeniser method)": [[37, "lambeq.tokeniser.SpacyTokeniser.tokenise_sentence"]], "tokenise_sentence() (lambeq.tokeniser.tokeniser method)": [[37, "lambeq.tokeniser.Tokeniser.tokenise_sentence"]], "tokenise_sentences() (lambeq.tokeniser.spacytokeniser method)": [[37, "lambeq.tokeniser.SpacyTokeniser.tokenise_sentences"]], "tokenise_sentences() (lambeq.tokeniser.tokeniser method)": [[37, "lambeq.tokeniser.Tokeniser.tokenise_sentences"]], "binarycrossentropyloss (class in lambeq.training)": [[38, "lambeq.training.BinaryCrossEntropyLoss"]], "checkpoint (class in lambeq.training)": [[38, "lambeq.training.Checkpoint"]], "crossentropyloss (class in lambeq.training)": [[38, "lambeq.training.CrossEntropyLoss"]], "dataset (class in lambeq.training)": [[38, "lambeq.training.Dataset"]], "lossfunction (class in lambeq.training)": [[38, "lambeq.training.LossFunction"]], "mseloss (class in lambeq.training)": [[38, "lambeq.training.MSELoss"]], "model (class in lambeq.training)": [[38, "lambeq.training.Model"]], "neldermeadoptimizer (class in lambeq.training)": [[38, "lambeq.training.NelderMeadOptimizer"]], "numpymodel (class in lambeq.training)": [[38, "lambeq.training.NumpyModel"]], "optimizer (class in lambeq.training)": [[38, "lambeq.training.Optimizer"]], "pennylanemodel (class in lambeq.training)": [[38, "lambeq.training.PennyLaneModel"]], "pytorchmodel (class in lambeq.training)": [[38, "lambeq.training.PytorchModel"]], "pytorchtrainer (class in lambeq.training)": [[38, "lambeq.training.PytorchTrainer"]], "quantummodel (class in lambeq.training)": [[38, "lambeq.training.QuantumModel"]], "quantumtrainer (class in lambeq.training)": [[38, "lambeq.training.QuantumTrainer"]], "rotosolveoptimizer (class in lambeq.training)": [[38, "lambeq.training.RotosolveOptimizer"]], "spsaoptimizer (class in lambeq.training)": [[38, "lambeq.training.SPSAOptimizer"]], "t_destination (lambeq.training.pennylanemodel attribute)": [[38, "lambeq.training.PennyLaneModel.T_destination"]], "t_destination (lambeq.training.pytorchmodel attribute)": [[38, "lambeq.training.PytorchModel.T_destination"]], "tketmodel (class in lambeq.training)": [[38, "lambeq.training.TketModel"]], "trainer (class in lambeq.training)": [[38, "lambeq.training.Trainer"]], "__call__() (lambeq.training.binarycrossentropyloss method)": [[38, "lambeq.training.BinaryCrossEntropyLoss.__call__"]], "__call__() (lambeq.training.crossentropyloss method)": [[38, "lambeq.training.CrossEntropyLoss.__call__"]], "__call__() (lambeq.training.lossfunction method)": [[38, "lambeq.training.LossFunction.__call__"]], "__call__() (lambeq.training.mseloss method)": [[38, "lambeq.training.MSELoss.__call__"]], "__call__() (lambeq.training.model method)": [[38, "lambeq.training.Model.__call__"]], "__call__() (lambeq.training.numpymodel method)": [[38, "lambeq.training.NumpyModel.__call__"]], "__call__() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.__call__"]], "__call__() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.__call__"]], "__call__() (lambeq.training.quantummodel method)": [[38, "lambeq.training.QuantumModel.__call__"]], "__call__() (lambeq.training.tketmodel method)": [[38, "lambeq.training.TketModel.__call__"]], "__init__() (lambeq.training.binarycrossentropyloss method)": [[38, "lambeq.training.BinaryCrossEntropyLoss.__init__"]], "__init__() (lambeq.training.checkpoint method)": [[38, "lambeq.training.Checkpoint.__init__"]], "__init__() (lambeq.training.crossentropyloss method)": [[38, "lambeq.training.CrossEntropyLoss.__init__"]], "__init__() (lambeq.training.dataset method)": [[38, "lambeq.training.Dataset.__init__"]], "__init__() (lambeq.training.lossfunction method)": [[38, "lambeq.training.LossFunction.__init__"]], "__init__() (lambeq.training.mseloss method)": [[38, "lambeq.training.MSELoss.__init__"]], "__init__() (lambeq.training.model method)": [[38, "lambeq.training.Model.__init__"]], "__init__() (lambeq.training.neldermeadoptimizer method)": [[38, "lambeq.training.NelderMeadOptimizer.__init__"]], "__init__() (lambeq.training.numpymodel method)": [[38, "lambeq.training.NumpyModel.__init__"]], "__init__() (lambeq.training.optimizer method)": [[38, "lambeq.training.Optimizer.__init__"]], "__init__() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.__init__"]], "__init__() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.__init__"]], "__init__() (lambeq.training.pytorchtrainer method)": [[38, "lambeq.training.PytorchTrainer.__init__"]], "__init__() (lambeq.training.quantummodel method)": [[38, "lambeq.training.QuantumModel.__init__"]], "__init__() (lambeq.training.quantumtrainer method)": [[38, "lambeq.training.QuantumTrainer.__init__"]], "__init__() (lambeq.training.rotosolveoptimizer method)": [[38, "lambeq.training.RotosolveOptimizer.__init__"]], "__init__() (lambeq.training.spsaoptimizer method)": [[38, "lambeq.training.SPSAOptimizer.__init__"]], "__init__() (lambeq.training.tketmodel method)": [[38, "lambeq.training.TketModel.__init__"]], "__init__() (lambeq.training.trainer method)": [[38, "lambeq.training.Trainer.__init__"]], "add_many() (lambeq.training.checkpoint method)": [[38, "lambeq.training.Checkpoint.add_many"]], "add_module() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.add_module"]], "add_module() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.add_module"]], "apply() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.apply"]], "apply() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.apply"]], "backward() (lambeq.training.neldermeadoptimizer method)": [[38, "lambeq.training.NelderMeadOptimizer.backward"]], "backward() (lambeq.training.optimizer method)": [[38, "lambeq.training.Optimizer.backward"]], "backward() (lambeq.training.rotosolveoptimizer method)": [[38, "lambeq.training.RotosolveOptimizer.backward"]], "backward() (lambeq.training.spsaoptimizer method)": [[38, "lambeq.training.SPSAOptimizer.backward"]], "bfloat16() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.bfloat16"]], "bfloat16() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.bfloat16"]], "bounds (lambeq.training.neldermeadoptimizer attribute)": [[38, "lambeq.training.NelderMeadOptimizer.bounds"]], "buffers() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.buffers"]], "buffers() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.buffers"]], "calculate_loss() (lambeq.training.binarycrossentropyloss method)": [[38, "lambeq.training.BinaryCrossEntropyLoss.calculate_loss"]], "calculate_loss() (lambeq.training.crossentropyloss method)": [[38, "lambeq.training.CrossEntropyLoss.calculate_loss"]], "calculate_loss() (lambeq.training.lossfunction method)": [[38, "lambeq.training.LossFunction.calculate_loss"]], "calculate_loss() (lambeq.training.mseloss method)": [[38, "lambeq.training.MSELoss.calculate_loss"]], "call_super_init (lambeq.training.pennylanemodel attribute)": [[38, "lambeq.training.PennyLaneModel.call_super_init"]], "call_super_init (lambeq.training.pytorchmodel attribute)": [[38, "lambeq.training.PytorchModel.call_super_init"]], "children() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.children"]], "children() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.children"]], "compile() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.compile"]], "compile() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.compile"]], "cpu() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.cpu"]], "cpu() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.cpu"]], "cuda() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.cuda"]], "cuda() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.cuda"]], "double() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.double"]], "double() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.double"]], "dump_patches (lambeq.training.pennylanemodel attribute)": [[38, "lambeq.training.PennyLaneModel.dump_patches"]], "dump_patches (lambeq.training.pytorchmodel attribute)": [[38, "lambeq.training.PytorchModel.dump_patches"]], "eval() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.eval"]], "eval() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.eval"]], "extra_repr() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.extra_repr"]], "extra_repr() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.extra_repr"]], "fit() (lambeq.training.pytorchtrainer method)": [[38, "lambeq.training.PytorchTrainer.fit"]], "fit() (lambeq.training.quantumtrainer method)": [[38, "lambeq.training.QuantumTrainer.fit"]], "fit() (lambeq.training.trainer method)": [[38, "lambeq.training.Trainer.fit"]], "float() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.float"]], "float() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.float"]], "forward() (lambeq.training.model method)": [[38, "lambeq.training.Model.forward"]], "forward() (lambeq.training.numpymodel method)": [[38, "lambeq.training.NumpyModel.forward"]], "forward() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.forward"]], "forward() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.forward"]], "forward() (lambeq.training.quantummodel method)": [[38, "lambeq.training.QuantumModel.forward"]], "forward() (lambeq.training.tketmodel method)": [[38, "lambeq.training.TketModel.forward"]], "from_checkpoint() (lambeq.training.model class method)": [[38, "lambeq.training.Model.from_checkpoint"]], "from_checkpoint() (lambeq.training.numpymodel class method)": [[38, "lambeq.training.NumpyModel.from_checkpoint"]], "from_checkpoint() (lambeq.training.pennylanemodel class method)": [[38, "lambeq.training.PennyLaneModel.from_checkpoint"]], "from_checkpoint() (lambeq.training.pytorchmodel class method)": [[38, "lambeq.training.PytorchModel.from_checkpoint"]], "from_checkpoint() (lambeq.training.quantummodel class method)": [[38, "lambeq.training.QuantumModel.from_checkpoint"]], "from_checkpoint() (lambeq.training.tketmodel class method)": [[38, "lambeq.training.TketModel.from_checkpoint"]], "from_diagrams() (lambeq.training.model class method)": [[38, "lambeq.training.Model.from_diagrams"]], "from_diagrams() (lambeq.training.numpymodel class method)": [[38, "lambeq.training.NumpyModel.from_diagrams"]], "from_diagrams() (lambeq.training.pennylanemodel class method)": [[38, "lambeq.training.PennyLaneModel.from_diagrams"]], "from_diagrams() (lambeq.training.pytorchmodel class method)": [[38, "lambeq.training.PytorchModel.from_diagrams"]], "from_diagrams() (lambeq.training.quantummodel class method)": [[38, "lambeq.training.QuantumModel.from_diagrams"]], "from_diagrams() (lambeq.training.tketmodel class method)": [[38, "lambeq.training.TketModel.from_diagrams"]], "from_file() (lambeq.training.checkpoint class method)": [[38, "lambeq.training.Checkpoint.from_file"]], "get() (lambeq.training.checkpoint method)": [[38, "lambeq.training.Checkpoint.get"]], "get_buffer() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.get_buffer"]], "get_buffer() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.get_buffer"]], "get_diagram_output() (lambeq.training.model method)": [[38, "lambeq.training.Model.get_diagram_output"]], "get_diagram_output() (lambeq.training.numpymodel method)": [[38, "lambeq.training.NumpyModel.get_diagram_output"]], "get_diagram_output() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.get_diagram_output"]], "get_diagram_output() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.get_diagram_output"]], "get_diagram_output() (lambeq.training.quantummodel method)": [[38, "lambeq.training.QuantumModel.get_diagram_output"]], "get_diagram_output() (lambeq.training.tketmodel method)": [[38, "lambeq.training.TketModel.get_diagram_output"]], "get_extra_state() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.get_extra_state"]], "get_extra_state() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.get_extra_state"]], "get_parameter() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.get_parameter"]], "get_parameter() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.get_parameter"]], "get_submodule() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.get_submodule"]], "get_submodule() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.get_submodule"]], "half() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.half"]], "half() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.half"]], "initialise_weights() (lambeq.training.model method)": [[38, "lambeq.training.Model.initialise_weights"]], "initialise_weights() (lambeq.training.numpymodel method)": [[38, "lambeq.training.NumpyModel.initialise_weights"]], "initialise_weights() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.initialise_weights"]], "initialise_weights() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.initialise_weights"]], "initialise_weights() (lambeq.training.quantummodel method)": [[38, "lambeq.training.QuantumModel.initialise_weights"]], "initialise_weights() (lambeq.training.tketmodel method)": [[38, "lambeq.training.TketModel.initialise_weights"]], "ipu() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.ipu"]], "ipu() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.ipu"]], "items() (lambeq.training.checkpoint method)": [[38, "lambeq.training.Checkpoint.items"]], "keys() (lambeq.training.checkpoint method)": [[38, "lambeq.training.Checkpoint.keys"]], "lambeq.training": [[38, "module-lambeq.training"]], "load() (lambeq.training.model method)": [[38, "lambeq.training.Model.load"]], "load() (lambeq.training.numpymodel method)": [[38, "lambeq.training.NumpyModel.load"]], "load() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.load"]], "load() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.load"]], "load() (lambeq.training.quantummodel method)": [[38, "lambeq.training.QuantumModel.load"]], "load() (lambeq.training.tketmodel method)": [[38, "lambeq.training.TketModel.load"]], "load_state_dict() (lambeq.training.neldermeadoptimizer method)": [[38, "lambeq.training.NelderMeadOptimizer.load_state_dict"]], "load_state_dict() (lambeq.training.optimizer method)": [[38, "lambeq.training.Optimizer.load_state_dict"]], "load_state_dict() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.load_state_dict"]], "load_state_dict() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.load_state_dict"]], "load_state_dict() (lambeq.training.rotosolveoptimizer method)": [[38, "lambeq.training.RotosolveOptimizer.load_state_dict"]], "load_state_dict() (lambeq.training.spsaoptimizer method)": [[38, "lambeq.training.SPSAOptimizer.load_state_dict"]], "load_training_checkpoint() (lambeq.training.pytorchtrainer method)": [[38, "lambeq.training.PytorchTrainer.load_training_checkpoint"]], "load_training_checkpoint() (lambeq.training.quantumtrainer method)": [[38, "lambeq.training.QuantumTrainer.load_training_checkpoint"]], "load_training_checkpoint() (lambeq.training.trainer method)": [[38, "lambeq.training.Trainer.load_training_checkpoint"]], "model (lambeq.training.neldermeadoptimizer attribute)": [[38, "lambeq.training.NelderMeadOptimizer.model"]], "model (lambeq.training.pytorchtrainer attribute)": [[38, "lambeq.training.PytorchTrainer.model"]], "model (lambeq.training.quantumtrainer attribute)": [[38, "lambeq.training.QuantumTrainer.model"]], "model (lambeq.training.rotosolveoptimizer attribute)": [[38, "lambeq.training.RotosolveOptimizer.model"]], "model (lambeq.training.spsaoptimizer attribute)": [[38, "lambeq.training.SPSAOptimizer.model"]], "modules() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.modules"]], "modules() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.modules"]], "named_buffers() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.named_buffers"]], "named_buffers() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.named_buffers"]], "named_children() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.named_children"]], "named_children() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.named_children"]], "named_modules() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.named_modules"]], "named_modules() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.named_modules"]], "named_parameters() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.named_parameters"]], "named_parameters() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.named_parameters"]], "objective() (lambeq.training.neldermeadoptimizer method)": [[38, "lambeq.training.NelderMeadOptimizer.objective"]], "parameters() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.parameters"]], "parameters() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.parameters"]], "project() (lambeq.training.neldermeadoptimizer method)": [[38, "lambeq.training.NelderMeadOptimizer.project"]], "project() (lambeq.training.rotosolveoptimizer static method)": [[38, "lambeq.training.RotosolveOptimizer.project"]], "register_backward_hook() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.register_backward_hook"]], "register_backward_hook() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.register_backward_hook"]], "register_buffer() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.register_buffer"]], "register_buffer() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.register_buffer"]], "register_forward_hook() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.register_forward_hook"]], "register_forward_hook() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.register_forward_hook"]], "register_forward_pre_hook() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.register_forward_pre_hook"]], "register_forward_pre_hook() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.register_forward_pre_hook"]], "register_full_backward_hook() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.register_full_backward_hook"]], "register_full_backward_hook() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.register_full_backward_hook"]], "register_full_backward_pre_hook() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.register_full_backward_pre_hook"]], "register_full_backward_pre_hook() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.register_load_state_dict_post_hook"]], "register_load_state_dict_post_hook() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.register_load_state_dict_post_hook"]], "register_module() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.register_module"]], "register_module() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.register_module"]], "register_parameter() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.register_parameter"]], "register_parameter() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.register_parameter"]], "register_state_dict_pre_hook() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.register_state_dict_pre_hook"]], "register_state_dict_pre_hook() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.register_state_dict_pre_hook"]], "requires_grad_() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.requires_grad_"]], "requires_grad_() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.requires_grad_"]], "save() (lambeq.training.model method)": [[38, "lambeq.training.Model.save"]], "save() (lambeq.training.numpymodel method)": [[38, "lambeq.training.NumpyModel.save"]], "save() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.save"]], "save() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.save"]], "save() (lambeq.training.quantummodel method)": [[38, "lambeq.training.QuantumModel.save"]], "save() (lambeq.training.tketmodel method)": [[38, "lambeq.training.TketModel.save"]], "save_checkpoint() (lambeq.training.pytorchtrainer method)": [[38, "lambeq.training.PytorchTrainer.save_checkpoint"]], "save_checkpoint() (lambeq.training.quantumtrainer method)": [[38, "lambeq.training.QuantumTrainer.save_checkpoint"]], "save_checkpoint() (lambeq.training.trainer method)": [[38, "lambeq.training.Trainer.save_checkpoint"]], "set_extra_state() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.set_extra_state"]], "set_extra_state() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.set_extra_state"]], "share_memory() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.share_memory"]], "share_memory() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.share_memory"]], "shuffle_data() (lambeq.training.dataset static method)": [[38, "lambeq.training.Dataset.shuffle_data"]], "state_dict() (lambeq.training.neldermeadoptimizer method)": [[38, "lambeq.training.NelderMeadOptimizer.state_dict"]], "state_dict() (lambeq.training.optimizer method)": [[38, "lambeq.training.Optimizer.state_dict"]], "state_dict() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.state_dict"]], "state_dict() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.state_dict"]], "state_dict() (lambeq.training.rotosolveoptimizer method)": [[38, "lambeq.training.RotosolveOptimizer.state_dict"]], "state_dict() (lambeq.training.spsaoptimizer method)": [[38, "lambeq.training.SPSAOptimizer.state_dict"]], "step() (lambeq.training.neldermeadoptimizer method)": [[38, "lambeq.training.NelderMeadOptimizer.step"]], "step() (lambeq.training.optimizer method)": [[38, "lambeq.training.Optimizer.step"]], "step() (lambeq.training.rotosolveoptimizer method)": [[38, "lambeq.training.RotosolveOptimizer.step"]], "step() (lambeq.training.spsaoptimizer method)": [[38, "lambeq.training.SPSAOptimizer.step"]], "symbols (lambeq.training.pennylanemodel attribute)": [[38, "lambeq.training.PennyLaneModel.symbols"]], "symbols (lambeq.training.pytorchmodel attribute)": [[38, "lambeq.training.PytorchModel.symbols"]], "symbols (lambeq.training.tketmodel attribute)": [[38, "lambeq.training.TketModel.symbols"]], "to() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.to"]], "to() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.to"]], "to_empty() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.to_empty"]], "to_empty() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.to_empty"]], "to_file() (lambeq.training.checkpoint method)": [[38, "lambeq.training.Checkpoint.to_file"]], "train() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.train"]], "train() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.train"]], "training (lambeq.training.pennylanemodel attribute)": [[38, "lambeq.training.PennyLaneModel.training"]], "training (lambeq.training.pytorchmodel attribute)": [[38, "lambeq.training.PytorchModel.training"]], "training_step() (lambeq.training.pytorchtrainer method)": [[38, "lambeq.training.PytorchTrainer.training_step"]], "training_step() (lambeq.training.quantumtrainer method)": [[38, "lambeq.training.QuantumTrainer.training_step"]], "training_step() (lambeq.training.trainer method)": [[38, "lambeq.training.Trainer.training_step"]], "type() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.type"]], "type() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.type"]], "update_hyper_params() (lambeq.training.neldermeadoptimizer method)": [[38, "lambeq.training.NelderMeadOptimizer.update_hyper_params"]], "update_hyper_params() (lambeq.training.spsaoptimizer method)": [[38, "lambeq.training.SPSAOptimizer.update_hyper_params"]], "validation_step() (lambeq.training.pytorchtrainer method)": [[38, "lambeq.training.PytorchTrainer.validation_step"]], "validation_step() (lambeq.training.quantumtrainer method)": [[38, "lambeq.training.QuantumTrainer.validation_step"]], "validation_step() (lambeq.training.trainer method)": [[38, "lambeq.training.Trainer.validation_step"]], "values() (lambeq.training.checkpoint method)": [[38, "lambeq.training.Checkpoint.values"]], "weights (lambeq.training.numpymodel attribute)": [[38, "lambeq.training.NumpyModel.weights"]], "weights (lambeq.training.pennylanemodel attribute)": [[38, "lambeq.training.PennyLaneModel.weights"]], "weights (lambeq.training.pytorchmodel attribute)": [[38, "lambeq.training.PytorchModel.weights"]], "weights (lambeq.training.quantummodel attribute)": [[38, "lambeq.training.QuantumModel.weights"]], "weights (lambeq.training.tketmodel attribute)": [[38, "lambeq.training.TketModel.weights"]], "xpu() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.xpu"]], "xpu() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.xpu"]], "zero_grad() (lambeq.training.neldermeadoptimizer method)": [[38, "lambeq.training.NelderMeadOptimizer.zero_grad"]], "zero_grad() (lambeq.training.optimizer method)": [[38, "lambeq.training.Optimizer.zero_grad"]], "zero_grad() (lambeq.training.pennylanemodel method)": [[38, "lambeq.training.PennyLaneModel.zero_grad"]], "zero_grad() (lambeq.training.pytorchmodel method)": [[38, "lambeq.training.PytorchModel.zero_grad"]], "zero_grad() (lambeq.training.rotosolveoptimizer method)": [[38, "lambeq.training.RotosolveOptimizer.zero_grad"]], "zero_grad() (lambeq.training.spsaoptimizer method)": [[38, "lambeq.training.SPSAOptimizer.zero_grad"]], "atomictype (class in lambeq)": [[52, "lambeq.AtomicType"]], "backward_application (lambeq.ccgrule attribute)": [[52, "lambeq.CCGRule.BACKWARD_APPLICATION"]], "backward_composition (lambeq.ccgrule attribute)": [[52, "lambeq.CCGRule.BACKWARD_COMPOSITION"]], "backward_crossed_composition (lambeq.ccgrule attribute)": [[52, "lambeq.CCGRule.BACKWARD_CROSSED_COMPOSITION"]], "backward_type_raising (lambeq.ccgrule attribute)": [[52, "lambeq.CCGRule.BACKWARD_TYPE_RAISING"]], "bond_type (lambeq.mpsansatz attribute)": [[52, "lambeq.MPSAnsatz.BOND_TYPE"]], "baseansatz (class in lambeq)": [[52, "lambeq.BaseAnsatz"]], "binarycrossentropyloss (class in lambeq)": [[52, "lambeq.BinaryCrossEntropyLoss"]], "bobcatparser (class in lambeq)": [[52, "lambeq.BobcatParser"]], "ccgbankparser (class in lambeq)": [[52, "lambeq.CCGBankParser"]], "ccgparser (class in lambeq)": [[52, "lambeq.CCGParser"]], "ccgrule (class in lambeq)": [[52, "lambeq.CCGRule"]], "ccgtree (class in lambeq)": [[52, "lambeq.CCGTree"]], "ccgtype (class in lambeq)": [[52, "lambeq.CCGType"]], "conjunction (lambeq.atomictype attribute)": [[52, "lambeq.AtomicType.CONJUNCTION"]], "conjunction (lambeq.ccgrule attribute)": [[52, "lambeq.CCGRule.CONJUNCTION"]], "conjunction (lambeq.ccgtype attribute)": [[52, "lambeq.CCGType.CONJUNCTION"]], "conj_tag (lambeq.ccgtype attribute)": [[52, "lambeq.CCGType.CONJ_TAG"]], "checkpoint (class in lambeq)": [[52, "lambeq.Checkpoint"]], "circuitansatz (class in lambeq)": [[52, "lambeq.CircuitAnsatz"]], "coordinationrewriterule (class in lambeq)": [[52, "lambeq.CoordinationRewriteRule"]], "crossentropyloss (class in lambeq)": [[52, "lambeq.CrossEntropyLoss"]], "curryrewriterule (class in lambeq)": [[52, "lambeq.CurryRewriteRule"]], "dataset (class in lambeq)": [[52, "lambeq.Dataset"]], "depccgparser (class in lambeq)": [[52, "lambeq.DepCCGParser"]], "diagramrewriter (class in lambeq)": [[52, "lambeq.DiagramRewriter"]], "forward_application (lambeq.ccgrule attribute)": [[52, "lambeq.CCGRule.FORWARD_APPLICATION"]], "forward_composition (lambeq.ccgrule attribute)": [[52, "lambeq.CCGRule.FORWARD_COMPOSITION"]], "forward_crossed_composition (lambeq.ccgrule attribute)": [[52, "lambeq.CCGRule.FORWARD_CROSSED_COMPOSITION"]], "forward_type_raising (lambeq.ccgrule attribute)": [[52, "lambeq.CCGRule.FORWARD_TYPE_RAISING"]], "generalized_backward_composition (lambeq.ccgrule attribute)": [[52, "lambeq.CCGRule.GENERALIZED_BACKWARD_COMPOSITION"]], "generalized_backward_crossed_composition (lambeq.ccgrule attribute)": [[52, "lambeq.CCGRule.GENERALIZED_BACKWARD_CROSSED_COMPOSITION"]], "generalized_forward_composition (lambeq.ccgrule attribute)": [[52, "lambeq.CCGRule.GENERALIZED_FORWARD_COMPOSITION"]], "generalized_forward_crossed_composition (lambeq.ccgrule attribute)": [[52, "lambeq.CCGRule.GENERALIZED_FORWARD_CROSSED_COMPOSITION"]], "height (lambeq.treereadermode attribute)": [[52, "lambeq.TreeReaderMode.HEIGHT"]], "iqpansatz (class in lambeq)": [[52, "lambeq.IQPAnsatz"]], "lexical (lambeq.ccgrule attribute)": [[52, "lambeq.CCGRule.LEXICAL"]], "linearreader (class in lambeq)": [[52, "lambeq.LinearReader"]], "lossfunction (class in lambeq)": [[52, "lambeq.LossFunction"]], "mpsansatz (class in lambeq)": [[52, "lambeq.MPSAnsatz"]], "mseloss (class in lambeq)": [[52, "lambeq.MSELoss"]], "model (class in lambeq)": [[52, "lambeq.Model"]], "noun (lambeq.atomictype attribute)": [[52, "lambeq.AtomicType.NOUN"]], "noun (lambeq.ccgtype attribute)": [[52, "lambeq.CCGType.NOUN"]], "noun_phrase (lambeq.atomictype attribute)": [[52, "lambeq.AtomicType.NOUN_PHRASE"]], "noun_phrase (lambeq.ccgtype attribute)": [[52, "lambeq.CCGType.NOUN_PHRASE"]], "no_type (lambeq.treereadermode attribute)": [[52, "lambeq.TreeReaderMode.NO_TYPE"]], "neldermeadoptimizer (class in lambeq)": [[52, "lambeq.NelderMeadOptimizer"]], "numpymodel (class in lambeq)": [[52, "lambeq.NumpyModel"]], "optimizer (class in lambeq)": [[52, "lambeq.Optimizer"]], "prepositional_phrase (lambeq.atomictype attribute)": [[52, "lambeq.AtomicType.PREPOSITIONAL_PHRASE"]], "prepositional_phrase (lambeq.ccgtype attribute)": [[52, "lambeq.CCGType.PREPOSITIONAL_PHRASE"]], "progress (lambeq.verbositylevel attribute)": [[52, "lambeq.VerbosityLevel.PROGRESS"]], "punctuation (lambeq.atomictype attribute)": [[52, "lambeq.AtomicType.PUNCTUATION"]], "punctuation (lambeq.ccgtype attribute)": [[52, "lambeq.CCGType.PUNCTUATION"]], "pennylanemodel (class in lambeq)": [[52, "lambeq.PennyLaneModel"]], "pytorchmodel (class in lambeq)": [[52, "lambeq.PytorchModel"]], "pytorchtrainer (class in lambeq)": [[52, "lambeq.PytorchTrainer"]], "quantummodel (class in lambeq)": [[52, "lambeq.QuantumModel"]], "quantumtrainer (class in lambeq)": [[52, "lambeq.QuantumTrainer"]], "remove_punctuation_left (lambeq.ccgrule attribute)": [[52, "lambeq.CCGRule.REMOVE_PUNCTUATION_LEFT"]], "remove_punctuation_right (lambeq.ccgrule attribute)": [[52, "lambeq.CCGRule.REMOVE_PUNCTUATION_RIGHT"]], "rule_only (lambeq.treereadermode attribute)": [[52, "lambeq.TreeReaderMode.RULE_ONLY"]], "rule_type (lambeq.treereadermode attribute)": [[52, "lambeq.TreeReaderMode.RULE_TYPE"]], "reader (class in lambeq)": [[52, "lambeq.Reader"]], "removecupsrewriter (class in lambeq)": [[52, "lambeq.RemoveCupsRewriter"]], "removeswapsrewriter (class in lambeq)": [[52, "lambeq.RemoveSwapsRewriter"]], "rewriterule (class in lambeq)": [[52, "lambeq.RewriteRule"]], "rewriter (class in lambeq)": [[52, "lambeq.Rewriter"]], "rotosolveoptimizer (class in lambeq)": [[52, "lambeq.RotosolveOptimizer"]], "sentence (lambeq.atomictype attribute)": [[52, "lambeq.AtomicType.SENTENCE"]], "sentence (lambeq.ccgtype attribute)": [[52, "lambeq.CCGType.SENTENCE"]], "spsaoptimizer (class in lambeq)": [[52, "lambeq.SPSAOptimizer"]], "suppress (lambeq.verbositylevel attribute)": [[52, "lambeq.VerbosityLevel.SUPPRESS"]], "sim14ansatz (class in lambeq)": [[52, "lambeq.Sim14Ansatz"]], "sim15ansatz (class in lambeq)": [[52, "lambeq.Sim15Ansatz"]], "sim4ansatz (class in lambeq)": [[52, "lambeq.Sim4Ansatz"]], "simplerewriterule (class in lambeq)": [[52, "lambeq.SimpleRewriteRule"]], "spacytokeniser (class in lambeq)": [[52, "lambeq.SpacyTokeniser"]], "spideransatz (class in lambeq)": [[52, "lambeq.SpiderAnsatz"]], "stronglyentanglingansatz (class in lambeq)": [[52, "lambeq.StronglyEntanglingAnsatz"]], "symbol (class in lambeq)": [[52, "lambeq.Symbol"]], "text (lambeq.verbositylevel attribute)": [[52, "lambeq.VerbosityLevel.TEXT"]], "tensoransatz (class in lambeq)": [[52, "lambeq.TensorAnsatz"]], "tketmodel (class in lambeq)": [[52, "lambeq.TketModel"]], "tokeniser (class in lambeq)": [[52, "lambeq.Tokeniser"]], "trainer (class in lambeq)": [[52, "lambeq.Trainer"]], "treereader (class in lambeq)": [[52, "lambeq.TreeReader"]], "treereadermode (class in lambeq)": [[52, "lambeq.TreeReaderMode"]], "unary (lambeq.ccgrule attribute)": [[52, "lambeq.CCGRule.UNARY"]], "unknown (lambeq.ccgrule attribute)": [[52, "lambeq.CCGRule.UNKNOWN"]], "unifycodomainrewriter (class in lambeq)": [[52, "lambeq.UnifyCodomainRewriter"]], "unknownwordsrewriterule (class in lambeq)": [[52, "lambeq.UnknownWordsRewriteRule"]], "verbositylevel (class in lambeq)": [[52, "lambeq.VerbosityLevel"]], "webparser (class in lambeq)": [[52, "lambeq.WebParser"]], "__call__() (lambeq.baseansatz method)": [[52, "lambeq.BaseAnsatz.__call__"]], "__call__() (lambeq.ccgrule method)": [[52, "lambeq.CCGRule.__call__"]], "__call__() (lambeq.circuitansatz method)": [[52, "lambeq.CircuitAnsatz.__call__"]], "__call__() (lambeq.diagramrewriter method)": [[52, "lambeq.DiagramRewriter.__call__"]], "__call__() (lambeq.lossfunction method)": [[52, "lambeq.LossFunction.__call__"]], "__call__() (lambeq.mpsansatz method)": [[52, "lambeq.MPSAnsatz.__call__"]], "__call__() (lambeq.model method)": [[52, "lambeq.Model.__call__"]], "__call__() (lambeq.quantummodel method)": [[52, "lambeq.QuantumModel.__call__"]], "__call__() (lambeq.rewriterule method)": [[52, "lambeq.RewriteRule.__call__"]], "__call__() (lambeq.rewriter method)": [[52, "lambeq.Rewriter.__call__"]], "__call__() (lambeq.spideransatz method)": [[52, "lambeq.SpiderAnsatz.__call__"]], "__call__() (lambeq.tensoransatz method)": [[52, "lambeq.TensorAnsatz.__call__"]], "__init__() (lambeq.baseansatz method)": [[52, "lambeq.BaseAnsatz.__init__"]], "__init__() (lambeq.binarycrossentropyloss method)": [[52, "lambeq.BinaryCrossEntropyLoss.__init__"]], "__init__() (lambeq.bobcatparseerror method)": [[52, "lambeq.BobcatParseError.__init__"]], "__init__() (lambeq.bobcatparser method)": [[52, "lambeq.BobcatParser.__init__"]], "__init__() (lambeq.ccgbankparseerror method)": [[52, "lambeq.CCGBankParseError.__init__"]], "__init__() (lambeq.ccgbankparser method)": [[52, "lambeq.CCGBankParser.__init__"]], "__init__() (lambeq.ccgparser method)": [[52, "lambeq.CCGParser.__init__"]], "__init__() (lambeq.ccgruleuseerror method)": [[52, "lambeq.CCGRuleUseError.__init__"]], "__init__() (lambeq.ccgtree method)": [[52, "lambeq.CCGTree.__init__"]], "__init__() (lambeq.ccgtype method)": [[52, "lambeq.CCGType.__init__"]], "__init__() (lambeq.checkpoint method)": [[52, "lambeq.Checkpoint.__init__"]], "__init__() (lambeq.circuitansatz method)": [[52, "lambeq.CircuitAnsatz.__init__"]], "__init__() (lambeq.coordinationrewriterule method)": [[52, "lambeq.CoordinationRewriteRule.__init__"]], "__init__() (lambeq.crossentropyloss method)": [[52, "lambeq.CrossEntropyLoss.__init__"]], "__init__() (lambeq.curryrewriterule method)": [[52, "lambeq.CurryRewriteRule.__init__"]], "__init__() (lambeq.dataset method)": [[52, "lambeq.Dataset.__init__"]], "__init__() (lambeq.depccgparseerror method)": [[52, "lambeq.DepCCGParseError.__init__"]], "__init__() (lambeq.depccgparser method)": [[52, "lambeq.DepCCGParser.__init__"]], "__init__() (lambeq.iqpansatz method)": [[52, "lambeq.IQPAnsatz.__init__"]], "__init__() (lambeq.linearreader method)": [[52, "lambeq.LinearReader.__init__"]], "__init__() (lambeq.lossfunction method)": [[52, "lambeq.LossFunction.__init__"]], "__init__() (lambeq.mpsansatz method)": [[52, "lambeq.MPSAnsatz.__init__"]], "__init__() (lambeq.model method)": [[52, "lambeq.Model.__init__"]], "__init__() (lambeq.neldermeadoptimizer method)": [[52, "lambeq.NelderMeadOptimizer.__init__"]], "__init__() (lambeq.numpymodel method)": [[52, "lambeq.NumpyModel.__init__"]], "__init__() (lambeq.optimizer method)": [[52, "lambeq.Optimizer.__init__"]], "__init__() (lambeq.pennylanemodel method)": [[52, "lambeq.PennyLaneModel.__init__"]], "__init__() (lambeq.pytorchmodel method)": [[52, "lambeq.PytorchModel.__init__"]], "__init__() (lambeq.pytorchtrainer method)": [[52, "lambeq.PytorchTrainer.__init__"]], "__init__() (lambeq.quantummodel method)": [[52, "lambeq.QuantumModel.__init__"]], "__init__() (lambeq.quantumtrainer method)": [[52, "lambeq.QuantumTrainer.__init__"]], "__init__() (lambeq.rewriter method)": [[52, "lambeq.Rewriter.__init__"]], "__init__() (lambeq.rotosolveoptimizer method)": [[52, "lambeq.RotosolveOptimizer.__init__"]], "__init__() (lambeq.spsaoptimizer method)": [[52, "lambeq.SPSAOptimizer.__init__"]], "__init__() (lambeq.sim14ansatz method)": [[52, "lambeq.Sim14Ansatz.__init__"]], "__init__() (lambeq.sim15ansatz method)": [[52, "lambeq.Sim15Ansatz.__init__"]], "__init__() (lambeq.sim4ansatz method)": [[52, "lambeq.Sim4Ansatz.__init__"]], "__init__() (lambeq.simplerewriterule method)": [[52, "lambeq.SimpleRewriteRule.__init__"]], "__init__() (lambeq.spacytokeniser method)": [[52, "lambeq.SpacyTokeniser.__init__"]], "__init__() (lambeq.spideransatz method)": [[52, "lambeq.SpiderAnsatz.__init__"]], "__init__() (lambeq.stronglyentanglingansatz method)": [[52, "lambeq.StronglyEntanglingAnsatz.__init__"]], "__init__() (lambeq.tensoransatz method)": [[52, "lambeq.TensorAnsatz.__init__"]], "__init__() (lambeq.tketmodel method)": [[52, "lambeq.TketModel.__init__"]], "__init__() (lambeq.trainer method)": [[52, "lambeq.Trainer.__init__"]], "__init__() (lambeq.treereader method)": [[52, "lambeq.TreeReader.__init__"]], "__init__() (lambeq.unifycodomainrewriter method)": [[52, "lambeq.UnifyCodomainRewriter.__init__"]], "__init__() (lambeq.unknownwordsrewriterule method)": [[52, "lambeq.UnknownWordsRewriteRule.__init__"]], "__init__() (lambeq.webparseerror method)": [[52, "lambeq.WebParseError.__init__"]], "__init__() (lambeq.webparser method)": [[52, "lambeq.WebParser.__init__"]], "add_many() (lambeq.checkpoint method)": [[52, "lambeq.Checkpoint.add_many"]], "add_rules() (lambeq.rewriter method)": [[52, "lambeq.Rewriter.add_rules"]], "apply() (lambeq.ccgrule method)": [[52, "lambeq.CCGRule.apply"]], "argument (lambeq.ccgtype property)": [[52, "lambeq.CCGType.argument"]], "available_models() (lambeq.bobcatparser static method)": [[52, "lambeq.BobcatParser.available_models"]], "available_modes() (lambeq.treereader class method)": [[52, "lambeq.TreeReader.available_modes"]], "available_rules() (lambeq.rewriter class method)": [[52, "lambeq.Rewriter.available_rules"]], "backward() (lambeq.neldermeadoptimizer method)": [[52, "lambeq.NelderMeadOptimizer.backward"]], "backward() (lambeq.optimizer method)": [[52, "lambeq.Optimizer.backward"]], "backward() (lambeq.rotosolveoptimizer method)": [[52, "lambeq.RotosolveOptimizer.backward"]], "backward() (lambeq.spsaoptimizer method)": [[52, "lambeq.SPSAOptimizer.backward"]], "bounds (lambeq.neldermeadoptimizer attribute)": [[52, "lambeq.NelderMeadOptimizer.bounds"]], "calculate_loss() (lambeq.binarycrossentropyloss method)": [[52, "lambeq.BinaryCrossEntropyLoss.calculate_loss"]], "calculate_loss() (lambeq.crossentropyloss method)": [[52, "lambeq.CrossEntropyLoss.calculate_loss"]], "calculate_loss() (lambeq.lossfunction method)": [[52, "lambeq.LossFunction.calculate_loss"]], "calculate_loss() (lambeq.mseloss method)": [[52, "lambeq.MSELoss.calculate_loss"]], "check_match() (lambeq.ccgrule method)": [[52, "lambeq.CCGRule.check_match"]], "child (lambeq.ccgtree property)": [[52, "lambeq.CCGTree.child"]], "circuit() (lambeq.iqpansatz method)": [[52, "lambeq.IQPAnsatz.circuit"]], "circuit() (lambeq.sim14ansatz method)": [[52, "lambeq.Sim14Ansatz.circuit"]], "circuit() (lambeq.sim15ansatz method)": [[52, "lambeq.Sim15Ansatz.circuit"]], "circuit() (lambeq.sim4ansatz method)": [[52, "lambeq.Sim4Ansatz.circuit"]], "circuit() (lambeq.stronglyentanglingansatz method)": [[52, "lambeq.StronglyEntanglingAnsatz.circuit"]], "circuit_map (lambeq.pennylanemodel attribute)": [[52, "lambeq.PennyLaneModel.circuit_map"]], "collapse_noun_phrases() (lambeq.ccgtree method)": [[52, "lambeq.CCGTree.collapse_noun_phrases"]], "default_assumptions (lambeq.symbol attribute)": [[52, "lambeq.Symbol.default_assumptions"]], "deriv() (lambeq.ccgtree method)": [[52, "lambeq.CCGTree.deriv"]], "directed_cod (lambeq.symbol attribute)": [[52, "lambeq.Symbol.directed_cod"]], "directed_dom (lambeq.symbol attribute)": [[52, "lambeq.Symbol.directed_dom"]], "direction (lambeq.ccgtype property)": [[52, "lambeq.CCGType.direction"]], "fit() (lambeq.quantumtrainer method)": [[52, "lambeq.QuantumTrainer.fit"]], "fit() (lambeq.trainer method)": [[52, "lambeq.Trainer.fit"]], "forward() (lambeq.model method)": [[52, "lambeq.Model.forward"]], "forward() (lambeq.numpymodel method)": [[52, "lambeq.NumpyModel.forward"]], "forward() (lambeq.pennylanemodel method)": [[52, "lambeq.PennyLaneModel.forward"]], "forward() (lambeq.pytorchmodel method)": [[52, "lambeq.PytorchModel.forward"]], "forward() (lambeq.quantummodel method)": [[52, "lambeq.QuantumModel.forward"]], "forward() (lambeq.tketmodel method)": [[52, "lambeq.TketModel.forward"]], "from_checkpoint() (lambeq.model class method)": [[52, "lambeq.Model.from_checkpoint"]], "from_diagrams() (lambeq.model class method)": [[52, "lambeq.Model.from_diagrams"]], "from_diagrams() (lambeq.pennylanemodel class method)": [[52, "lambeq.PennyLaneModel.from_diagrams"]], "from_diagrams() (lambeq.unknownwordsrewriterule class method)": [[52, "lambeq.UnknownWordsRewriteRule.from_diagrams"]], "from_file() (lambeq.checkpoint class method)": [[52, "lambeq.Checkpoint.from_file"]], "from_json() (lambeq.ccgtree class method)": [[52, "lambeq.CCGTree.from_json"]], "get_diagram_output() (lambeq.model method)": [[52, "lambeq.Model.get_diagram_output"]], "get_diagram_output() (lambeq.numpymodel method)": [[52, "lambeq.NumpyModel.get_diagram_output"]], "get_diagram_output() (lambeq.pennylanemodel method)": [[52, "lambeq.PennyLaneModel.get_diagram_output"]], "get_diagram_output() (lambeq.pytorchmodel method)": [[52, "lambeq.PytorchModel.get_diagram_output"]], "get_diagram_output() (lambeq.quantummodel method)": [[52, "lambeq.QuantumModel.get_diagram_output"]], "get_diagram_output() (lambeq.tketmodel method)": [[52, "lambeq.TketModel.get_diagram_output"]], "has_value() (lambeq.verbositylevel class method)": [[52, "lambeq.VerbosityLevel.has_value"]], "infer_rule() (lambeq.ccgrule class method)": [[52, "lambeq.CCGRule.infer_rule"]], "initialise_weights() (lambeq.model method)": [[52, "lambeq.Model.initialise_weights"]], "initialise_weights() (lambeq.pennylanemodel method)": [[52, "lambeq.PennyLaneModel.initialise_weights"]], "initialise_weights() (lambeq.pytorchmodel method)": [[52, "lambeq.PytorchModel.initialise_weights"]], "initialise_weights() (lambeq.quantummodel method)": [[52, "lambeq.QuantumModel.initialise_weights"]], "is_atomic (lambeq.ccgtype attribute)": [[52, "lambeq.CCGType.is_atomic"]], "is_complex (lambeq.ccgtype attribute)": [[52, "lambeq.CCGType.is_complex"]], "is_conjoinable (lambeq.ccgtype property)": [[52, "lambeq.CCGType.is_conjoinable"]], "is_empty (lambeq.ccgtype attribute)": [[52, "lambeq.CCGType.is_empty"]], "is_over (lambeq.ccgtype attribute)": [[52, "lambeq.CCGType.is_over"]], "is_under (lambeq.ccgtype attribute)": [[52, "lambeq.CCGType.is_under"]], "lambdas (lambeq.numpymodel attribute)": [[52, "lambeq.NumpyModel.lambdas"]], "lambeq": [[52, "module-lambeq"]], "left (lambeq.ccgtree property)": [[52, "lambeq.CCGTree.left"]], "left (lambeq.ccgtype property)": [[52, "lambeq.CCGType.left"]], "load() (lambeq.model method)": [[52, "lambeq.Model.load"]], "load_state_dict() (lambeq.neldermeadoptimizer method)": [[52, "lambeq.NelderMeadOptimizer.load_state_dict"]], "load_state_dict() (lambeq.optimizer method)": [[52, "lambeq.Optimizer.load_state_dict"]], "load_state_dict() (lambeq.rotosolveoptimizer method)": [[52, "lambeq.RotosolveOptimizer.load_state_dict"]], "load_state_dict() (lambeq.spsaoptimizer method)": [[52, "lambeq.SPSAOptimizer.load_state_dict"]], "load_training_checkpoint() (lambeq.trainer method)": [[52, "lambeq.Trainer.load_training_checkpoint"]], "matches() (lambeq.coordinationrewriterule method)": [[52, "lambeq.CoordinationRewriteRule.matches"]], "matches() (lambeq.curryrewriterule method)": [[52, "lambeq.CurryRewriteRule.matches"]], "matches() (lambeq.diagramrewriter method)": [[52, "lambeq.DiagramRewriter.matches"]], "matches() (lambeq.removecupsrewriter method)": [[52, "lambeq.RemoveCupsRewriter.matches"]], "matches() (lambeq.removeswapsrewriter method)": [[52, "lambeq.RemoveSwapsRewriter.matches"]], "matches() (lambeq.rewriterule method)": [[52, "lambeq.RewriteRule.matches"]], "matches() (lambeq.simplerewriterule method)": [[52, "lambeq.SimpleRewriteRule.matches"]], "matches() (lambeq.unifycodomainrewriter method)": [[52, "lambeq.UnifyCodomainRewriter.matches"]], "matches() (lambeq.unknownwordsrewriterule method)": [[52, "lambeq.UnknownWordsRewriteRule.matches"]], "model (lambeq.neldermeadoptimizer attribute)": [[52, "lambeq.NelderMeadOptimizer.model"]], "model (lambeq.pytorchtrainer attribute)": [[52, "lambeq.PytorchTrainer.model"]], "model (lambeq.quantumtrainer attribute)": [[52, "lambeq.QuantumTrainer.model"]], "model (lambeq.rotosolveoptimizer attribute)": [[52, "lambeq.RotosolveOptimizer.model"]], "model (lambeq.spsaoptimizer attribute)": [[52, "lambeq.SPSAOptimizer.model"]], "name (lambeq.atomictype attribute)": [[52, "lambeq.AtomicType.name"]], "name (lambeq.ccgtype property)": [[52, "lambeq.CCGType.name"]], "name (lambeq.symbol attribute)": [[52, "lambeq.Symbol.name"]], "ob_size() (lambeq.circuitansatz method)": [[52, "lambeq.CircuitAnsatz.ob_size"]], "objective() (lambeq.neldermeadoptimizer method)": [[52, "lambeq.NelderMeadOptimizer.objective"]], "output_type (lambeq.unifycodomainrewriter attribute)": [[52, "lambeq.UnifyCodomainRewriter.output_type"]], "over() (lambeq.ccgtype method)": [[52, "lambeq.CCGType.over"]], "params_shape() (lambeq.circuitansatz method)": [[52, "lambeq.CircuitAnsatz.params_shape"]], "params_shape() (lambeq.iqpansatz method)": [[52, "lambeq.IQPAnsatz.params_shape"]], "params_shape() (lambeq.sim14ansatz method)": [[52, "lambeq.Sim14Ansatz.params_shape"]], "params_shape() (lambeq.sim15ansatz method)": [[52, "lambeq.Sim15Ansatz.params_shape"]], "params_shape() (lambeq.sim4ansatz method)": [[52, "lambeq.Sim4Ansatz.params_shape"]], "params_shape() (lambeq.stronglyentanglingansatz method)": [[52, "lambeq.StronglyEntanglingAnsatz.params_shape"]], "parse() (lambeq.ccgtype class method)": [[52, "lambeq.CCGType.parse"]], "placeholder() (lambeq.simplerewriterule class method)": [[52, "lambeq.SimpleRewriteRule.placeholder"]], "project (lambeq.spsaoptimizer attribute)": [[52, "lambeq.SPSAOptimizer.project"]], "project() (lambeq.neldermeadoptimizer method)": [[52, "lambeq.NelderMeadOptimizer.project"]], "project() (lambeq.rotosolveoptimizer static method)": [[52, "lambeq.RotosolveOptimizer.project"]], "replace() (lambeq.ccgtype method)": [[52, "lambeq.CCGType.replace"]], "replace_result() (lambeq.ccgtype method)": [[52, "lambeq.CCGType.replace_result"]], "resolve() (lambeq.ccgrule method)": [[52, "lambeq.CCGRule.resolve"]], "result (lambeq.ccgtype property)": [[52, "lambeq.CCGType.result"]], "rewrite() (lambeq.coordinationrewriterule method)": [[52, "lambeq.CoordinationRewriteRule.rewrite"]], "rewrite() (lambeq.curryrewriterule method)": [[52, "lambeq.CurryRewriteRule.rewrite"]], "rewrite() (lambeq.diagramrewriter method)": [[52, "lambeq.DiagramRewriter.rewrite"]], "rewrite() (lambeq.removecupsrewriter method)": [[52, "lambeq.RemoveCupsRewriter.rewrite"]], "rewrite() (lambeq.removeswapsrewriter method)": [[52, "lambeq.RemoveSwapsRewriter.rewrite"]], "rewrite() (lambeq.rewriterule method)": [[52, "lambeq.RewriteRule.rewrite"]], "rewrite() (lambeq.simplerewriterule method)": [[52, "lambeq.SimpleRewriteRule.rewrite"]], "rewrite() (lambeq.unifycodomainrewriter method)": [[52, "lambeq.UnifyCodomainRewriter.rewrite"]], "rewrite() (lambeq.unknownwordsrewriterule method)": [[52, "lambeq.UnknownWordsRewriteRule.rewrite"]], "right (lambeq.ccgtree property)": [[52, "lambeq.CCGTree.right"]], "right (lambeq.ccgtype property)": [[52, "lambeq.CCGType.right"]], "save() (lambeq.model method)": [[52, "lambeq.Model.save"]], "save_checkpoint() (lambeq.trainer method)": [[52, "lambeq.Trainer.save_checkpoint"]], "section2diagrams() (lambeq.ccgbankparser method)": [[52, "lambeq.CCGBankParser.section2diagrams"]], "section2diagrams_gen() (lambeq.ccgbankparser method)": [[52, "lambeq.CCGBankParser.section2diagrams_gen"]], "section2trees() (lambeq.ccgbankparser method)": [[52, "lambeq.CCGBankParser.section2trees"]], "section2trees_gen() (lambeq.ccgbankparser method)": [[52, "lambeq.CCGBankParser.section2trees_gen"]], "sentence2diagram() (lambeq.ccgparser method)": [[52, "lambeq.CCGParser.sentence2diagram"]], "sentence2diagram() (lambeq.depccgparser method)": [[52, "lambeq.DepCCGParser.sentence2diagram"]], "sentence2diagram() (lambeq.linearreader method)": [[52, "lambeq.LinearReader.sentence2diagram"]], "sentence2diagram() (lambeq.reader method)": [[52, "lambeq.Reader.sentence2diagram"]], "sentence2diagram() (lambeq.treereader method)": [[52, "lambeq.TreeReader.sentence2diagram"]], "sentence2tree() (lambeq.ccgparser method)": [[52, "lambeq.CCGParser.sentence2tree"]], "sentence2tree() (lambeq.depccgparser method)": [[52, "lambeq.DepCCGParser.sentence2tree"]], "sentences2diagrams() (lambeq.ccgparser method)": [[52, "lambeq.CCGParser.sentences2diagrams"]], "sentences2diagrams() (lambeq.reader method)": [[52, "lambeq.Reader.sentences2diagrams"]], "sentences2trees() (lambeq.bobcatparser method)": [[52, "lambeq.BobcatParser.sentences2trees"]], "sentences2trees() (lambeq.ccgbankparser method)": [[52, "lambeq.CCGBankParser.sentences2trees"]], "sentences2trees() (lambeq.ccgparser method)": [[52, "lambeq.CCGParser.sentences2trees"]], "sentences2trees() (lambeq.depccgparser method)": [[52, "lambeq.DepCCGParser.sentences2trees"]], "sentences2trees() (lambeq.webparser method)": [[52, "lambeq.WebParser.sentences2trees"]], "shuffle_data() (lambeq.dataset static method)": [[52, "lambeq.Dataset.shuffle_data"]], "size (lambeq.symbol property)": [[52, "lambeq.Symbol.size"]], "slash() (lambeq.ccgtype method)": [[52, "lambeq.CCGType.slash"]], "sort_key() (lambeq.symbol method)": [[52, "lambeq.Symbol.sort_key"]], "split() (lambeq.ccgtype method)": [[52, "lambeq.CCGType.split"]], "split_sentences() (lambeq.spacytokeniser method)": [[52, "lambeq.SpacyTokeniser.split_sentences"]], "split_sentences() (lambeq.tokeniser method)": [[52, "lambeq.Tokeniser.split_sentences"]], "state_dict() (lambeq.neldermeadoptimizer method)": [[52, "lambeq.NelderMeadOptimizer.state_dict"]], "state_dict() (lambeq.optimizer method)": [[52, "lambeq.Optimizer.state_dict"]], "state_dict() (lambeq.rotosolveoptimizer method)": [[52, "lambeq.RotosolveOptimizer.state_dict"]], "state_dict() (lambeq.spsaoptimizer method)": [[52, "lambeq.SPSAOptimizer.state_dict"]], "step() (lambeq.neldermeadoptimizer method)": [[52, "lambeq.NelderMeadOptimizer.step"]], "step() (lambeq.optimizer method)": [[52, "lambeq.Optimizer.step"]], "step() (lambeq.rotosolveoptimizer method)": [[52, "lambeq.RotosolveOptimizer.step"]], "step() (lambeq.spsaoptimizer method)": [[52, "lambeq.SPSAOptimizer.step"]], "symbol (lambeq.ccgrule property)": [[52, "lambeq.CCGRule.symbol"]], "symbol_weight_map (lambeq.pennylanemodel attribute)": [[52, "lambeq.PennyLaneModel.symbol_weight_map"]], "symbols (lambeq.numpymodel attribute)": [[52, "lambeq.NumpyModel.symbols"]], "symbols (lambeq.pennylanemodel attribute)": [[52, "lambeq.PennyLaneModel.symbols"]], "symbols (lambeq.pytorchmodel attribute)": [[52, "lambeq.PytorchModel.symbols"]], "symbols (lambeq.quantummodel attribute)": [[52, "lambeq.QuantumModel.symbols"]], "symbols (lambeq.tketmodel attribute)": [[52, "lambeq.TketModel.symbols"]], "text (lambeq.ccgtree property)": [[52, "lambeq.CCGTree.text"]], "to_diagram() (lambeq.ccgtree method)": [[52, "lambeq.CCGTree.to_diagram"]], "to_file() (lambeq.checkpoint method)": [[52, "lambeq.Checkpoint.to_file"]], "to_grammar() (lambeq.ccgtype method)": [[52, "lambeq.CCGType.to_grammar"]], "to_json() (lambeq.ccgtree method)": [[52, "lambeq.CCGTree.to_json"]], "to_string() (lambeq.ccgtype method)": [[52, "lambeq.CCGType.to_string"]], "tokenise_sentence() (lambeq.tokeniser method)": [[52, "lambeq.Tokeniser.tokenise_sentence"]], "tokenise_sentences() (lambeq.spacytokeniser method)": [[52, "lambeq.SpacyTokeniser.tokenise_sentences"]], "tokenise_sentences() (lambeq.tokeniser method)": [[52, "lambeq.Tokeniser.tokenise_sentences"]], "train_costs (lambeq.pytorchtrainer attribute)": [[52, "lambeq.PytorchTrainer.train_costs"]], "train_costs (lambeq.quantumtrainer attribute)": [[52, "lambeq.QuantumTrainer.train_costs"]], "train_epoch_costs (lambeq.pytorchtrainer attribute)": [[52, "lambeq.PytorchTrainer.train_epoch_costs"]], "train_epoch_costs (lambeq.quantumtrainer attribute)": [[52, "lambeq.QuantumTrainer.train_epoch_costs"]], "train_eval_results (lambeq.pytorchtrainer attribute)": [[52, "lambeq.PytorchTrainer.train_eval_results"]], "train_eval_results (lambeq.quantumtrainer attribute)": [[52, "lambeq.QuantumTrainer.train_eval_results"]], "training (lambeq.pennylanemodel attribute)": [[52, "lambeq.PennyLaneModel.training"]], "training (lambeq.pytorchmodel attribute)": [[52, "lambeq.PytorchModel.training"]], "training_step() (lambeq.pytorchtrainer method)": [[52, "lambeq.PytorchTrainer.training_step"]], "training_step() (lambeq.quantumtrainer method)": [[52, "lambeq.QuantumTrainer.training_step"]], "training_step() (lambeq.trainer method)": [[52, "lambeq.Trainer.training_step"]], "tree2diagram() (lambeq.treereader static method)": [[52, "lambeq.TreeReader.tree2diagram"]], "under() (lambeq.ccgtype method)": [[52, "lambeq.CCGType.under"]], "update_hyper_params() (lambeq.neldermeadoptimizer method)": [[52, "lambeq.NelderMeadOptimizer.update_hyper_params"]], "update_hyper_params() (lambeq.spsaoptimizer method)": [[52, "lambeq.SPSAOptimizer.update_hyper_params"]], "val_costs (lambeq.pytorchtrainer attribute)": [[52, "lambeq.PytorchTrainer.val_costs"]], "val_costs (lambeq.quantumtrainer attribute)": [[52, "lambeq.QuantumTrainer.val_costs"]], "val_eval_results (lambeq.pytorchtrainer attribute)": [[52, "lambeq.PytorchTrainer.val_eval_results"]], "val_eval_results (lambeq.quantumtrainer attribute)": [[52, "lambeq.QuantumTrainer.val_eval_results"]], "validation_step() (lambeq.pytorchtrainer method)": [[52, "lambeq.PytorchTrainer.validation_step"]], "validation_step() (lambeq.quantumtrainer method)": [[52, "lambeq.QuantumTrainer.validation_step"]], "validation_step() (lambeq.trainer method)": [[52, "lambeq.Trainer.validation_step"]], "weights (lambeq.numpymodel attribute)": [[52, "lambeq.NumpyModel.weights"]], "weights (lambeq.pennylanemodel attribute)": [[52, "lambeq.PennyLaneModel.weights"]], "weights (lambeq.pytorchmodel attribute)": [[52, "lambeq.PytorchModel.weights"]], "weights (lambeq.quantummodel attribute)": [[52, "lambeq.QuantumModel.weights"]], "weights (lambeq.tketmodel attribute)": [[52, "lambeq.TketModel.weights"]], "without_trivial_unary_rules() (lambeq.ccgtree method)": [[52, "lambeq.CCGTree.without_trivial_unary_rules"]], "zero_grad() (lambeq.optimizer method)": [[52, "lambeq.Optimizer.zero_grad"]]}})