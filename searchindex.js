Search.setIndex({"docnames": ["CONTRIBUTING", "_code/discocat", "_code/extend-lambeq", "_code/monoidal", "_code/parameterise", "_code/rewrite", "_code/sentence-input", "_code/trainer_classical", "_code/trainer_hybrid", "_code/trainer_quantum", "_code/training-symbols", "_code/training-usecase", "advanced", "bibliography", "cli", "discopy", "examples/circuit", "examples/classical_pipeline", "examples/parser", "examples/pennylane", "examples/quantum_pipeline", "examples/quantum_pipeline_jax", "examples/reader", "examples/rewrite", "examples/tensor", "examples/tokenisation", "examples/tree_reader", "genindex", "glossary", "index", "installation", "lambeq.ansatz", "lambeq.bobcat", "lambeq.pregroups", "lambeq.rewrite", "lambeq.text2diagram", "lambeq.tokeniser", "lambeq.training", "manual_training", "models", "nlp-class", "nlp-data", "nlp-intro", "nlp-ml", "nlp-refs", "notebooks", "package-api", "parsing", "pipeline", "puml/README", "release_notes", "root-api", "string_diagrams", "training", "troubleshooting", "tutorials/discocat", "tutorials/extend-lambeq", "tutorials/monoidal", "tutorials/parameterise", "tutorials/rewrite", "tutorials/sentence-input", "tutorials/trainer_classical", "tutorials/trainer_hybrid", "tutorials/trainer_quantum", "tutorials/training-symbols", "tutorials/training-usecase", "uml-diagrams", "use-cases"], "filenames": ["CONTRIBUTING.rst", "_code/discocat.ipynb", "_code/extend-lambeq.ipynb", "_code/monoidal.ipynb", "_code/parameterise.ipynb", "_code/rewrite.ipynb", "_code/sentence-input.ipynb", "_code/trainer_classical.ipynb", "_code/trainer_hybrid.ipynb", "_code/trainer_quantum.ipynb", "_code/training-symbols.ipynb", "_code/training-usecase.ipynb", "advanced.rst", "bibliography.rst", "cli.rst", "discopy.rst", "examples/circuit.ipynb", "examples/classical_pipeline.ipynb", "examples/parser.ipynb", "examples/pennylane.ipynb", "examples/quantum_pipeline.ipynb", "examples/quantum_pipeline_jax.ipynb", "examples/reader.ipynb", "examples/rewrite.ipynb", "examples/tensor.ipynb", "examples/tokenisation.ipynb", "examples/tree_reader.ipynb", "genindex.rst", "glossary.rst", "index.rst", "installation.rst", "lambeq.ansatz.rst", "lambeq.bobcat.rst", "lambeq.pregroups.rst", "lambeq.rewrite.rst", "lambeq.text2diagram.rst", "lambeq.tokeniser.rst", "lambeq.training.rst", "manual_training.rst", "models.rst", "nlp-class.rst", "nlp-data.rst", "nlp-intro.rst", "nlp-ml.rst", "nlp-refs.rst", "notebooks.rst", "package-api.rst", "parsing.rst", "pipeline.rst", "puml/README.md", "release_notes.rst", "root-api.rst", "string_diagrams.rst", "training.rst", "troubleshooting.rst", "tutorials/discocat.ipynb", "tutorials/extend-lambeq.ipynb", "tutorials/monoidal.ipynb", "tutorials/parameterise.ipynb", "tutorials/rewrite.ipynb", "tutorials/sentence-input.ipynb", "tutorials/trainer_classical.ipynb", "tutorials/trainer_hybrid.ipynb", "tutorials/trainer_quantum.ipynb", "tutorials/training-symbols.ipynb", "tutorials/training-usecase.ipynb", "uml-diagrams.rst", "use-cases.rst"], "titles": ["Contributing to lambeq", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Advanced: DisCoPy usage", "Bibliography", "Command-line interface", "DisCoPy", "Circuit", "Classical pipeline", "Parser", "Training hybrid models using the Pennylane backend", "Quantum pipeline using the Quantum Trainer", "Quantum pipeline using JAX backend", "Reader", "Rewrite", "Tensor", "Tokenisation", "Tree reader", "Index", "Glossary", "lambeq", "Installation", "lambeq.ansatz", "lambeq.bobcat", "lambeq.pregroups", "lambeq.rewrite", "lambeq.text2diagram", "lambeq.tokeniser", "lambeq.training", "Advanced: Manual training", "Choosing a model", "Text classification", "Working with text data", "Introduction", "Machine learning best practices", "References for further study", "Examples", "Subpackages", "Syntactic parsing", "Pipeline", "Creating PNG files", "Release notes", "lambeq package", "String diagrams", "Step 4: Training", "Troubleshooting", "DisCoCat in DisCoPy", "Advanced: Extending lambeq", "Monoidal categories in DisCoPy", "Step 3. Parameterisation", "Step 2. Diagram rewriting", "Step 1. Sentence input", "Training: Classical case", "Training: Hybrid case", "Training: Quantum case", "Introduction to symbols", "A complete use case", "Class diagrams", "lambeq use cases"], "terms": {"ar": [0, 1, 2, 3, 14, 15, 16, 19, 22, 25, 28, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 47, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67], "welcom": 0, "especi": [0, 52, 67], "regard": 0, "ad": [0, 14, 32, 33, 37, 50, 51, 53, 58, 60], "support": [0, 14, 15, 28, 30, 32, 35, 39, 41, 47, 48, 50, 51, 53, 55, 60], "new": [0, 13, 14, 15, 29, 32, 33, 35, 37, 41, 43, 50, 51, 55, 56, 67], "parser": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 15, 16, 20, 21, 24, 25, 28, 29, 30, 32, 35, 39, 45, 46, 47, 48, 50, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65], "extens": [0, 4, 9, 20, 29, 37, 39, 48, 50, 51, 58, 63, 67], "ccgparser": [0, 29, 35, 46, 47, 50, 51, 55], "class": [0, 1, 2, 7, 8, 14, 19, 22, 25, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 67], "composit": [0, 13, 14, 15, 28, 29, 33, 35, 46, 48, 50, 51, 52, 55, 56, 57, 60], "scheme": [0, 14, 28, 48, 50, 60], "reader": [0, 2, 6, 8, 17, 19, 28, 29, 35, 44, 45, 46, 50, 51, 62], "rewrit": [0, 2, 5, 28, 29, 45, 48, 50, 51, 52, 55], "rule": [0, 5, 28, 29, 32, 33, 34, 35, 39, 42, 45, 46, 48, 50, 51, 53, 57, 59, 60], "rewriterul": [0, 2, 29, 34, 46, 51], "tensor": [0, 1, 2, 4, 7, 8, 10, 11, 12, 14, 17, 19, 23, 28, 29, 31, 32, 37, 38, 39, 42, 45, 46, 48, 50, 51, 56, 58, 59, 60, 61, 62, 65], "circuit": [0, 1, 2, 4, 8, 10, 12, 13, 14, 15, 22, 28, 29, 31, 33, 34, 37, 38, 39, 42, 45, 46, 48, 50, 51, 52, 53, 56, 58], "ans\u00e4tz": [0, 15, 28, 29, 46, 48, 50, 58], "tensoransatz": [0, 2, 4, 10, 24, 29, 31, 39, 46, 50, 51, 55, 58, 64], "circuitansatz": [0, 2, 29, 31, 46, 50, 51, 55, 58], "trainer": [0, 7, 8, 9, 19, 28, 29, 37, 45, 46, 48, 50, 51, 53, 67], "model": [0, 7, 8, 9, 13, 15, 17, 20, 21, 28, 29, 30, 32, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 65], "optim": [0, 7, 8, 9, 13, 17, 19, 20, 21, 29, 32, 37, 39, 46, 50, 51, 53, 61, 62, 63], "train": [0, 7, 8, 9, 14, 28, 29, 32, 33, 35, 39, 40, 41, 42, 43, 45, 48, 50, 51, 56, 59, 60], "packag": [0, 25, 29, 38, 39, 41, 43, 46, 47, 50, 53, 56, 58, 59, 60, 63, 65, 66], "all": [0, 1, 14, 15, 19, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 46, 48, 50, 51, 53, 55, 56, 58, 60, 61, 62, 63], "accept": [0, 14, 32, 37, 50], "includ": [0, 14, 25, 28, 30, 32, 37, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 53, 54, 58, 60, 67], "next": [0, 7, 8, 9, 14, 17, 20, 21, 28, 32, 42, 61, 62, 63], "offici": 0, "releas": [0, 14, 29, 32, 37, 47, 48, 54, 61], "contributor": 0, "properli": [0, 14, 16, 29, 32, 33, 42, 51, 56, 60], "attribut": [0, 31, 32, 35, 37, 51, 53, 55, 64, 67], "correspond": [0, 8, 14, 25, 28, 32, 33, 35, 37, 38, 39, 41, 50, 51, 52, 53, 55, 58, 60, 62, 67], "note": [0, 13, 14, 25, 29, 32, 33, 34, 37, 39, 41, 51, 52, 54, 55, 56, 58, 59, 60, 63, 65], "If": [0, 14, 29, 32, 33, 34, 35, 37, 39, 51, 54, 56, 61, 62, 63, 65, 67], "you": [0, 1, 12, 14, 15, 16, 29, 30, 32, 37, 39, 41, 43, 49, 53, 54, 55, 56, 60, 62, 63, 64, 67], "have": [0, 1, 2, 12, 14, 19, 28, 29, 32, 34, 35, 37, 38, 39, 40, 41, 42, 47, 49, 50, 51, 52, 55, 56, 57, 61, 62, 63, 64, 67], "alreadi": [0, 14, 32, 35, 37, 51, 56, 63], "implement": [0, 13, 15, 28, 31, 32, 34, 35, 37, 39, 42, 46, 47, 48, 50, 51, 53, 55, 56, 60, 61, 63, 67], "test": [0, 7, 8, 9, 11, 17, 18, 20, 21, 32, 34, 41, 42, 43, 45, 50, 51, 53, 61, 63, 65, 67], "propos": 0, "can": [0, 1, 3, 6, 14, 15, 19, 22, 25, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "review": [0, 41, 42], "": [0, 1, 2, 4, 10, 11, 13, 14, 15, 16, 22, 23, 24, 28, 29, 31, 32, 33, 35, 37, 39, 40, 42, 43, 44, 46, 47, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67], "develop": [0, 7, 8, 9, 17, 20, 21, 28, 29, 32, 42, 43, 44, 50, 52, 61, 62, 63, 66], "team": [0, 9, 29, 63], "keep": [0, 14, 32, 35, 47, 51], "mind": [0, 67], "follow": [0, 14, 15, 25, 28, 31, 32, 33, 35, 37, 38, 39, 41, 42, 43, 49, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67], "guidelin": [0, 56], "pleas": [0, 16, 29, 32, 37, 51, 54], "provid": [0, 8, 14, 15, 25, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 66, 67], "detail": [0, 29, 32, 37, 41, 43, 47, 48, 50, 51, 53, 55, 56, 60, 67], "descript": [0, 50, 51, 59, 67], "your": [0, 14, 16, 29, 32, 33, 37, 39, 43, 51, 53, 56, 60, 62, 67], "refer": [0, 19, 25, 28, 32, 37, 41, 50, 53, 55, 56, 58, 60, 62, 67], "public": [0, 67], "other": [0, 28, 29, 32, 35, 37, 38, 39, 40, 41, 42, 50, 51, 55, 58, 67], "materi": [0, 44, 50], "when": [0, 1, 14, 22, 25, 31, 32, 33, 34, 35, 37, 38, 40, 41, 47, 50, 51, 52, 54, 55, 57, 60, 62, 64, 65, 67], "appropri": [0, 43, 48, 56, 60, 67], "suggest": 0, "untest": 0, "hoc": [0, 32], "compon": [0, 15, 66], "whose": [0, 28, 32, 37], "motiv": 0, "i": [0, 1, 2, 3, 6, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "well": [0, 28, 32, 35, 37, 40, 42, 43, 46, 47, 51, 52, 57], "defin": [0, 4, 7, 10, 14, 28, 32, 33, 37, 38, 39, 42, 45, 48, 50, 51, 52, 53, 55, 56, 57, 58, 64], "cannot": [0, 1, 14, 35, 51, 55, 65], "sure": [0, 16, 32], "about": [0, 13, 14, 19, 29, 32, 44, 56, 60, 62], "idea": [0, 43], "would": [0, 14, 25, 32, 37, 40, 41, 50, 60, 62, 66, 67], "prefer": [0, 14, 39, 42, 47, 57], "contact": 0, "discuss": [0, 14, 32, 41], "befor": [0, 1, 10, 14, 32, 33, 35, 37, 51, 55, 56, 63, 64], "examin": [0, 42, 60, 64], "exist": [0, 28, 32, 37, 42, 51, 55, 57, 61], "try": [0, 22, 23, 29, 32, 41], "appli": [0, 1, 5, 10, 14, 28, 31, 32, 33, 34, 35, 37, 42, 50, 51, 55, 56, 57, 58, 59, 62, 63, 64, 65], "same": [0, 1, 8, 14, 19, 28, 32, 33, 35, 37, 51, 54, 55, 56, 60, 61, 62, 67], "convent": 0, "style": [0, 28], "format": [0, 8, 14, 15, 19, 32, 35, 37, 41, 42, 47, 51, 55, 58, 59, 62], "document": [0, 14, 15, 29, 32, 35, 37, 41, 45, 50, 51, 56, 58], "In": [0, 1, 14, 19, 25, 28, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "gener": [0, 14, 28, 31, 32, 33, 34, 35, 37, 38, 40, 42, 46, 47, 48, 49, 50, 51, 55, 56, 57, 60], "we": [0, 1, 2, 6, 14, 19, 23, 25, 28, 32, 33, 37, 38, 39, 42, 44, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "standard": [0, 15, 28, 32, 35, 39, 40, 45, 47, 50, 51, 53, 56, 57, 58, 59, 63, 65], "pep": 0, "8": [0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 17, 19, 20, 21, 23, 24, 32, 55, 56, 57, 60, 61, 62, 63, 64, 65], "python": [0, 13, 15, 28, 29, 30, 32, 39, 44, 47, 50, 57], "guid": [0, 32, 44], "familiar": [0, 15], "look": [0, 32, 37, 55, 60, 62], "docstr": [0, 32, 37], "us": [0, 1, 6, 8, 9, 11, 12, 15, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 66], "numpydoc": 0, "The": [0, 2, 13, 14, 15, 25, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "signatur": [0, 32, 37, 61, 63], "method": [0, 14, 22, 25, 28, 32, 33, 34, 35, 37, 39, 41, 42, 43, 46, 50, 51, 53, 55, 56, 57, 60, 61, 62, 63, 64], "privat": [0, 32], "need": [0, 14, 25, 29, 30, 32, 33, 37, 38, 39, 41, 42, 43, 47, 51, 56, 58, 60, 61, 62, 63, 64, 65, 67], "type": [0, 1, 2, 3, 4, 10, 13, 14, 17, 28, 29, 31, 32, 33, 34, 35, 37, 38, 41, 43, 47, 50, 51, 52, 55, 56, 57, 58, 59, 60, 64], "annot": [0, 28, 32, 35, 47, 51, 52, 58], "modul": [0, 32, 37, 46, 50, 51, 55, 57, 59, 61], "more": [0, 14, 19, 28, 29, 30, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 48, 50, 51, 52, 53, 55, 56, 58, 60, 62, 63, 65, 66, 67], "inform": [0, 13, 28, 29, 30, 31, 32, 37, 39, 41, 42, 51, 56, 58, 60, 65], "accompani": [0, 29], "ani": [0, 3, 14, 28, 29, 31, 32, 33, 35, 37, 41, 42, 43, 48, 51, 52, 55, 56, 57, 58, 59, 60, 62, 63], "function": [0, 8, 14, 19, 28, 29, 31, 32, 34, 35, 37, 38, 39, 50, 51, 53, 55, 56, 58, 62, 67], "set": [0, 7, 8, 9, 11, 13, 14, 16, 17, 20, 21, 25, 28, 32, 34, 35, 37, 41, 43, 50, 51, 55, 58, 60, 61, 62, 63, 64, 65], "coverag": [0, 47, 50], "close": [0, 13, 28, 35, 51, 52, 55, 59, 67], "100": [0, 6, 8, 9, 19, 25, 32, 37, 41, 60, 62, 63], "like": [0, 14, 28, 32, 37, 41, 47, 50, 54, 57, 60, 61, 66], "wai": [0, 14, 28, 29, 32, 38, 40, 41, 42, 52, 55, 57, 60, 62, 67], "get": [0, 1, 3, 4, 14, 19, 32, 35, 37, 38, 42, 43, 46, 50, 51, 55, 57, 58, 60, 62, 65, 67], "dev": [0, 8, 19, 62], "guidanc": 0, "matter": 0, "how": [0, 28, 32, 37, 38, 40, 41, 42, 50, 55, 56, 60], "small": [0, 14, 19, 28, 62, 67], "long": [0, 14, 32, 55, 56, 59], "improv": [0, 39, 41, 50, 59, 62, 65], "pragmat": 0, "clear": [0, 32, 37], "howev": [0, 25, 32, 37, 39, 41, 43, 47, 50, 54, 56, 60, 61], "up": [0, 28, 32, 37, 39, 51, 55, 57, 58], "maintain": 0, "project": [0, 29, 42, 51], "decid": 0, "sole": [0, 32, 42], "purpos": [0, 14, 28, 32, 41, 42, 50, 59, 64], "add": [0, 1, 2, 14, 32, 34, 37, 50, 51, 55, 56, 61], "author": [0, 29, 32], "name": [0, 1, 2, 28, 29, 31, 32, 34, 35, 37, 42, 47, 50, 51, 55, 56, 60], "list": [0, 8, 14, 19, 25, 29, 31, 32, 33, 34, 35, 36, 37, 39, 41, 51, 54, 55, 56, 57, 60, 62], "without": [0, 32, 33, 37, 50, 51, 56, 60, 62, 65], "actual": [0, 1, 25, 33, 40, 51, 55, 56, 57, 60, 64, 67], "valu": [0, 1, 2, 14, 24, 28, 32, 35, 37, 39, 51, 53, 55, 61, 62, 67], "regret": 0, "case": [0, 14, 19, 25, 28, 29, 32, 34, 35, 37, 38, 40, 43, 46, 47, 48, 50, 51, 52, 53, 55, 56, 59, 60, 64], "exampl": [0, 7, 8, 9, 11, 12, 14, 15, 16, 19, 25, 28, 29, 31, 32, 33, 35, 37, 38, 39, 40, 41, 47, 48, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "chang": [0, 14, 28, 32, 33, 37, 50, 51, 56, 60], "variabl": [0, 32], "appar": 0, "reason": [0, 13, 32, 33, 37, 42, 59, 67], "rephras": 0, "comment": 0, "unnecessari": [0, 50, 57], "As": [0, 19, 32, 57, 59, 61, 62, 67], "mention": [0, 50, 57], "abov": [0, 14, 32, 34, 37, 41, 42, 50, 51, 52, 55, 56, 57, 60, 61, 62, 63, 64, 65, 67], "genuin": 0, "state": [0, 1, 23, 28, 30, 31, 32, 33, 34, 37, 39, 46, 47, 48, 50, 51, 52, 55, 59, 62], "For": [0, 3, 14, 15, 28, 32, 33, 35, 37, 39, 40, 41, 44, 47, 50, 51, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "fix": [0, 11, 32, 50, 52, 55, 64, 65], "typo": [0, 50], "miss": [0, 25, 32, 37, 40, 50, 51, 60], "A": [0, 3, 9, 13, 14, 19, 20, 21, 25, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 46, 48, 50, 51, 52, 53, 55, 56, 57, 60, 62, 63, 67], "minor": [0, 50, 63], "complianc": 0, "question": [0, 13, 29], "relat": [0, 14, 15, 28, 32, 42, 47, 52], "send": [0, 14, 29, 47, 50, 52, 55], "email": [0, 29, 40, 62, 67], "cambridgequantum": [0, 29], "com": [0, 29, 32, 47], "ey": 0, "answer": [0, 13], "from": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67], "help": [0, 14, 15, 19, 29, 32, 37, 40, 42, 43, 44, 50, 62], "them": [0, 1, 14, 28, 32, 33, 34, 35, 39, 41, 42, 50, 51, 53, 55, 57, 59, 60, 62, 64, 65, 67], "understand": [0, 12, 32, 41, 42, 43, 44, 57], "better": [0, 32, 42, 50, 60], "remain": [0, 28, 32, 35, 43, 51, 52], "inact": 0, "than": [0, 14, 32, 33, 39, 40, 41, 42, 50, 51, 55, 57, 58, 62, 67], "week": 0, "mark": [0, 25, 28, 32, 41, 60], "stale": 0, "eventu": 0, "who": [0, 47, 66], "wish": 0, "good": [0, 14, 15, 37, 40, 44, 51], "point": [0, 15, 32, 33, 37, 40, 44, 51, 52, 56, 58], "uml": [0, 46, 50, 56, 66], "diagram": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 18, 23, 24, 25, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 42, 45, 46, 47, 48, 50, 51, 53, 55, 56, 57, 58, 60, 64, 67], "each": [0, 14, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 50, 51, 52, 55, 56, 57, 58, 60, 62, 64, 67], "sub": [0, 32, 50, 56, 66], "which": [0, 8, 14, 15, 19, 28, 31, 32, 33, 34, 35, 37, 39, 40, 41, 43, 44, 47, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67], "give": [0, 3, 19, 24, 39, 51, 55, 57, 62, 67], "high": [0, 13, 29, 32, 40, 42, 44, 53, 56, 66, 67], "level": [0, 13, 15, 25, 28, 29, 32, 33, 35, 38, 42, 44, 48, 50, 51, 52, 53, 56, 58, 60, 66, 67], "overview": [0, 32, 44, 53], "structur": [0, 13, 15, 28, 37, 39, 41, 42, 47, 50, 51, 52, 55, 59, 60, 67], "regad": 0, "import": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 32, 37, 39, 40, 41, 42, 43, 44, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "extern": [0, 47, 50, 66], "depend": [0, 13, 14, 19, 28, 30, 32, 33, 38, 42, 43, 50, 51, 52, 53, 58, 60, 62, 67], "also": [0, 14, 19, 28, 29, 32, 35, 37, 38, 39, 40, 41, 43, 47, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67], "found": [0, 28, 29, 30, 31, 32, 37, 39, 41, 42, 51, 65], "thi": [0, 1, 6, 8, 14, 15, 16, 18, 19, 21, 22, 23, 25, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67], "page": [0, 29, 50], "polit": 0, "respect": [0, 14, 28, 32, 35, 37, 41, 47, 51, 52, 53, 55, 56, 60, 62], "form": [0, 1, 14, 23, 28, 32, 33, 35, 37, 41, 47, 50, 51, 52, 55, 56, 57, 58, 59, 60, 63, 67], "commun": [0, 29, 42, 47], "expect": [0, 14, 19, 28, 32, 33, 35, 37, 50, 51, 52, 57, 61, 62, 67], "take": [0, 14, 15, 19, 28, 31, 32, 35, 37, 41, 48, 51, 52, 53, 55, 59, 60, 62, 65, 67], "fair": 0, "correct": [0, 40, 60], "action": [0, 50], "respons": [0, 28, 32, 50], "instanc": [0, 14, 32, 34, 37, 40, 50, 51, 53, 58, 60, 64], "unaccept": 0, "behaviour": [0, 32, 42, 50, 62], "right": [0, 1, 28, 29, 32, 35, 38, 39, 43, 50, 51, 52, 55, 56, 57, 60, 61], "remov": [0, 14, 32, 33, 34, 35, 37, 41, 42, 45, 48, 50, 51, 59, 63], "edit": 0, "reject": 0, "commit": [0, 32], "wiki": 0, "align": 0, "ban": 0, "temporarili": [0, 32], "perman": 0, "thei": [0, 16, 19, 28, 32, 33, 34, 35, 37, 41, 50, 51, 52, 55, 57, 60, 62, 64], "deem": 0, "inappropri": 0, "threaten": 0, "offens": 0, "harm": 0, "see": [0, 23, 28, 29, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67], "extend": [0, 15, 29, 32, 47, 50, 57, 58, 59, 60], "tutori": [0, 12, 15, 38, 39, 40, 41, 42, 43, 44, 50, 55, 56, 60, 62, 63], "discopi": [0, 1, 2, 3, 4, 7, 9, 10, 11, 13, 14, 17, 22, 23, 24, 28, 29, 31, 33, 34, 35, 37, 39, 45, 50, 51, 52, 56, 58, 59, 60, 61, 63, 64, 65], "usag": [0, 15, 29, 41, 50, 53], "1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 32, 33, 35, 37, 38, 39, 40, 42, 43, 47, 48, 51, 52, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67], "grammar": [1, 2, 6, 12, 13, 14, 15, 22, 23, 28, 31, 32, 33, 34, 35, 46, 47, 50, 51, 56, 60, 61, 65], "pregroup": [1, 2, 6, 12, 15, 18, 22, 23, 25, 28, 29, 31, 34, 35, 39, 42, 47, 50, 51, 56, 59, 60, 67], "cap": [1, 3, 28, 32, 55, 57, 59], "cup": [1, 3, 6, 14, 28, 29, 33, 34, 45, 50, 51, 52, 55, 57, 58, 59, 63], "id": [1, 2, 3, 23, 31, 32, 35, 37, 51, 55, 56, 57], "ty": [1, 3, 22, 31, 32, 33, 34, 35, 51, 55, 57], "word": [1, 2, 13, 14, 23, 28, 29, 32, 33, 34, 35, 38, 42, 45, 47, 48, 50, 51, 52, 55, 56, 58, 65], "lambeq": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 38, 39, 40, 41, 42, 43, 47, 48, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65], "n": [1, 2, 4, 6, 9, 10, 11, 14, 16, 23, 24, 25, 28, 29, 32, 33, 35, 37, 39, 40, 41, 43, 51, 52, 55, 56, 58, 59, 60, 62, 63, 64, 65], "she": [1, 33, 51, 55], "goe": [1, 33, 48, 51, 55], "r": [1, 2, 3, 10, 11, 13, 14, 16, 23, 28, 33, 34, 35, 51, 52, 55, 56, 57, 64, 65], "l": [1, 2, 3, 10, 14, 23, 28, 29, 32, 33, 34, 35, 37, 51, 52, 55, 56, 57, 59, 64], "home": [1, 33, 51, 55], "assert": [1, 3, 32, 55, 57], "0": [1, 2, 3, 7, 8, 9, 10, 11, 14, 16, 17, 19, 20, 21, 23, 29, 30, 31, 32, 33, 35, 37, 39, 47, 48, 51, 54, 55, 56, 57, 61, 62, 63, 64, 65], "2": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 40, 47, 48, 51, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67], "draw": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 33, 35, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "equat": [1, 2, 3, 9, 13, 22, 28, 55, 56, 57, 59, 63], "monoid": [1, 3, 12, 13, 14, 15, 28, 29, 33, 42, 52, 55, 56, 59, 60, 67], "pytest": [1, 55], "rais": [1, 28, 32, 33, 35, 37, 50, 51, 55], "origin": [1, 14, 28, 31, 32, 35, 47, 51, 55, 56, 64], "appear": [1, 41, 55], "print": [1, 3, 7, 8, 9, 10, 11, 17, 19, 20, 21, 22, 23, 32, 33, 37, 50, 51, 55, 57, 61, 62, 63, 64, 65], "normal": [1, 8, 23, 28, 32, 35, 37, 51, 55, 62, 67], "join": [1, 9, 29, 55, 63], "map": [1, 2, 3, 23, 28, 31, 32, 34, 35, 37, 41, 46, 50, 51, 52, 55, 56, 57, 58, 59], "str": [1, 31, 32, 33, 34, 35, 36, 37, 51, 55], "box": [1, 2, 3, 10, 28, 31, 32, 33, 34, 35, 39, 40, 50, 51, 52, 55, 56, 57, 59, 60, 61, 64, 66], "diagram_nf": [1, 55], "normal_form": [1, 3, 5, 9, 23, 28, 34, 50, 51, 55, 57, 59, 63], "after": [1, 10, 12, 30, 32, 37, 39, 42, 43, 55, 59, 64], "symbol": [1, 2, 3, 8, 9, 16, 25, 28, 29, 31, 35, 37, 38, 41, 46, 50, 51, 52, 53, 55, 56, 57, 60, 62, 63, 65], "figsiz": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 19, 20, 21, 24, 25, 33, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "10": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 16, 17, 19, 20, 21, 23, 32, 50, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65], "4": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 32, 33, 38, 39, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "normalis": [1, 50, 55, 59], "order": [1, 14, 25, 28, 31, 32, 37, 39, 41, 47, 48, 50, 51, 52, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67], "anymor": [1, 47, 50, 55], "so": [1, 3, 14, 19, 28, 32, 37, 39, 43, 47, 50, 53, 55, 56, 57, 60, 62, 63, 65, 67], "drawn": [1, 3, 55, 57], "valueerror": [1, 23, 33, 35, 37, 51, 55], "3": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 35, 37, 38, 41, 42, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64], "bobcatpars": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 29, 35, 39, 46, 50, 51, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65], "verbos": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 17, 19, 20, 21, 25, 32, 35, 37, 51, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65], "suppress": [1, 5, 6, 10, 11, 25, 29, 35, 51, 55, 59, 60, 64, 65], "functor": [1, 2, 12, 15, 28, 45], "determin": [1, 5, 14, 28, 31, 35, 41, 42, 45, 50, 51, 52, 55, 58, 59, 61, 62, 64], "adject": [1, 41, 55], "shouldn": [1, 55], "t": [1, 3, 6, 7, 8, 9, 11, 13, 14, 17, 19, 20, 21, 22, 25, 28, 32, 35, 37, 41, 51, 55, 56, 57, 60, 61, 62, 63, 65], "veri": [1, 12, 32, 41, 56, 58, 59, 62, 65], "behind": [1, 43, 55], "my": [1, 6, 25, 32, 41, 55, 60], "hi": [1, 55], "her": [1, 55], "an": [1, 3, 11, 13, 14, 21, 25, 28, 29, 31, 32, 35, 36, 37, 38, 39, 40, 41, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "adj": [1, 2, 55, 56], "def": [1, 2, 7, 8, 9, 11, 17, 19, 20, 21, 23, 32, 37, 39, 55, 56, 61, 62, 63, 65], "very_ob": [1, 55], "return": [1, 2, 7, 8, 9, 11, 14, 16, 17, 19, 20, 21, 28, 31, 32, 33, 34, 35, 36, 37, 39, 50, 51, 52, 55, 56, 57, 60, 61, 62, 63, 65], "very_ar": [1, 55], "cod": [1, 2, 3, 10, 23, 24, 33, 34, 35, 50, 51, 55, 56, 57, 64], "very_functor": [1, 55], "ob": [1, 3, 31, 35, 51, 55, 56, 57], "sentence2diagram": [1, 2, 4, 5, 6, 10, 16, 18, 22, 24, 25, 26, 29, 35, 39, 50, 51, 55, 56, 58, 59, 60, 64], "big": [1, 32, 55, 67], "bad": [1, 55], "wolf": [1, 55], "new_diagram": [1, 55], "5": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 19, 20, 21, 22, 23, 24, 26, 32, 33, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "categori": [1, 12, 13, 14, 15, 28, 29, 31, 32, 35, 40, 41, 46, 47, 50, 51, 52, 55, 61, 63, 65, 67], "factori": [1, 55], "swap": [1, 3, 14, 28, 33, 50, 51, 55, 57], "twisteddiagram": [1, 55], "classmethod": [1, 32, 34, 35, 37, 51, 55], "cl": [1, 55], "left": [1, 28, 29, 32, 35, 50, 51, 52, 55, 56, 57, 60, 61], "__func__": [1, 55], "dagger": [1, 3, 55, 57], "twistedword": [1, 55], "twistedswap": [1, 55], "twistedcup": [1, 55], "twistedcap": [1, 55], "braid_factori": [1, 55], "cup_factori": [1, 55], "cap_factori": [1, 55], "twist_functor": [1, 55], "lambda": [1, 9, 20, 21, 29, 31, 51, 55, 63], "twist": [1, 12], "snake": [1, 3, 28, 55, 57], "6": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 16, 17, 19, 20, 21, 22, 23, 24, 32, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65], "dim": [1, 2, 4, 7, 8, 10, 11, 17, 19, 24, 31, 32, 39, 51, 55, 56, 58, 61, 62, 64, 65], "unit": [1, 3, 25, 28, 32, 41, 48, 52, 55, 57, 60], "object": [1, 3, 13, 14, 23, 28, 32, 33, 34, 35, 37, 46, 50, 51, 52, 55, 56, 57, 60, 61, 63], "disappear": [1, 55], "anoth": [1, 6, 15, 25, 28, 32, 44, 55, 57, 58, 59, 60, 67], "f": [1, 3, 7, 8, 9, 11, 14, 17, 19, 20, 21, 28, 32, 35, 40, 51, 55, 57, 61, 62, 63, 65], "7": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 17, 19, 20, 21, 22, 23, 24, 32, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65], "id_box": [1, 55], "data": [1, 10, 11, 13, 14, 15, 28, 29, 33, 35, 37, 38, 39, 40, 42, 43, 45, 51, 52, 53, 55, 60, 64], "id_tensor": [1, 55], "equal": [1, 32, 33, 40, 43, 55, 57], "arrai": [1, 8, 10, 11, 21, 31, 37, 50, 51, 55, 61, 62, 63, 64, 65], "eval": [1, 2, 8, 10, 11, 24, 32, 37, 55, 56, 62, 64, 65], "int": [1, 8, 9, 11, 14, 19, 20, 21, 31, 32, 33, 35, 37, 51, 55, 62, 63, 65], "dom": [1, 2, 3, 10, 24, 35, 50, 51, 55, 56, 57, 64], "numpi": [1, 2, 8, 9, 10, 11, 19, 20, 21, 28, 31, 32, 37, 51, 53, 55, 56, 62, 63, 64, 65], "np": [1, 2, 8, 9, 10, 11, 19, 20, 21, 31, 32, 35, 37, 51, 55, 56, 62, 63, 64, 65], "f_box": [1, 55], "rang": [1, 2, 8, 11, 19, 31, 32, 37, 41, 42, 44, 47, 50, 51, 53, 55, 56, 61, 62, 65, 67], "f_tensor": [1, 55], "combined_diagram": [1, 55], "combined_tensor": [1, 55], "evalu": [1, 13, 19, 28, 29, 32, 37, 38, 39, 41, 42, 43, 45, 50, 51, 53, 55], "dtype": [1, 10, 11, 19, 32, 37, 50, 55, 64, 65], "int64": [1, 55], "9": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 17, 19, 20, 21, 23, 29, 37, 51, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65], "11": [1, 2, 3, 5, 7, 8, 9, 11, 17, 19, 20, 21, 23, 32, 50, 55, 56, 57, 59, 61, 62, 63, 65], "one_ob": [1, 55], "len": [1, 7, 8, 9, 11, 17, 19, 20, 21, 55, 61, 62, 63, 65], "doe": [1, 14, 16, 19, 28, 32, 33, 34, 35, 37, 41, 51, 55, 56, 62], "one_ar": [1, 55], "ones": [1, 2, 24, 32, 35, 37, 42, 51, 55, 56, 61, 65], "insid": [1, 2, 3, 32, 55, 56, 57], "becom": [1, 33, 34, 37, 41, 51, 55, 56, 57, 58, 59], "one_functor": [1, 55], "34": [1, 6, 25, 55, 60], "12": [1, 2, 3, 6, 7, 8, 9, 10, 11, 14, 19, 20, 21, 23, 25, 32, 33, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65], "quantum": [1, 2, 4, 12, 13, 14, 15, 28, 29, 31, 37, 38, 39, 42, 45, 46, 48, 50, 51, 52, 53, 56, 57, 59, 61, 64], "qubit": [1, 8, 14, 28, 31, 37, 38, 39, 51, 52, 55, 56, 58, 62, 63, 64, 67], "gate": [1, 2, 15, 28, 31, 39, 51, 52, 55, 56, 58, 67], "cx": [1, 2, 55, 56], "rz": [1, 16, 55], "x": [1, 3, 8, 11, 16, 19, 31, 32, 35, 37, 50, 51, 55, 57, 62, 65], "do": [1, 29, 32, 33, 37, 38, 40, 41, 43, 50, 51, 55, 59, 60, 63, 64, 67], "same_circuit": [1, 55], "to_tk": [1, 4, 16, 55, 58], "tk": [1, 55], "13": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 19, 23, 32, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65], "cnot": [1, 2, 31, 51, 55, 56], "circuit1": [1, 55], "perm": [1, 55], "permut": [1, 55], "circuit2": [1, 55], "introduc": [1, 14, 31, 33, 41, 51, 55, 61, 65, 67], "convert": [1, 4, 6, 11, 14, 22, 28, 31, 32, 35, 37, 39, 41, 42, 47, 48, 50, 51, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65], "tket": [1, 28, 37, 50, 51, 53, 55, 63, 65, 67], "14": [1, 2, 3, 6, 7, 8, 9, 19, 23, 31, 32, 51, 55, 56, 57, 60, 61, 62, 63], "control": [1, 14, 32, 35, 42, 51, 55, 61], "distanc": [1, 53, 55], "15": [1, 4, 7, 8, 9, 16, 17, 19, 31, 32, 51, 55, 58, 61, 62, 63], "discard": [1, 2, 31, 32, 39, 50, 51, 55, 56, 63], "measur": [1, 28, 39, 40, 55, 67], "ket": [1, 2, 28, 37, 39, 51, 55, 56], "channel": [1, 55], "c": [1, 3, 9, 11, 14, 16, 20, 21, 37, 51, 55, 57, 63, 65], "q": [1, 16, 29, 35, 40, 51, 55], "longer": [1, 50, 55, 59], "unitari": [1, 28, 31, 39, 50, 51, 55, 56], "cqmap": [1, 55], "j": [1, 2, 13, 32, 33, 37, 51, 55, 56], "cq": [1, 55], "complex": [1, 28, 32, 37, 39, 42, 43, 55, 67], "16": [1, 8, 9, 10, 14, 19, 32, 37, 55, 62, 63, 64], "mix": [1, 32, 55, 67], "true": [1, 6, 7, 8, 9, 17, 19, 20, 21, 25, 28, 32, 33, 35, 37, 39, 40, 50, 51, 53, 55, 60, 61, 62, 63, 67], "17": [1, 8, 9, 19, 55, 62, 63], "shape": [1, 2, 28, 31, 32, 33, 35, 37, 39, 51, 55, 56], "18": [1, 8, 19, 55, 62], "cnot_ob": [1, 55], "implicitli": [1, 55, 57], "rigid": [1, 2, 3, 12, 28, 31, 35, 51, 55, 56], "cnot_ar": [1, 55], "width": [1, 33, 55], "max": [1, 55], "bra": [1, 2, 39, 55, 56], "post": [1, 28, 31, 32, 33, 34, 37, 50, 51, 55, 59, 62, 63], "select": [1, 14, 28, 31, 32, 33, 34, 44, 46, 48, 50, 51, 53, 55, 57, 59, 62, 63], "amount": [1, 39, 52, 55, 62], "input": [1, 7, 14, 15, 19, 29, 32, 33, 35, 36, 37, 38, 39, 40, 45, 50, 51, 53, 55, 57, 59], "output": [1, 19, 29, 32, 33, 35, 37, 39, 40, 47, 48, 50, 51, 55, 56, 57, 59, 60, 61, 62, 67], "wire": [1, 19, 23, 28, 31, 33, 35, 50, 51, 52, 55, 56, 57, 58, 59, 60, 62, 63, 64], "els": [1, 32, 37, 51, 55], "cnot_functor": [1, 55], "atomictyp": [2, 4, 7, 8, 9, 10, 11, 16, 17, 19, 20, 21, 23, 24, 29, 35, 39, 50, 51, 56, 58, 61, 62, 63, 64, 65], "noun": [2, 4, 7, 8, 9, 10, 11, 14, 16, 17, 19, 20, 21, 23, 24, 28, 29, 35, 39, 41, 51, 52, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65], "combread": [2, 56], "self": [2, 7, 8, 19, 32, 35, 37, 39, 51, 56, 61, 62], "sentenc": [2, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 32, 33, 35, 36, 39, 41, 45, 46, 47, 48, 50, 51, 52, 55, 56, 58, 59, 61, 62, 63, 64, 65, 67], "w": [2, 11, 14, 56, 65], "split": [2, 14, 31, 35, 36, 41, 43, 45, 51, 56, 58, 61, 65], "layer": [2, 3, 14, 28, 31, 32, 33, 34, 51, 53, 56, 57, 58, 59, 62], "john": [2, 4, 5, 6, 10, 14, 25, 26, 41, 56, 58, 59, 60, 64], "gave": [2, 6, 14, 25, 41, 56, 60], "mari": [2, 6, 14, 25, 41, 56, 60], "flower": [2, 6, 14, 24, 25, 41, 56, 60], "text": [2, 4, 6, 7, 8, 9, 14, 17, 19, 20, 21, 25, 29, 32, 33, 35, 36, 37, 42, 44, 50, 51, 56, 58, 60, 61, 62, 63], "d": [2, 3, 11, 13, 14, 24, 35, 37, 51, 55, 56, 57, 58, 65], "food": [2, 6, 25, 41, 56, 60, 61, 62, 65], "fresh": [2, 56], "simplerewriterul": [2, 29, 34, 46, 51], "NOT": [2, 56], "negation_rewrit": [2, 56], "templat": [2, 32, 34, 51, 56], "placehold": [2, 29, 34, 51, 56], "wa": [2, 28, 32, 41, 50, 54, 56, 59, 62], "ha": [2, 14, 28, 32, 35, 37, 39, 40, 42, 50, 51, 52, 55, 56, 57, 62, 64], "not_d": [2, 56], "pastrewriterul": [2, 56], "were": [2, 14, 19, 32, 41, 56, 62], "had": [2, 32, 50, 56], "match": [2, 3, 28, 29, 32, 34, 35, 37, 50, 51, 56, 57], "new_nam": [2, 56], "past_d": [2, 56], "go": [2, 23, 29, 32, 38, 56, 62], "ry": [2, 56], "real_ansatz_circuit": [2, 56], "n_qubit": [2, 31, 51, 56], "param": [2, 31, 32, 33, 37, 51, 56], "n_layer": [2, 4, 8, 9, 10, 14, 16, 19, 20, 21, 31, 51, 56, 58, 62, 63, 64], "offset": [2, 3, 56, 57], "sym": [2, 11, 24, 56, 65], "ladder": [2, 31, 51, 56], "y": [2, 3, 7, 8, 9, 13, 14, 17, 19, 20, 21, 32, 37, 47, 51, 56, 57, 61, 62, 63], "rotat": [2, 28, 31, 38, 51, 55, 56, 64], "realansatz": [2, 56], "__init__": [2, 7, 8, 19, 29, 31, 32, 33, 34, 35, 36, 37, 39, 51, 56, 61, 62], "ob_map": [2, 31, 51, 56], "n_single_qubit_param": [2, 8, 9, 14, 19, 20, 21, 31, 51, 56, 62, 63], "fals": [2, 7, 8, 9, 14, 17, 19, 20, 21, 31, 32, 33, 34, 35, 37, 39, 40, 50, 51, 56, 60, 61, 62, 63], "super": [2, 7, 39, 56, 61], "params_shap": [2, 29, 31, 51, 56], "real_d": [2, 56], "functool": [2, 56], "reduc": [2, 32, 39, 41, 56, 59, 62, 63], "math": [2, 56], "positiveansatz": [2, 56], "_ar": [2, 56], "step": [2, 8, 19, 28, 29, 32, 37, 38, 41, 42, 43, 48, 51, 55, 56, 61, 62, 63, 65], "obtain": [2, 32, 35, 48, 51, 56, 57, 58, 60, 67], "label": [2, 7, 8, 9, 17, 19, 20, 21, 28, 32, 33, 35, 37, 39, 40, 41, 42, 51, 52, 56, 61, 62, 63], "_summarise_box": [2, 56], "domain": [2, 3, 31, 35, 41, 42, 51, 56, 57], "codomain": [2, 3, 31, 34, 35, 51, 56, 57, 61], "construct": [2, 31, 32, 37, 39, 51, 52, 55, 56, 62], "ansatz": [2, 4, 7, 8, 9, 10, 11, 14, 16, 17, 19, 20, 21, 28, 29, 39, 50, 51, 58, 61, 62, 63, 64, 65], "prod": [2, 56], "positive_d": [2, 56], "sympi": [2, 10, 11, 16, 24, 31, 51, 56, 64, 65], "default_sort_kei": [2, 10, 11, 16, 24, 56, 64, 65], "sort": [2, 10, 11, 16, 24, 31, 32, 37, 51, 56, 64, 65], "free_symbol": [2, 10, 11, 16, 24, 56, 64, 65], "kei": [2, 10, 11, 14, 16, 24, 31, 32, 37, 51, 55, 56, 57, 64, 65], "sym_dict": [2, 24, 56], "k": [2, 11, 13, 24, 37, 43, 56, 65], "size": [2, 10, 11, 14, 24, 29, 31, 32, 33, 35, 37, 39, 43, 46, 51, 56, 61, 62, 63, 64, 65], "subbed_diagram": [2, 24, 56], "lambdifi": [2, 10, 11, 24, 56, 64, 65], "cat": [3, 8, 19, 32, 33, 35, 40, 51, 57, 62], "arrow": [3, 28, 35, 51, 55, 56, 57], "b": [3, 8, 13, 14, 19, 28, 31, 51, 52, 55, 57, 62], "abcd": [3, 57], "g": [3, 13, 14, 32, 35, 37, 41, 51, 52, 53, 55, 56, 57, 67], "h": [3, 13, 14, 16, 29, 40, 57], "compos": [3, 28, 32, 37, 55, 57, 60], "associ": [3, 14, 22, 28, 32, 33, 35, 37, 38, 51, 57, 58, 64, 65, 66], "ident": [3, 28, 56, 57], "onli": [3, 14, 19, 30, 31, 32, 33, 34, 35, 37, 39, 40, 50, 51, 55, 56, 57, 60, 63, 67], "check": [3, 32, 33, 34, 37, 50, 51, 57], "index": [3, 29, 32, 37, 51, 57], "slice": [3, 32, 57], "revers": [3, 57], "gt": [3, 57], "combin": [3, 8, 14, 19, 28, 33, 35, 39, 40, 41, 50, 51, 55, 56, 57, 60, 62, 67], "repr": [3, 57], "39": [3, 6, 7, 8, 9, 11, 22, 25, 57, 60, 61, 62, 63, 65], "back": [3, 32, 57], "trick": [3, 57], "singl": [3, 14, 31, 32, 35, 36, 37, 40, 51, 55, 56, 57, 60], "ndagger": [3, 57], "oper": [3, 28, 32, 37, 50, 51, 55, 56, 57, 60], "trapezium": [3, 57], "demonstr": [3, 53, 57, 59, 60, 63], "reflect": [3, 28, 48, 57], "along": [3, 28, 32, 57], "horizont": [3, 35, 51, 57], "axi": [3, 28, 32, 57], "asymmetri": [3, 9, 57, 63], "offset_diagram": [3, 57], "decod": [3, 32, 57], "symmetr": [3, 28, 50, 57, 61], "repres": [3, 25, 28, 31, 32, 33, 38, 39, 40, 41, 42, 51, 52, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67], "z": [3, 16, 32, 57], "snake1": [3, 57], "snake2": [3, 57], "nested_cup": [3, 57], "nested_cap": [3, 57], "nested_snak": [3, 57], "walk": [4, 5, 6, 10, 26, 58, 59, 60, 64], "park": [4, 5, 6, 10, 26, 58, 59, 60, 64], "string": [4, 6, 14, 15, 28, 29, 32, 33, 35, 36, 37, 39, 42, 46, 47, 48, 50, 51, 56, 58, 59, 60, 61, 62, 63, 65, 67], "iqpansatz": [4, 8, 9, 10, 14, 16, 19, 20, 21, 29, 31, 46, 50, 51, 58, 62, 63, 64], "atom": [4, 10, 14, 28, 32, 33, 35, 50, 51, 52, 56, 58, 64, 67], "discopy_circuit": [4, 16, 58], "pytket": [4, 9, 16, 20, 28, 39, 55, 58, 63, 67], "displai": [4, 14, 16, 51, 58], "render_circuit_jupyt": [4, 16, 58], "tket_circuit": [4, 16, 58], "qiskit": [4, 8, 9, 20, 28, 39, 58, 62, 63, 67], "tk_to_qiskit": [4, 58], "qiskit_circuit": [4, 58], "tensor_ansatz": [4, 58], "tensor_diagram": [4, 10, 39, 58, 64], "fontsiz": [4, 5, 6, 9, 10, 11, 14, 25, 33, 58, 59, 60, 63, 64, 65], "spideransatz": [4, 7, 11, 14, 17, 24, 29, 31, 39, 46, 51, 58, 61, 65], "spider_ansatz": [4, 58], "spider_diagram": [4, 58], "mpsansatz": [4, 24, 29, 31, 39, 46, 51, 58], "mps_ansatz": [4, 58], "bond_dim": [4, 14, 24, 31, 51, 58], "mps_diagram": [4, 58], "pars": [5, 6, 7, 8, 9, 10, 11, 13, 14, 17, 19, 20, 21, 29, 32, 35, 44, 48, 50, 51, 55, 59, 60, 61, 62, 63, 64, 65], "preposit": [5, 41, 45, 50, 58, 59, 64], "phrase": [5, 35, 41, 45, 51, 52, 59, 60, 63], "prepositional_phras": [5, 14, 23, 29, 35, 50, 51, 59], "rewritten_diagram": [5, 59], "normalised_diagram": [5, 59], "curry_functor": [5, 59], "curri": [5, 14, 45, 59], "curried_diagram": [5, 59], "spacytokenis": [6, 25, 29, 36, 41, 46, 51, 60], "tokenis": [6, 14, 29, 35, 41, 45, 50, 51], "isn": [6, 25, 32, 41, 60], "worth": [6, 25, 41, 60], "token": [6, 14, 25, 29, 32, 33, 35, 36, 42, 51, 56, 60, 62, 63], "tokenise_sent": [6, 25, 29, 36, 51, 60], "23": [6, 8, 19, 25, 60, 62], "tok_sent": [6, 25, 60], "love": [6, 23, 25, 41, 60], "pizza": [6, 25, 41, 60], "It": [6, 14, 19, 25, 28, 32, 35, 37, 40, 41, 42, 43, 50, 51, 53, 55, 57, 60, 62, 67], "favorit": [6, 25, 41, 60], "could": [6, 19, 25, 32, 40, 41, 43, 60, 62, 63, 67], "eat": [6, 23, 25, 41, 60], "everi": [6, 19, 25, 28, 32, 35, 37, 41, 51, 55, 57, 58, 60, 62, 67], "dai": [6, 25, 32, 41, 60, 62], "split_sent": [6, 14, 25, 29, 36, 51, 60], "spiders_read": [6, 14, 22, 35, 46, 50, 60], "creat": [6, 11, 15, 28, 29, 32, 33, 34, 35, 37, 38, 42, 45, 47, 50, 51, 52, 53, 55, 57, 58, 60, 64], "base": [6, 13, 25, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 46, 47, 48, 50, 51, 53, 55, 56, 58, 63, 64, 65], "spider": [6, 14, 22, 28, 29, 31, 34, 35, 50, 51, 58, 59], "spiders_diagram": [6, 60], "Not": [6, 14, 35, 51, 60], "cups_read": [6, 22, 35, 46, 60], "cups_diagram": [6, 60], "stairs_read": [6, 14, 22, 35, 39, 46, 60], "stairs_diagram": [6, 60], "treeread": [6, 14, 26, 29, 35, 39, 46, 50, 51, 60], "tree_diagram": [6, 60], "treereadermod": [6, 26, 29, 35, 46, 50, 51, 60], "mode": [6, 26, 29, 32, 35, 37, 39, 50, 51, 60], "rule_onli": [6, 26, 29, 35, 51, 60], "torch": [7, 8, 17, 19, 24, 32, 37, 39, 46, 50, 51, 61, 62], "batch_siz": [7, 8, 9, 17, 19, 20, 21, 32, 35, 37, 51, 61, 62, 63], "30": [7, 8, 9, 10, 11, 17, 20, 21, 61, 62, 63, 64, 65], "epoch": [7, 8, 9, 11, 17, 19, 20, 21, 37, 51, 61, 62, 63, 65], "learning_r": [7, 8, 17, 19, 21, 37, 51, 61, 62], "3e": [7, 17, 21, 61], "seed": [7, 8, 9, 11, 17, 19, 20, 21, 32, 37, 51, 61, 62, 63, 65], "read_data": [7, 8, 9, 11, 17, 19, 20, 21, 61, 62, 63, 65], "filenam": [7, 8, 9, 17, 19, 20, 21, 32, 35, 61, 62, 63], "open": [7, 8, 9, 11, 17, 19, 20, 21, 28, 29, 31, 39, 44, 50, 51, 61, 62, 63, 65], "line": [7, 8, 9, 11, 17, 19, 20, 21, 29, 32, 33, 35, 37, 50, 51, 56, 61, 62, 63, 65], "float": [7, 8, 10, 11, 17, 19, 32, 33, 35, 37, 51, 61, 62, 64, 65], "append": [7, 8, 9, 11, 17, 19, 20, 21, 61, 62, 63, 65], "strip": [7, 8, 9, 11, 17, 19, 20, 21, 61, 62, 63, 65], "train_label": [7, 8, 9, 17, 19, 20, 21, 61, 62, 63], "train_data": [7, 8, 9, 11, 17, 19, 20, 21, 61, 62, 63, 65], "dataset": [7, 8, 9, 11, 14, 17, 20, 21, 29, 33, 37, 40, 42, 43, 44, 45, 46, 51, 53, 65], "mc_train_data": [7, 8, 11, 17, 19, 20, 21, 61, 62, 65], "txt": [7, 8, 9, 11, 14, 17, 19, 20, 21, 61, 62, 63, 65], "val_label": [7, 9, 61, 63], "val_data": [7, 9, 61, 63], "mc_dev_data": [7, 8, 17, 19, 20, 21, 61, 62], "test_label": [7, 8, 17, 19, 20, 21, 61, 62], "test_data": [7, 8, 11, 17, 19, 20, 21, 61, 62, 65], "mc_test_data": [7, 8, 11, 17, 19, 20, 21, 61, 62, 65], "skill": [7, 8, 11, 42, 61, 62, 65], "man": [7, 8, 11, 61, 62, 65], "prepar": [7, 8, 11, 14, 32, 38, 39, 41, 45, 53], "sauc": [7, 8, 11, 61, 62, 65], "bake": [7, 8, 11, 61, 62, 65], "dinner": [7, 8, 11, 61, 62, 65], "woman": [7, 8, 11, 61, 62, 65], "cook": [7, 8, 11, 19, 61, 62, 65], "tasti": [7, 8, 11, 61, 62, 65], "meal": [7, 8, 11, 61, 62, 65], "debug": [7, 8, 11, 61, 62, 65], "program": [7, 8, 11, 14, 28, 41, 44, 52, 61, 62, 65], "train_diagram": [7, 8, 9, 11, 17, 19, 20, 21, 61, 62, 63, 65], "sentences2diagram": [7, 8, 9, 11, 17, 19, 20, 21, 29, 35, 51, 61, 62, 63, 65], "val_diagram": [7, 9, 61, 63], "test_diagram": [7, 8, 11, 17, 19, 20, 21, 61, 62, 65], "tag": [7, 8, 9, 17, 19, 20, 21, 32, 35, 41, 42, 44, 51, 61, 62, 63], "turn": [7, 8, 9, 17, 19, 20, 21, 58, 60, 61, 62, 63], "tree": [7, 8, 9, 14, 17, 19, 20, 21, 28, 29, 32, 35, 42, 45, 46, 47, 48, 50, 51, 55, 61, 62, 63, 67], "train_circuit": [7, 8, 9, 11, 17, 19, 20, 21, 61, 62, 63, 65, 67], "val_circuit": [7, 9, 61, 63], "test_circuit": [7, 8, 11, 17, 19, 20, 21, 61, 62, 65, 67], "pytorchmodel": [7, 17, 29, 37, 46, 50, 51, 53, 61, 67], "all_circuit": [7, 8, 9, 11, 17, 19, 20, 21, 39, 61, 62, 63, 65, 67], "from_diagram": [7, 8, 9, 17, 19, 20, 21, 29, 37, 39, 50, 51, 61, 62, 63, 67], "sig": [7, 17, 61], "sigmoid": [7, 8, 11, 17, 19, 61, 62, 65], "accuraci": [7, 8, 9, 11, 17, 20, 21, 39, 40, 42, 45, 53, 61, 63, 65], "y_hat": [7, 8, 9, 17, 19, 20, 21, 37, 51, 61, 62, 63], "sum": [7, 8, 9, 11, 17, 19, 20, 21, 32, 61, 62, 63, 65], "eq": [7, 17, 61], "round": [7, 8, 9, 17, 19, 20, 21, 61, 62, 63], "half": [7, 9, 17, 20, 21, 32, 37, 61, 63], "due": [7, 9, 17, 20, 21, 32, 35, 47, 50, 51, 61, 63], "doubl": [7, 8, 9, 17, 20, 21, 32, 37, 50, 55, 61, 62, 63], "count": [7, 9, 17, 20, 21, 32, 39, 61, 63], "eval_metr": [7, 9, 61, 63], "acc": [7, 8, 9, 17, 19, 20, 21, 61, 62, 63], "pytorchtrain": [7, 8, 17, 29, 37, 39, 45, 46, 51, 53, 61, 62, 67], "loss_funct": [7, 8, 9, 17, 19, 20, 21, 37, 51, 61, 62, 63], "nn": [7, 8, 17, 19, 32, 37, 39, 46, 51, 61, 62], "bcewithlogitsloss": [7, 17, 61], "adamw": [7, 17, 37, 51, 61], "evaluate_funct": [7, 8, 9, 17, 19, 20, 21, 37, 51, 61, 62, 63], "evaluate_on_train": [7, 8, 9, 17, 19, 20, 21, 37, 51, 61, 62, 63], "train_dataset": [7, 8, 9, 17, 19, 20, 21, 37, 51, 61, 62, 63], "val_dataset": [7, 8, 9, 19, 20, 21, 37, 51, 61, 62, 63], "shuffl": [7, 9, 20, 21, 37, 51, 53, 61, 62, 63], "fit": [7, 8, 9, 17, 19, 20, 21, 29, 32, 37, 51, 53, 61, 62, 63], "evaluation_step": [7, 9, 37, 51, 61, 63], "logging_step": [7, 9, 17, 20, 21, 37, 51, 61, 63], "loss": [7, 8, 9, 11, 17, 19, 20, 21, 28, 29, 37, 38, 39, 46, 50, 51, 53, 61], "7287": [7, 17, 61], "valid": [7, 8, 9, 14, 17, 19, 20, 21, 29, 32, 33, 35, 37, 42, 50, 51, 61, 62, 63, 67], "7285": [7, 17, 61], "5143": [7, 17, 61], "5500": [7, 17, 61], "6466": [7, 61], "7034": [7, 61], "5929": [7, 61], "5167": [7, 61], "5270": [7, 61], "5835": [7, 61], "6714": [7, 61], "6667": [7, 19, 61], "2460": [7, 61], "4088": [7, 61], "8929": [7, 9, 61, 63], "8167": [7, 20, 61], "20": [7, 8, 11, 17, 32, 43, 61, 62, 65], "0995": [7, 61], "1597": [7, 19, 61], "9571": [7, 8, 17, 21, 61, 62], "9333": [7, 8, 19, 61, 62], "25": [7, 8, 17, 19, 61, 62], "0272": [7, 61], "0385": [7, 61], "9929": [7, 61], "9833": [7, 61], "0171": [7, 61], "0237": [7, 61], "complet": [7, 8, 9, 17, 19, 20, 21, 29, 38, 41, 43, 56, 59, 61, 62, 63, 66, 67], "matplotlib": [7, 8, 9, 17, 20, 21, 61, 62, 63], "pyplot": [7, 8, 9, 17, 20, 21, 61, 62, 63], "plt": [7, 8, 9, 17, 20, 21, 33, 61, 62, 63], "fig1": [7, 17, 61], "ax_tl": [7, 8, 9, 17, 20, 21, 61, 62, 63], "ax_tr": [7, 8, 9, 17, 20, 21, 61, 62, 63], "ax_bl": [7, 8, 9, 17, 20, 21, 61, 62, 63], "ax_br": [7, 8, 9, 17, 20, 21, 61, 62, 63], "subplot": [7, 8, 9, 17, 20, 21, 61, 62, 63], "sharei": [7, 8, 9, 17, 20, 21, 61, 62, 63], "row": [7, 8, 9, 17, 20, 21, 37, 51, 61, 62, 63], "set_titl": [7, 8, 9, 17, 20, 21, 61, 62, 63], "set_xlabel": [7, 8, 9, 17, 20, 21, 61, 62, 63], "set_ylabel": [7, 8, 9, 17, 20, 21, 61, 62, 63], "colour": [7, 8, 9, 17, 20, 21, 61, 62, 63], "iter": [7, 8, 9, 17, 20, 21, 32, 34, 35, 36, 37, 46, 51, 61, 62, 63, 65], "rcparam": [7, 8, 9, 17, 20, 21, 61, 62, 63], "ax": [7, 8, 9, 17, 20, 21, 61, 62, 63], "prop_cycl": [7, 8, 9, 17, 20, 21, 61, 62, 63], "by_kei": [7, 8, 9, 17, 20, 21, 61, 62, 63], "color": [7, 8, 9, 17, 20, 21, 61, 62, 63, 66], "plot": [7, 8, 9, 17, 20, 21, 61, 62, 63], "train_epoch_cost": [7, 8, 9, 17, 20, 21, 29, 51, 61, 62, 63], "train_result": [7, 8, 9, 17, 20, 21, 29, 51, 61, 62, 63], "val_cost": [7, 8, 9, 17, 20, 21, 29, 51, 61, 62, 63], "val_result": [7, 8, 9, 17, 20, 21, 29, 51, 61, 62, 63], "test_acc": [7, 9, 17, 20, 21, 61, 63], "item": [7, 8, 9, 14, 17, 19, 28, 37, 61, 62, 63], "mycustommodel": [7, 39, 61], "net": [7, 32, 37, 39, 61, 67], "linear": [7, 8, 19, 28, 32, 35, 37, 39, 51, 55, 57, 61, 62, 67], "forward": [7, 8, 17, 19, 29, 32, 35, 37, 39, 51, 53, 57, 60, 61, 62], "custom": [7, 32, 37, 39, 42, 50, 53, 55], "pass": [7, 19, 25, 32, 35, 37, 39, 48, 51, 53, 55, 56, 59, 60, 61, 62, 63], "here": [7, 25, 28, 29, 31, 32, 39, 40, 42, 44, 51, 54, 55, 56, 60, 61, 62], "pred": [7, 8, 11, 39, 61, 62, 65], "get_diagram_output": [7, 8, 19, 29, 37, 39, 51, 61, 62], "custom_model": [7, 61], "custom_model_train": [7, 61], "7143": [7, 61], "7023": [7, 61], "4786": [7, 61], "4833": [7, 61], "6345": [7, 61], "7805": [7, 61], "6500": [7, 61], "3833": [7, 61], "4672": [7, 61], "9723": [7, 61], "7286": [7, 61], "4500": [7, 61], "2969": [7, 61], "8530": [7, 61], "8571": [7, 19, 20, 61], "6167": [7, 20, 61], "1612": [7, 61], "8944": [7, 61], "9429": [7, 8, 19, 61, 62], "7333": [7, 8, 61, 62], "1263": [7, 61], "1026": [7, 61], "9286": [7, 8, 19, 61, 62], "7667": [7, 19, 61], "1078": [7, 61], "0687": [7, 61], "42": [8, 62], "random": [8, 10, 11, 19, 37, 51, 62, 64, 65], "manual_se": [8, 19, 32, 62], "dev_label": [8, 17, 19, 20, 21, 62], "dev_data": [8, 17, 19, 20, 21, 62], "raw_train_diagram": [8, 9, 19, 20, 21, 62, 63], "raw_dev_diagram": [8, 19, 20, 21, 62], "raw_test_diagram": [8, 19, 20, 21, 62], "remove_cup": [8, 9, 19, 20, 21, 23, 29, 33, 46, 51, 62, 63], "dev_diagram": [8, 17, 19, 20, 21, 62], "dev_circuit": [8, 17, 19, 20, 21, 62, 67], "pennylanemodel": [8, 19, 29, 37, 46, 50, 51, 53, 62, 67], "backend_config": [8, 9, 20, 37, 39, 51, 62, 63, 67], "default": [8, 14, 25, 28, 30, 31, 32, 33, 34, 35, 37, 39, 50, 51, 55, 56, 60, 61, 62, 63, 67], "below": [8, 14, 25, 32, 35, 37, 39, 40, 47, 51, 53, 55, 56, 60, 62, 63, 65, 67], "backend": [8, 9, 20, 28, 29, 35, 37, 38, 45, 50, 51, 53, 55, 61, 62, 63, 67], "pennylan": [8, 28, 29, 31, 37, 39, 43, 45, 50, 51, 62, 67], "simul": [8, 21, 37, 39, 50, 51, 53, 62], "probabl": [8, 19, 28, 32, 35, 37, 39, 40, 50, 51, 62, 67], "initialise_weight": [8, 19, 29, 37, 51, 61, 62], "qml": [8, 33, 34, 43, 50, 51, 62, 67], "default_config": [8, 62, 67], "ibmq": [8, 39, 62], "ibmqx_token": [8, 62], "my_api_token": [8, 62], "save": [8, 19, 29, 32, 33, 37, 50, 51, 62, 67], "path": [8, 32, 33, 35, 37, 51, 54, 57, 62, 67], "devic": [8, 28, 32, 35, 37, 39, 51, 55, 62, 67], "ibmq_manila": [8, 62], "shot": [8, 9, 20, 28, 37, 39, 51, 62, 63], "1000": [8, 9, 39, 62, 63, 67], "q_model": [8, 62], "honeywel": [8, 39, 62, 67], "global": [8, 32, 37, 50, 62, 67], "user_email": [8, 62, 67], "my_honeywel": [8, 62, 67], "quantinuum_": [8, 62], "account_email": [8, 62], "hq": [8, 39, 62, 67], "h1": [8, 39, 62, 67], "1e": [8, 37, 39, 51, 62], "h_model": [8, 62], "argmax": [8, 11, 19, 62, 65], "mse_loss": [8, 19, 62], "adam": [8, 19, 61, 62], "use_tensorboard": [8, 19, 37, 51, 62], "2597": [8, 62], "2860": [8, 62], "5429": [8, 62], "5000": [8, 9, 19, 62, 63], "1886": [8, 62], "0731": [8, 62], "7714": [8, 62], "8667": [8, 19, 20, 62], "0756": [8, 62], "0897": [8, 19, 62], "0516": [8, 62], "0375": [8, 62], "9714": [8, 9, 21, 62, 63], "0000": [8, 9, 21, 62, 63], "0244": [8, 62], "0216": [8, 62], "9857": [8, 9, 17, 19, 21, 62, 63], "0362": [8, 62], "0183": [8, 62], "9667": [8, 17, 21, 62], "0153": [8, 62], "0363": [8, 62], "0204": [8, 62], "0496": [8, 62], "0314": [8, 62], "0312": [8, 62], "0383": [8, 62], "0707": [8, 62], "0364": [8, 62], "1187": [8, 21, 62], "8333": [8, 19, 20, 62], "0423": [8, 62], "1750": [8, 62], "0753": [8, 62], "0993": [8, 62], "8857": [8, 21, 62], "0419": [8, 62], "0970": [8, 62], "0512": [8, 62], "0555": [8, 62], "19": [8, 19, 62], "fig": [8, 9, 20, 21, 47, 48, 52, 62, 63, 67], "sharex": [8, 9, 20, 21, 62, 63], "final": [8, 15, 25, 35, 43, 47, 51, 56, 60, 61, 62, 63, 65], "circ": [8, 11, 19, 55, 57, 62, 65], "prob": [8, 19, 62], "21": [8, 19, 62], "paramet": [8, 10, 14, 16, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 50, 51, 53, 61, 62, 63, 64, 65], "lr": [8, 19, 62], "best": [8, 14, 19, 29, 37, 42, 50, 51, 62, 63], "epoch_loss": [8, 19, 62], "zero_grad": [8, 19, 29, 32, 37, 51, 62], "backward": [8, 19, 29, 32, 37, 51, 57, 60, 62], "dev_acc": [8, 19, 62], "lt": [8, 19, 37, 51, 62], "elif": [8, 19, 62], "earli": [8, 19, 32, 62, 67], "stop": [8, 19, 32, 35, 41, 51, 62], "break": [8, 19, 25, 32, 37, 41, 60, 62], "load": [8, 14, 19, 29, 32, 37, 50, 51, 62], "3878655098378658": [8, 62], "6333333333333333": [8, 19, 62], "08868948055896908": [8, 62], "9333333333333333": [8, 19, 62], "02485578407504363": [8, 62], "22": [8, 19, 62], "50": [8, 11, 19, 32, 62, 65], "24": [8, 19, 20, 21, 32, 62], "xorsentencemodel": [8, 19, 62], "kwarg": [8, 19, 32, 35, 37, 39, 50, 51, 62], "xor_net": [8, 19, 62], "sequenti": [8, 19, 32, 37, 62], "relu": [8, 19, 62], "diagram_pair": [8, 19, 62], "first_d": [8, 62], "second_d": [8, 62], "zip": [8, 9, 19, 32, 62, 63], "evaluated_pair": [8, 19, 62], "itertool": [8, 19, 62], "make_pair_data": [8, 19, 62], "pair_diag": [8, 19, 62], "pair_label": [8, 19, 62], "train_pair_circuit": [8, 19, 62], "train_pair_label": [8, 19, 62], "dev_pair_circuit": [8, 19, 62], "dev_pair_label": [8, 19, 62], "test_pair_circuit": [8, 19, 62], "test_pair_label": [8, 19, 62], "26": [8, 62], "sampl": [8, 19, 32, 41, 43, 62, 67], "300": [8, 9, 19, 62, 63], "200": [8, 9, 19, 32, 37, 62, 63], "27": [8, 10, 62, 64], "all_pair_circuit": [8, 19, 62], "train_pair_dataset": [8, 19, 62], "28": [8, 62], "predict": [8, 11, 19, 28, 32, 37, 40, 41, 50, 51, 53, 62, 63, 65], "flatten": [8, 19, 62], "doubletensor": [8, 62], "29": [8, 62], "binary_cross_entropi": [8, 19, 62], "xor_model": [8, 19, 62], "272213414468282": [8, 62], "45": [8, 62], "107582013803147": [8, 62], "52": [8, 62], "009163821491491": [8, 62], "485": [8, 19, 62], "869323840623094": [8, 62], "53": [8, 62], "3866653899992134": [8, 62], "965": [8, 62], "6390147764771847": [8, 62], "845": [8, 62], "7195060019336509": [8, 62], "885": [8, 62], "94": [8, 62], "31": [8, 62], "xor_label": [8, 62], "first": [8, 19, 28, 32, 33, 38, 41, 42, 47, 48, 50, 51, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67], "two": [8, 14, 25, 28, 31, 32, 33, 35, 37, 39, 40, 51, 55, 57, 60, 61, 62, 65], "entri": [8, 32, 35, 37, 51, 56, 62, 63], "both": [8, 11, 14, 19, 28, 29, 32, 34, 35, 37, 40, 42, 48, 51, 56, 62, 65], "last": [8, 62], "differ": [8, 14, 19, 28, 31, 32, 37, 40, 41, 42, 43, 51, 55, 56, 60, 62, 63, 65, 67], "xor_tensor": [8, 62], "detach": [8, 32, 33, 37, 51, 62], "94320787": [8, 62], "27014615": [8, 62], "2668538": [8, 62], "32": [8, 62], "p_circ": [8, 62], "to_pennylan": [8, 62], "initialise_concrete_param": [8, 62], "weight": [8, 19, 28, 29, 32, 35, 37, 51, 53, 61, 62], "unnorm": [8, 32, 62], "01249293": [8, 62], "98750707": [8, 62], "33": [8, 13, 32, 37, 62], "person": [8, 11, 62, 65], "run": [8, 11, 13, 16, 19, 30, 32, 35, 37, 39, 41, 51, 52, 53, 58, 63, 65, 67], "softwar": [8, 28, 29, 61, 62, 65], "83502102": [8, 62], "16497898": [8, 62], "o": [9, 14, 17, 20, 21, 32, 35, 37, 49, 51, 63], "warn": [9, 10, 11, 20, 21, 32, 63, 64, 65], "filterwarn": [9, 10, 11, 20, 21, 63, 64, 65], "ignor": [9, 10, 11, 14, 17, 20, 21, 32, 37, 51, 63, 64, 65, 67], "environ": [9, 17, 20, 21, 32, 63], "tokenizers_parallel": [9, 17, 20, 21, 63], "rp_train_data": [9, 63], "rp_test_data": [9, 63], "organ": [9, 32, 42, 63], "church": [9, 63], "establish": [9, 63], "compani": [9, 32, 63], "sell": [9, 63], "soldier": [9, 63], "serv": [9, 63, 67], "sailor": [9, 63], "root_cat": [9, 14, 32, 35, 51, 63], "suppress_except": [9, 35, 51, 63], "raw_val_diagram": [9, 63], "none": [9, 14, 31, 32, 33, 34, 35, 36, 37, 50, 51, 63, 67], "original_diagram": [9, 63], "removed_cups_diagram": [9, 63], "aerbackend": [9, 20, 39, 63], "tketmodel": [9, 20, 29, 37, 46, 50, 51, 53, 63, 67], "compil": [9, 20, 28, 32, 37, 39, 48, 50, 51, 63, 65, 67], "default_compilation_pass": [9, 20, 39, 63, 67], "8192": [9, 20, 49, 63, 67], "binarycrossentropyloss": [9, 20, 21, 29, 37, 40, 46, 50, 51, 53, 63], "builtin": [9, 20, 21, 63], "binari": [9, 11, 20, 21, 29, 32, 35, 37, 39, 51, 61, 62, 63, 65], "cross": [9, 11, 14, 20, 21, 28, 29, 33, 35, 37, 40, 51, 61, 63, 65], "entropi": [9, 11, 20, 21, 37, 40, 51, 61, 63, 65], "error": [9, 20, 21, 28, 32, 35, 37, 50, 51, 62, 63, 67], "bce": [9, 20, 21, 37, 51, 63], "quantumtrain": [9, 20, 21, 29, 37, 39, 46, 50, 51, 53, 63, 67], "spsaoptim": [9, 20, 21, 29, 37, 39, 46, 50, 51, 53, 63], "optim_hyperparam": [9, 20, 21, 37, 51, 63], "05": [9, 20, 33, 63], "06": [9, 20, 21, 63], "01": [9, 20, 21, 37, 51, 63], "8875": [9, 63], "5880": [9, 63], "6286": [9, 63], "2760": [9, 63], "1021": [9, 63], "7258": [9, 63], "1741": [9, 63], "4057": [9, 63], "9500": [9, 63], "7419": [9, 63], "1405": [9, 63], "0325": [9, 63], "9643": [9, 63], "400": [9, 50, 63], "1108": [9, 63], "0666": [9, 63], "7742": [9, 63], "500": [9, 63], "0975": [9, 21, 63], "6569": [9, 63], "600": [9, 63], "0921": [9, 63], "3631": [9, 63], "7903": [9, 63], "700": [9, 63], "0820": [9, 63], "0184": [9, 63], "9786": [9, 63], "7581": [9, 63], "800": [9, 63], "0858": [9, 63], "6595": [9, 63], "8065": [9, 63], "900": [9, 63], "0738": [9, 63], "0420": [9, 63], "0677": [9, 63], "6735": [9, 63], "8064516129032258": [9, 63], "john__n": [10, 64], "in__": [10, 64], "park__n": [10, 64], "the__n": [10, 64], "walks__n": [10, 64], "256": [10, 24, 64], "iqp_ansatz": [10, 64], "john__n_0": [10, 64], "john__n_1": [10, 64], "john__n_2": [10, 64], "l_0": [10, 64], "l_1": [10, 64], "l_2": [10, 64], "l_3": [10, 64], "park__n_0": [10, 64], "park__n_1": [10, 64], "park__n_2": [10, 64], "s_0": [10, 16, 64], "rand": [10, 11, 64, 65], "p": [10, 13, 14, 16, 28, 29, 35, 37, 40, 51, 52, 55, 64], "50024044": [10, 64], "25483124": [10, 64], "40727411": [10, 64], "86071497": [10, 64], "tensor_diagram_np": [10, 64], "result": [10, 14, 25, 32, 33, 34, 35, 37, 38, 39, 41, 42, 45, 48, 50, 51, 53, 54, 55, 56, 58, 59, 60, 64, 65, 67], "87621804": [10, 64], "47717323": [10, 64], "jax": [11, 29, 37, 39, 45, 48, 50, 51, 55, 65], "set_backend": [11, 65], "read": [11, 14, 29, 32, 35, 45, 50, 51, 57, 61, 62, 63, 65], "fname": [11, 65], "readlin": [11, 65], "target": [11, 31, 32, 37, 51, 61, 62, 63, 65], "ln": [11, 65], "float32": [11, 32, 65], "train_target": [11, 65], "test_target": [11, 65], "applic": [11, 14, 28, 29, 32, 35, 40, 48, 51, 52, 55, 60, 65], "assign": [11, 14, 38, 40, 44, 50, 52, 55, 58, 62, 64, 65], "dimens": [11, 14, 28, 31, 32, 50, 51, 52, 55, 56, 58, 61, 64, 65], "space": [11, 25, 28, 31, 33, 35, 51, 52, 55, 58, 60, 64, 65], "vocabulari": [11, 14, 32, 33, 38, 41, 51], "vocab": [11, 65], "5488135": [11, 65], "71518937": [11, 65], "exp": [11, 32, 65], "np_circuit": [11, 65], "comput": [11, 13, 15, 19, 28, 29, 31, 32, 37, 38, 39, 41, 44, 48, 51, 52, 53, 55, 56, 60, 63, 64, 65], "cost": [11, 40, 65], "log2": [11, 65], "jit": [11, 39, 50, 65], "grad": [11, 32, 37, 65], "training_loss": [11, 65], "gradient": [11, 19, 32, 37, 38, 39, 50, 51, 53, 62, 65], "90": [11, 65], "gr": [11, 65], "1838509440422058": [11, 65], "029141228646039963": [11, 65], "014427061192691326": [11, 65], "40": [11, 32, 65], "009020490571856499": [11, 65], "006290055345743895": [11, 65], "60": [11, 20, 21, 43, 65], "004701165948063135": [11, 65], "70": [11, 65], "0036874727811664343": [11, 65], "80": [11, 65], "0029964144341647625": [11, 65], "0025011023972183466": [11, 65], "np_test_circuit": [11, 65], "test_predict": [11, 65], "hit": [11, 65], "8666666666666667": [11, 65], "To": [12, 14, 25, 29, 30, 32, 37, 39, 40, 47, 55, 56, 58, 60, 61, 62, 63, 64, 67], "further": [12, 14, 15, 29, 32, 40, 41, 52, 55, 58, 60, 67], "depth": [12, 14, 34, 51], "necessari": [12, 14, 39, 43, 47, 50, 67], "familiaris": 12, "yourself": [12, 14], "underli": [12, 15, 32, 35, 51, 59], "librari": [12, 13, 15, 28, 29, 32, 39, 43, 48, 50, 58, 66], "manipul": [12, 41, 46, 52, 53, 57], "knowledg": 12, "contribut": [12, 29, 66], "discocat": [12, 13, 15, 28, 29, 35, 41, 47, 50, 51, 57, 58, 59], "classic": [12, 13, 14, 21, 28, 29, 37, 38, 39, 42, 45, 46, 48, 50, 51, 52, 53, 56, 59, 62, 63, 65], "network": [12, 14, 19, 28, 31, 32, 37, 39, 42, 48, 50, 51, 56, 58, 59, 60, 62, 64, 65, 67], "ac2004": [13, 28], "abramski": [13, 28], "coeck": [13, 28, 29], "categor": [13, 28, 40, 55, 57], "semant": [13, 28, 52, 55], "protocol": [13, 32], "lic": 13, "2004": [13, 28], "sc2021": [13, 28, 47, 50], "clark": [13, 28, 29], "someth": [13, 32, 37], "old": [13, 32, 50], "ccg": [13, 14, 28, 32, 33, 35, 46, 47, 48, 50, 51, 55, 60], "transform": [13, 19, 28, 32, 46, 48, 55, 62], "arxiv": [13, 29, 31, 32, 51], "2109": 13, "10044": 13, "2021": [13, 29], "csc2010": [13, 28, 55], "m": [13, 14, 32, 37, 39, 40], "sadrzadeh": [13, 28], "mathemat": [13, 28, 42, 52, 57], "foundat": [13, 28], "distribut": [13, 28, 32, 37, 43, 50, 51, 55, 61, 67], "mean": [13, 28, 32, 35, 37, 40, 41, 43, 51, 52, 59, 61, 62, 65, 67], "lambek": [13, 28, 33, 51, 55], "festschirft": 13, "special": [13, 28, 32, 34, 41, 44, 51, 55, 57], "issu": [13, 29, 43, 54, 63], "linguist": [13, 41, 42, 44], "analysi": [13, 25, 40, 41, 42, 60], "2010": [13, 32], "cw2021": [13, 56], "v": [13, 14, 29, 55], "wang": 13, "semspac": 13, "ftc2020": [13, 15, 28], "de": [13, 29], "felic": [13, 29], "toumi": [13, 29], "act": [13, 28], "2020": 13, "hs2007": [13, 28, 47], "hockenmai": [13, 28], "steedman": [13, 28], "ccgbank": [13, 28, 35, 50, 51], "corpu": [13, 28, 35, 41, 47, 51], "deriv": [13, 14, 28, 29, 32, 33, 34, 35, 40, 46, 47, 50, 51, 55, 59, 60, 64], "extract": [13, 38, 41, 42, 44, 50, 54, 63], "penn": [13, 28, 47], "treebank": [13, 28, 47], "volum": [13, 40, 42], "number": [13, 14, 28, 31, 32, 33, 35, 37, 38, 40, 41, 43, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64], "septemb": 13, "2007": 13, "hv2013": [13, 55], "heunen": 13, "vicari": 13, "introduct": [13, 14, 15, 29, 38, 44], "mechan": [13, 28, 32, 37, 57], "cours": [13, 29], "oxford": 13, "univers": [13, 32], "2013": 13, "kar2016": [13, 28, 34, 50, 51, 56], "kartsakli": [13, 29], "coordin": [13, 14, 32, 34, 45, 50, 51, 56, 59], "2016": 13, "kea2014": [13, 28, 56], "pulman": 13, "natur": [13, 28, 29, 32, 41, 42, 44], "languag": [13, 15, 28, 29, 32, 35, 40, 41, 42, 44, 47, 51, 56, 67], "compact": [13, 28, 55, 59], "frobeniu": [13, 28], "algebra": [13, 28, 57, 67], "logic": [13, 28, 32, 55], "2014": 13, "kea2021": [13, 29], "fan": [13, 29], "yeung": [13, 29], "pearson": [13, 29], "lorenz": [13, 29], "meichanetzidi": [13, 29], "effici": [13, 22, 39, 41, 42, 50, 58, 62, 63], "nlp": [13, 25, 28, 40, 41, 43, 44, 47, 50, 52, 60, 65, 67], "2110": [13, 29], "04236": [13, 29], "lam1999": [13, 14, 28, 50, 52, 55], "revisit": 13, "aspect": [13, 33, 40], "1999": [13, 28, 55], "lea2021": [13, 61, 63, 65], "qnlp": [13, 28, 29, 67], "practic": [13, 28, 29, 41, 42, 47, 50, 52, 57, 67], "2102": 13, "12846": 13, "mea2020": [13, 65], "awar": [13, 39, 67], "2012": 13, "03756": 13, "rea2016": [13, 63], "rimel": 13, "maillard": 13, "polajnar": 13, "relpron": [13, 63], "rel": [13, 14, 32, 35, 45, 50, 51, 56, 59, 63], "claus": [13, 63], "scc2014a": [13, 28, 50, 56], "anatomi": 13, "subject": [13, 23, 32, 59, 60, 63], "pronoun": [13, 45, 50, 56, 59, 63], "journal": [13, 29], "scc2014b": [13, 28, 50, 56], "ii": 13, "possess": 13, "sja2019": [13, 56], "sim": [13, 31, 51], "johnson": 13, "aspuru": 13, "guzik": 13, "express": [13, 28, 32, 40, 50, 52, 56], "entangl": [13, 28, 31, 42, 51], "capabl": [13, 14, 39, 41, 42, 50, 67], "parameter": [13, 32], "hybrid": [13, 29, 37, 39, 45, 50, 51, 53, 61, 63], "algorithm": [13, 28, 32, 37, 42, 51, 53], "1905": [13, 31, 51], "10876": [13, 31, 51], "2019": 13, "spa1998": [13, 53], "spall": 13, "simultan": [13, 19, 33, 37, 40, 51, 62, 65], "perturb": [13, 37, 51, 65], "stochast": [13, 37, 51, 65], "ieee": [13, 37, 51], "transact": [13, 50], "aerospac": 13, "electron": [13, 28], "system": [13, 28, 32, 42, 59, 62, 63], "1998": 13, "ste2000": [13, 28], "syntact": [13, 14, 28, 29, 46, 59, 60], "process": [13, 14, 15, 25, 28, 29, 32, 35, 37, 38, 39, 40, 42, 43, 44, 48, 51, 52, 53, 65], "mit": 13, "press": 13, "2000": 13, "yk2021": [13, 28, 47, 55, 60], "version": [13, 14, 28, 30, 32, 37, 40, 50, 55, 65], "framework": [13, 28, 32, 55, 57], "ynm2017": [13, 28, 47], "yoshikawa": 13, "noji": 13, "matsumoto": 13, "supertag": [13, 32, 46], "factor": [13, 28, 37, 38, 51, 63], "acl": 13, "2017": 13, "while": [14, 15, 28, 32, 33, 37, 38, 39, 41, 42, 43, 48, 51, 52, 55, 56, 60, 67], "primarili": [14, 28, 67], "aim": [14, 42, 43, 67], "programmat": 14, "sinc": [14, 22, 25, 28, 29, 32, 33, 34, 37, 41, 42, 47, 48, 50, 51, 55, 56, 57, 60, 61, 63, 64, 67], "equip": [14, 28, 48, 52, 57, 58], "immedi": [14, 32, 37, 47], "easi": [14, 15, 50, 52, 53], "access": [14, 32, 35, 37, 39, 42, 51, 62, 64, 67], "most": [14, 22, 28, 32, 35, 40, 41, 42, 43, 44, 46, 47, 50, 51, 54, 55, 66, 67], "toolkit": [14, 15, 30, 44, 47, 50, 53, 56, 60, 66, 67], "addit": [14, 28, 32, 35, 37, 44, 47, 50, 51, 52, 56, 58, 61], "allow": [14, 15, 19, 28, 29, 32, 35, 37, 39, 41, 47, 50, 51, 52, 57, 58, 59, 62, 67], "dual": [14, 28], "summari": 14, "avail": [14, 29, 32, 35, 44, 47, 50, 53, 56, 61, 63, 67], "given": [14, 19, 28, 29, 31, 32, 34, 35, 36, 37, 50, 51, 53, 55, 56, 60, 62, 67], "input_fil": 14, "json": [14, 32, 35, 51], "pickl": [14, 19, 32, 37, 50], "unicod": 14, "ascii": [14, 33, 35, 50, 51], "imag": [14, 33, 40], "png": 14, "pdf": [14, 31, 32, 51], "jpeg": 14, "jpg": 14, "ep": 14, "pgf": 14, "raw": [14, 25, 41, 42, 60], "rgba": 14, "svg": 14, "svgz": 14, "tif": 14, "tiff": 14, "u": [14, 19, 29, 35, 51, 59, 61, 62], "var": [14, 32, 37], "output_fil": 14, "output_dir": 14, "bobcat": [14, 25, 28, 29, 30, 35, 47, 50, 51, 60], "depccg": [14, 28, 30, 35, 47, 50, 51], "stair": [14, 29, 35, 51], "rewrite_rul": 14, "iqp": [14, 28, 31, 51, 58], "mp": [14, 28, 32], "store_arg": 14, "load_arg": 14, "input_sent": 14, "section": [14, 32, 35, 39, 41, 42, 44, 47, 50, 51, 53, 60, 61, 62, 64, 65, 66], "via": [14, 39, 59, 60, 64, 67], "specif": [14, 25, 28, 32, 33, 39, 40, 41, 42, 43, 48, 51, 52, 53, 55, 56, 57, 58, 60, 61, 63, 64, 65, 67], "describ": [14, 28, 32, 53, 65], "straightforward": [14, 40], "formal": [14, 28, 33, 42, 47, 51, 52, 55], "produc": [14, 28, 33, 35, 41, 50, 51, 58, 60, 61, 65, 67], "faithfulli": [14, 47], "mai": [14, 32, 33, 34, 35, 37, 39, 40, 41, 42, 43, 51, 56, 59, 60], "certain": [14, 28, 29, 32, 37, 41, 42, 56, 58, 60], "featur": [14, 15, 28, 30, 32, 41, 42, 44, 46, 47, 48, 50, 57, 67], "unari": [14, 29, 32, 33, 35, 50, 51], "later": [14, 55, 60], "instead": [14, 31, 32, 35, 37, 41, 50, 51, 55, 56, 57, 60, 61, 65], "consol": 14, "charact": [14, 32, 33, 35, 51], "entir": [14, 32, 47, 60], "file": [14, 32, 35, 37, 50, 51, 62, 67], "store": [14, 32, 37, 39, 51, 53, 58], "rest": [14, 32, 35, 39, 51, 60, 61], "contain": [14, 28, 32, 33, 34, 35, 36, 37, 39, 46, 48, 50, 51, 52, 53, 55, 56, 57, 59, 63, 66], "one": [14, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 47, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 63, 67], "per": [14, 31, 33, 35, 50, 51], "written": [14, 41], "flag": [14, 32, 35, 50, 51], "enough": [14, 28, 32], "ask": [14, 29, 32, 59], "varieti": [14, 28, 40, 41, 43, 46, 53], "folder": [14, 30, 32, 41, 49], "image_fold": 14, "e": [14, 22, 29, 31, 32, 33, 35, 37, 41, 50, 51, 52, 53, 55, 56, 57, 58, 61, 64, 67], "diagram_1": 14, "diagram_2": 14, "current": [14, 28, 30, 32, 35, 37, 47, 50, 51, 53, 60, 67], "possibl": [14, 29, 32, 33, 35, 37, 39, 40, 51, 54, 60, 62, 67], "paper": [14, 29, 31, 32, 44, 51, 65], "exact": [14, 21, 32, 35, 37, 39, 42, 43, 51, 62], "figur": [14, 33, 67], "font": [14, 33], "specifi": [14, 32, 34, 35, 37, 41, 50, 51, 56, 61, 62, 63], "fig_width": 14, "fig_height": 14, "its": [14, 15, 28, 30, 32, 35, 37, 40, 41, 42, 44, 51, 52, 55, 56, 57, 60, 64, 67], "There": [14, 19, 42, 43, 60, 62], "third": 14, "conform": [14, 33, 51], "definit": [14, 42, 50, 57], "consid": [14, 25, 32, 37, 41, 48, 54, 55, 59, 60], "movi": [14, 41], "ve": 14, "ever": 14, "seen": [14, 28, 52, 56, 58], "bx": [14, 35, 51], "avoid": [14, 19, 32, 37, 43, 50, 62], "mani": [14, 15, 25, 28, 38, 39, 41, 42, 44, 47, 52, 60, 62, 67], "even": [14, 34, 35, 38, 51, 57, 58, 60], "relativeri": 14, "short": [14, 38], "difficult": [14, 32, 60], "where": [14, 15, 28, 29, 32, 33, 36, 37, 38, 39, 40, 43, 44, 50, 51, 55, 57, 58, 60, 61, 62, 63, 67], "diagrammat": [14, 28, 33, 51, 57], "clariti": 14, "been": [14, 32, 35, 42, 50, 51, 55, 62, 64], "requir": [14, 15, 31, 32, 34, 35, 37, 38, 39, 43, 47, 50, 51, 52, 54, 56, 57, 58, 59, 60, 65, 67], "interwoven": [14, 33, 51], "now": [14, 48, 50, 58, 59, 61, 62, 63, 64, 65], "merg": [14, 33, 51], "trade": [14, 28, 33, 40, 51], "off": [14, 28, 33, 40, 51], "simplic": [14, 33, 51], "larger": [14, 32, 33, 41, 50, 51], "might": [14, 32, 33, 35, 38, 41, 48, 51, 52, 54, 60, 67], "lead": [14, 19, 33, 40, 51, 59, 60, 62], "sparsiti": [14, 33, 51], "problem": [14, 28, 32, 33, 40, 42, 47, 50, 51, 54, 56, 58, 59, 62], "dure": [14, 32, 33, 37, 40, 41, 43, 50, 51], "remove_swap": [14, 29, 33, 46, 51], "user": [14, 32, 35, 37, 39, 47, 51, 55, 58, 59, 66, 67], "encod": [14, 15, 32, 39, 47, 55, 57, 60], "start": [14, 15, 31, 32, 35, 37, 42, 44, 51, 56, 60, 61, 62, 63, 65], "batch": [14, 32, 35, 37, 51, 53, 61, 62, 63], "exactli": [14, 25, 32, 37, 43, 60], "some": [14, 15, 28, 29, 32, 33, 37, 39, 40, 41, 42, 44, 51, 52, 55, 56, 58, 59, 60, 61, 62, 63, 67], "linearread": [14, 29, 35, 46, 51, 60], "too": [14, 56], "complic": [14, 41, 56, 57, 59], "render": [14, 16, 29, 60], "stage": [14, 15, 32, 38, 67], "pipelin": [14, 15, 28, 29, 37, 45, 51, 55, 56, 58, 61, 63, 65], "dim_n": 14, "dim_": 14, "pure": [14, 45, 55, 62], "done": [14, 32, 41, 60, 62, 64, 67], "ccgtree": [14, 29, 35, 46, 47, 50, 51], "____": 14, "_____________": 14, "_____": 14, "_______": 14, "______": 14, "repeat": [14, 43], "yaml": 14, "conf": 14, "time": [14, 32, 37, 39, 40, 41, 43, 50, 51, 59, 60, 62, 63, 65, 67], "taken": [14, 32, 41], "prioriti": [14, 32, 35, 51], "show": [14, 32, 33, 37, 38, 45, 47, 52], "exit": 14, "choic": [14, 28, 29, 39, 40, 48, 52, 57, 58, 60, 63], "output_format": 14, "directli": [14, 28, 29, 32, 34, 35, 50, 51, 55, 56, 60, 67], "image_format": 14, "effect": [14, 32, 37, 42, 63, 67], "output_opt": 14, "keyword": [14, 32, 35, 37, 50, 51, 63], "write": [14, 52], "stdout": 14, "directori": [14, 32, 35, 51], "mutual": 14, "excluss": 14, "assum": [14, 25, 32, 41, 49, 60], "spaci": [14, 25, 35, 36, 41, 51, 60], "exclus": 14, "root_categori": 14, "root": [14, 32, 35, 41, 50, 51, 63], "auxiliari": [14, 41, 45, 56, 59], "connector": [14, 45, 59], "postadverb": [14, 23, 59], "preadverb": [14, 23, 59], "object_rel_pronoun": [14, 23, 59], "subject_rel_pronoun": [14, 23, 59], "ansatz_opt": 14, "max_ord": [14, 24, 31, 51], "futur": [14, 32, 37, 50], "engin": [15, 42], "low": [15, 28, 52, 53, 58], "place": [15, 28, 32, 37, 48, 50, 53, 65], "At": [15, 29, 38], "core": [15, 35, 50, 51], "main": [15, 32, 50, 53, 59], "intern": [15, 32, 48, 53, 57], "make": [15, 16, 28, 29, 32, 37, 40, 41, 42, 43, 45, 47, 48, 50, 53, 55, 56, 57, 58, 60, 63], "offer": [15, 55, 67], "furthermor": [15, 29, 50, 59, 62, 63, 67], "perspect": [15, 42], "abstract": [15, 22, 28, 31, 34, 35, 36, 37, 42, 46, 48, 51, 52, 53, 56, 57, 58, 67], "build": [15, 28, 32, 37, 39, 41, 50, 51, 57], "thu": [15, 42, 52, 56], "surpris": 15, "advanc": [15, 28, 29, 32, 53, 57, 61, 62, 63], "involv": [15, 19, 28, 38, 39, 40, 41, 42, 47, 53, 56, 62], "resourc": [15, 29, 39, 44, 47, 59, 67], "gentl": 15, "basic": [15, 28, 29, 43, 50, 53, 55], "concept": [15, 42, 44, 50, 55, 67], "notebook": [15, 29, 41, 50, 58, 59, 60, 63], "delv": 15, "alic": [16, 24], "github": [16, 29, 32, 39, 41, 47, 50], "view": [16, 32, 37, 50, 52], "http": [16, 31, 32, 37, 47, 51], "cqcl": 16, "io": 16, "html": [16, 32], "rx": 16, "alice__n_0": 16, "alice__n_1": 16, "runs__n": 16, "alice__n_2": 16, "s_1": 16, "param_dict": 16, "001": [16, 37, 51], "enumer": [16, 32, 35, 37, 51], "002": 16, "003": 16, "004": 16, "symbol_substitut": 16, "006": 16, "008": 16, "dev_dataset": 17, "6473": 17, "7113": 17, "6071": [17, 20], "5333": 17, "5289": 17, "6112": 17, "6429": 17, "6000": [17, 19], "2938": 17, "4805": 17, "8143": [17, 20], "7500": 17, "1413": 17, "2196": 17, "9000": [17, 19, 21], "0299": 17, "0654": 17, "9833333492279053": 17, "classifi": [19, 40, 50, 61, 62, 65, 67], "whether": [19, 32, 33, 34, 35, 37, 42, 51, 62, 63], "talk": [19, 32, 60, 62], "topic": [19, 40, 44, 62], "2554": 19, "2201": 19, "6333": [19, 21], "2078": 19, "3598": 19, "6571": 19, "1381": 19, "7429": [19, 20], "1238": 19, "1451": 19, "0584": 19, "0498": 19, "0476": 19, "0787": 19, "0486": 19, "0763": 19, "0427": 19, "1096": 19, "1712": 19, "8286": [19, 20], "0772": 19, "1664": 19, "8714": [19, 20], "1216": 19, "1217": 19, "8000": [19, 20], "0568": 19, "9143": 19, "0268": 19, "0464": 19, "0504": 19, "0457": 19, "0335": 19, "0480": 19, "prevent": [19, 37, 51, 62], "overfit": [19, 43, 62], "d_type": 19, "checkpoint": [19, 29, 32, 37, 46, 50, 51, 61, 62, 63], "_make_checkpoint": 19, "wb": 19, "dump": 19, "rb": 19, "_load_checkpoint": 19, "4885058254003525": 19, "33435447700321674": 19, "20667879283428192": 19, "attempt": [19, 32], "ouput": 19, "simpl": [19, 32, 34, 37, 51, 55, 56, 58, 59, 60, 61, 62, 65, 67], "neural": [19, 39, 42, 60, 62, 67], "learn": [19, 28, 29, 32, 37, 38, 39, 41, 42, 44, 47, 48, 50, 51, 53, 62, 63, 67], "xor": [19, 62], "should": [19, 32, 34, 35, 37, 39, 43, 50, 51, 55, 56, 57, 60, 67], "autograd": [19, 32, 37, 50, 62], "our": [19, 29, 55, 61, 62, 67], "guarante": [19, 32, 37, 62], "posit": [19, 29, 32, 35, 37, 40, 41, 50, 51, 62], "dy": [19, 62], "otherwis": [19, 32, 33, 35, 37, 40, 48, 50, 51, 62], "occur": [19, 32, 33, 37, 40, 41, 51, 58, 62], "neuron": [19, 62], "neg": [19, 35, 37, 40, 41, 51, 62, 67], "being": [19, 28, 32, 35, 37, 42, 50, 51, 62], "coupl": [19, 62, 67], "altern": [19, 47, 50, 55, 62, 65], "approach": [19, 42, 43, 62], "leakyrelu": [19, 62], "activ": [19, 32, 62, 66], "out": [19, 32, 37, 40, 41, 42, 43, 63], "lot": [19, 50, 62], "2415": [19, 62], "ll": [19, 32, 55, 62], "subset": [19, 32, 43, 62], "quickli": [19, 23, 62], "train_sampl": 19, "dev_sampl": 19, "test_sampl": 19, "five": 19, "expens": [19, 43, 61], "197823166847229": 19, "2114333659410477": 19, "815": 19, "346708431839943": 19, "805": 19, "5823822319507599": 19, "745": 19, "795": 19, "120": [20, 21], "4234": 20, "1181": 20, "6357": 20, "5667": 20, "4085": 20, "5062": 20, "6675": 20, "6192": 20, "7000": 20, "36": [20, 21, 32], "4664": 20, "1247": 20, "8071": 20, "48": [20, 21], "4219": 20, "4800": 20, "3915": 20, "4740": 20, "8643": 20, "72": [20, 21], "5074": 20, "4886": 20, "84": [20, 21], "4668": 20, "5140": 20, "96": [20, 21], "4172": 20, "4318": 20, "108": [20, 21], "4106": 20, "3923": 20, "3551": 20, "3636": 20, "7666666666666667": 20, "perform": [21, 28, 32, 37, 38, 39, 40, 42, 43, 50, 51, 57, 60, 61, 62, 63, 67], "numpymodel": [21, 29, 37, 46, 50, 51, 53, 67], "use_jit": [21, 37, 39, 50, 51], "use_jax": [21, 37, 51], "4317": 21, "2834": 21, "4429": 21, "4000": 21, "9717": 21, "7342": 21, "4857": 21, "3100": 21, "3090": 21, "1346": 21, "1554": 21, "1347": 21, "1118": 21, "1305": 21, "1134": 21, "1136": 21, "1380": 21, "2061": 21, "1173": 21, "1388": 21, "0916": 21, "1049": 21, "0935": 21, "except": [22, 23, 35, 50, 51], "typeerror": 22, "instanti": [22, 31, 32, 34, 35, 39, 51, 52, 53, 54, 55, 56, 58], "automat": [22, 32, 35, 41, 47, 50, 51, 55, 62, 65], "choos": [22, 29, 34, 43, 51, 53, 59, 61, 62], "decomposit": 22, "unfus": 22, "hope": 23, "succe": 23, "book": [23, 41, 44], "bed": 23, "cow": 23, "that_subj": 23, "that_obj": 23, "grass": 23, "egg": 23, "ham": 23, "chees": 23, "bend": 23, "dead": 23, "peopl": [23, 32, 42], "dualiti": [23, 34, 50, 51, 59], "clair": 24, "th": [24, 40], "tensornetwork": [24, 37, 50, 51], "tn": 24, "contractor": [24, 55], "auto": [24, 32, 33, 35, 51], "term": [25, 28, 41, 50, 59, 60, 62, 63], "down": [25, 28, 41, 60], "smaller": [25, 28, 32, 39, 41, 43, 60, 61, 65], "call": [25, 28, 32, 33, 34, 37, 41, 47, 48, 51, 55, 57, 60, 62, 63], "know": [25, 29, 44, 60, 63, 65], "what": [25, 32, 35, 51, 56, 60, 67], "kind": [25, 58, 60, 67], "punctuat": [25, 29, 32, 35, 41, 50, 51, 60], "accur": [25, 40, 41, 42, 43, 60, 62], "grammat": [25, 28, 41, 50, 52, 55, 60], "By": [25, 31, 35, 39, 40, 42, 43, 51, 55, 60, 63, 67], "delimit": [25, 60], "whitespac": [25, 35, 51, 60], "work": [25, 28, 29, 32, 37, 38, 52, 60], "rare": [25, 41, 60], "na\u00efv": [25, 60], "white": [25, 60], "proper": [25, 33, 41, 51, 60, 67], "through": [25, 32, 38, 39, 41, 48, 54, 59, 60, 63], "hierarci": [25, 60], "popular": [25, 43, 60, 67], "argument": [25, 28, 29, 32, 33, 35, 37, 51, 55, 56, 60, 63], "onc": [25, 32, 37, 42, 43, 56, 60, 67], "ccg_parser": [26, 35, 46, 51], "no_typ": [26, 29, 35, 51, 60], "rule_typ": [26, 29, 35, 51, 60], "adjoint": [28, 50, 52, 55, 57, 59], "transit": [28, 32, 37, 52, 55], "verb": [28, 41, 55, 56, 59, 60], "cdot": [28, 40, 52, 55, 59, 64], "side": [28, 34, 51], "plural": 28, "concret": [28, 32, 38, 46, 48, 52, 53, 55, 56, 58, 65], "parameteris": [28, 29, 31, 38, 45, 48, 51, 53, 55, 56, 64], "larg": [28, 31, 39, 40, 41, 42, 47, 51, 56, 58, 61, 65], "matrix": [28, 31, 32, 39, 50, 51], "product": [28, 31, 33, 42, 50, 51, 52, 55, 56, 57], "bag": [28, 29, 42, 50], "multiset": 28, "account": [28, 39, 41, 62, 67], "relationship": [28, 48], "between": [28, 31, 32, 33, 35, 37, 40, 42, 47, 48, 51, 52, 53, 55, 57, 62, 67], "art": [28, 30, 46, 47, 48, 50], "statist": [28, 30, 37, 42, 47, 48, 51, 67], "morphism": [28, 33, 51, 55, 57], "togeth": [28, 33, 51, 55, 58, 62, 67], "obei": 28, "condit": [28, 32, 57, 67], "depict": 28, "downward": 28, "concav": 28, "context": [28, 32, 37, 40, 41, 55, 61, 65], "mostli": 28, "bridg": [28, 59], "disconnect": 28, "alter": 28, "flow": [28, 50, 61], "theori": [28, 42, 55, 57], "consist": [28, 32, 37, 41, 47, 55, 57, 60, 61, 63, 65], "collect": [28, 37, 41, 42, 46, 51, 54, 57], "direct": [28, 32, 33, 37, 50, 51, 57, 60], "graph": 28, "properti": [28, 31, 32, 35, 42, 51, 52, 55, 57], "abil": [28, 42, 50, 52], "cqm": [28, 57], "studi": [28, 29, 42], "paradigm": [28, 52], "scienc": 28, "primit": 28, "physic": [28, 52, 56], "field": [28, 32, 35, 37, 42, 44, 51], "samson": 28, "bob": [28, 29], "over": [28, 32, 35, 37, 39, 41, 51, 63], "49": [28, 47], "000": [28, 47], "human": [28, 40, 41, 42, 47, 52], "julia": 28, "combinatori": [28, 47], "inspir": [28, 32, 56], "common": [28, 39, 40, 41, 42, 50, 56], "lexic": [28, 29, 35, 51], "deduct": 28, "proof": [28, 67], "categoris": [28, 40], "mildli": 28, "sensit": [28, 34, 40, 51], "stand": 28, "free": [28, 35, 39, 44, 51, 55, 57, 61, 65, 67], "chomski": 28, "hierarchi": [28, 41, 43, 48, 50, 67], "nice": 28, "power": [28, 41, 50, 55], "symmetri": 28, "caus": [28, 33, 35, 43, 50, 51, 55, 62], "coincid": 28, "often": [28, 40, 55, 57, 67], "non": [28, 32, 37, 39, 55], "represent": [28, 32, 33, 35, 37, 41, 42, 48, 50, 51, 52, 53, 57, 59, 60, 64, 67], "within": [28, 32, 37, 41, 56, 59], "upward": 28, "usual": [28, 37, 40, 41, 51, 67], "contract": [28, 37, 38, 39, 41, 50, 51, 52, 55, 56, 61, 64, 67], "english": [28, 32, 35, 51], "japanes": [28, 35, 50, 51], "mehrnoosh": 28, "steve": 28, "textrm": 28, "hand": [28, 38, 40, 41, 42, 44, 48, 53], "partial": 28, "sequenc": [28, 29, 32, 42, 50, 58], "addition": [28, 43, 47, 61], "delta": 28, "otim": [28, 52, 55, 57], "mu": 28, "satisfi": [28, 32, 55, 57, 67], "notion": [28, 57], "preserv": [28, 55], "essenti": [28, 65], "chain": [28, 32, 39, 55, 61, 65], "functori": [28, 55], "accommod": [28, 56, 60], "instantan": [28, 31, 51], "polynomi": [28, 31, 51], "interleav": [28, 31, 34, 51, 59], "hadamard": [28, 31, 50, 51], "diagon": [28, 31, 51], "machin": [28, 29, 39, 40, 41, 42, 44, 50, 53, 54, 67], "estim": [28, 32, 43], "far": [28, 55], "minimis": [28, 53], "variou": [28, 39, 41, 42, 47, 50, 58, 60], "execut": [28, 32, 37, 58, 59, 67], "hardwar": [28, 37, 38, 39, 42, 51, 52, 55, 59, 65], "hold": [28, 52, 57], "trainabl": [28, 32], "supervis": [28, 38, 43, 46, 47, 48, 50, 53], "alwai": [28, 32, 37, 50, 51, 56, 67], "pytorch": [28, 32, 37, 39, 43, 44, 45, 48, 50, 51, 53, 55, 61, 65, 67], "pair": [28, 32, 33, 37, 45, 51, 53, 60], "suitabl": [28, 42], "solv": [28, 32, 40, 42, 62, 63], "nisq": [28, 67], "noisi": [28, 39, 67], "intermedi": 28, "scale": [28, 35, 37, 50, 51, 63], "characteris": 28, "processor": [28, 32], "still": [28, 41, 50, 58, 67], "reach": [28, 32], "fault": 28, "toler": 28, "nor": 28, "profit": 28, "substanti": [28, 50, 58, 59], "supremaci": 28, "nois": [28, 67], "undesir": 28, "artefact": 28, "outcom": [28, 67], "deviat": [28, 55], "ideal": [28, 52, 67], "tool": [28, 29, 42, 47, 50, 57, 67], "hierarch": 28, "syntax": [28, 29, 41, 42, 44, 47, 48, 50, 67], "differenti": [28, 62, 65], "xanadu": 28, "enabl": [28, 30, 32, 37, 39, 42, 50, 51, 61, 62, 63], "particular": [28, 32, 37, 40, 50, 56], "event": 28, "disregard": 28, "joachim": [28, 55], "theoret": [28, 42], "sometim": [28, 41, 55, 56], "interfac": [28, 29, 35, 46, 47, 50, 51, 53, 56, 61], "sourc": [28, 29, 31, 32, 33, 34, 35, 36, 37, 41, 44, 51, 56], "meta": [28, 32], "ai": [28, 32, 42, 67], "sdk": 28, "ibm": [28, 39, 44, 62, 67], "research": [28, 29, 40, 41, 44, 57], "puls": 28, "initi": [28, 32, 37, 39, 45, 50, 62, 63], "block": [28, 31, 41, 51], "design": [28, 32, 37, 41, 42, 52, 67], "exploit": [28, 42, 50, 67], "phenomena": [28, 42], "superposit": [28, 42], "interfer": [28, 42, 67], "task": [28, 29, 32, 38, 40, 41, 48, 52, 60, 61, 63, 65, 67], "analogu": 28, "bit": [28, 39], "carrier": 28, "spin": 28, "live": [28, 32, 37], "dimension": [28, 39, 58, 61, 62, 63, 64, 65], "vector": [28, 31, 32, 37, 39, 50, 51, 52, 55, 60], "translat": [28, 32, 42, 44, 47, 67], "simplifi": [28, 39, 46, 48, 50, 52, 53, 57, 59, 60], "amen": [28, 48], "yank": 28, "simplif": 28, "stretch": [28, 59], "suit": [28, 52], "nativ": [28, 32, 50, 60, 61, 62, 63], "yet": [28, 52], "independ": [28, 48, 52, 58], "decis": [28, 40, 48, 52, 58], "enrich": [28, 52], "part": [28, 32, 33, 35, 37, 38, 41, 42, 44, 51, 60, 62, 64, 65, 67], "angl": [28, 38, 64], "cong": 28, "acycl": 28, "multi": [28, 29, 32, 37, 55], "vertic": [28, 35, 51], "edg": [28, 39], "connect": [28, 47, 57, 58], "predefin": [28, 40], "stylis": 28, "rangl": 28, "platform": 28, "cambridg": 28, "heart": 28, "agnost": 28, "optimis": [28, 37, 39, 48, 51, 61, 65], "code": [28, 32, 35, 46, 50, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "sever": [28, 32, 37, 39, 42, 43, 48, 50, 51, 53], "influenc": 28, "explicit": [28, 50, 60], "modular": 29, "experiment": [29, 32, 67], "quantinuum": [29, 39, 62, 67], "convers": [29, 32, 33, 47, 48, 51, 58, 60], "facilit": [29, 56, 61, 62, 63], "experi": [29, 33, 34, 37, 38, 39, 48, 50, 51, 52, 56, 58, 59, 61, 62, 63, 65, 67], "latest": 29, "higher": [29, 52, 58, 61], "linux": 29, "maco": 29, "window": [29, 50], "instal": [29, 32, 39, 47, 49, 50, 54, 58], "pip": [29, 30, 32, 39, 54, 58], "command": [29, 30, 35, 39, 49, 50, 51], "own": [29, 32, 37, 40, 51, 56, 60], "preview": 29, "repositori": [29, 30, 32, 39, 41, 50], "think": 29, "bug": [29, 50], "someon": [29, 38], "respond": [29, 42], "soon": [29, 67], "want": [29, 32, 38, 41, 63], "subscrib": 29, "mail": 29, "let": [29, 32, 37, 42, 61, 62, 63, 64, 65], "touch": 29, "discord": 29, "server": [29, 32, 35, 51], "notifi": 29, "announc": 29, "chat": 29, "licens": [29, 50], "under": [29, 32, 37, 47, 53], "apach": [29, 31, 51], "articl": [29, 44], "kartsaklis2021lambeq": 29, "titl": 29, "fficient": 29, "igh": 29, "evel": 29, "ython": 29, "ibrari": 29, "uantum": 29, "dimitri": 29, "ian": 29, "richi": 29, "anna": 29, "robin": 29, "alexi": 29, "giovanni": 29, "konstantino": 29, "stephen": 29, "year": 29, "preprint": 29, "troubleshoot": [29, 50], "lingust": 29, "typic": [29, 32, 37, 41, 43, 56], "workflow": 29, "corpora": [29, 47], "pre": [29, 32, 35, 37, 39, 42, 48, 51, 63], "handl": [29, 32, 37, 43, 50, 60], "unknown": [29, 32, 35, 50, 51], "classif": [29, 39, 42, 50, 61, 63, 65], "metric": [29, 37, 39, 42, 43, 45, 51, 53], "onlin": [29, 35, 47, 50, 51], "organis": [29, 41, 50], "manual": [29, 35, 49, 51, 53, 61, 62, 63, 65], "conjunct": [29, 34, 35, 41, 50, 51, 58, 67], "noun_phras": [29, 35, 51], "baseansatz": [29, 31, 46, 51, 56], "__call__": [29, 31, 32, 34, 35, 37, 51], "calculate_loss": [29, 37, 51], "bobcatparseerror": [29, 35, 51], "available_model": [29, 35, 51], "sentences2tre": [29, 35, 51], "ccgatomictyp": [29, 35, 46, 51], "ccgbankparseerror": [29, 35, 51], "ccgbankpars": [29, 35, 46, 47, 50, 51], "section2diagram": [29, 35, 51], "section2diagrams_gen": [29, 35, 51], "section2tre": [29, 35, 51], "section2trees_gen": [29, 35, 51], "sentence2tre": [29, 35, 51], "ccgrule": [29, 35, 46, 50, 51], "backward_appl": [29, 35, 51], "backward_composit": [29, 35, 51], "backward_crossed_composit": [29, 35, 51], "backward_type_rais": [29, 35, 51], "forward_appl": [29, 35, 51], "forward_composit": [29, 35, 51], "forward_crossed_composit": [29, 35, 51], "forward_type_rais": [29, 35, 51], "generalized_backward_composit": [29, 35, 51], "generalized_backward_crossed_composit": [29, 35, 51], "generalized_forward_composit": [29, 35, 51], "generalized_forward_crossed_composit": [29, 35, 51], "remove_punctuation_left": [29, 35, 50, 51], "remove_punctuation_right": [29, 35, 51], "check_match": [29, 35, 51], "infer_rul": [29, 35, 50, 51], "ccgruleuseerror": [29, 35, 51], "child": [29, 32, 35, 37, 51], "from_json": [29, 35, 51], "to_biclosed_diagram": [29, 35, 51], "to_diagram": [29, 35, 51], "to_json": [29, 35, 50, 51], "without_trivial_unary_rul": [29, 35, 51], "add_mani": [29, 37, 51], "from_fil": [29, 37, 51], "to_fil": [29, 37, 51], "ob_siz": [29, 31, 51], "coordinationrewriterul": [29, 34, 46, 51], "crossentropyloss": [29, 37, 40, 46, 50, 51, 53], "curryrewriterul": [29, 34, 46, 50, 51, 59], "shuffle_data": [29, 37, 51], "depccgparseerror": [29, 35, 51], "depccgpars": [29, 35, 46, 50, 51], "lossfunct": [29, 37, 46, 50, 51, 53], "bond_typ": [29, 31, 51], "mseloss": [29, 37, 40, 46, 50, 51, 53], "from_checkpoint": [29, 37, 51, 61, 63], "load_state_dict": [29, 32, 37, 51], "state_dict": [29, 32, 37, 51], "circuit_map": [29, 37, 51], "train_cost": [29, 51], "training_step": [29, 37, 51], "validation_step": [29, 37, 51], "quantummodel": [29, 37, 46, 50, 51], "add_rul": [29, 34, 51], "available_rul": [29, 34, 51], "update_hyper_param": [29, 37, 51], "sim14ansatz": [29, 31, 51], "sim15ansatz": [29, 31, 51], "stronglyentanglingansatz": [29, 31, 51], "default_assumpt": [29, 31, 51], "directed_cod": [29, 31, 51], "directed_dom": [29, 31, 51], "sort_kei": [29, 31, 51], "load_training_checkpoint": [29, 37, 51], "save_checkpoint": [29, 37, 51], "available_mod": [29, 35, 51], "tree2diagram": [29, 35, 50, 51], "height": [29, 35, 50, 51], "verbositylevel": [29, 35, 37, 51], "progress": [29, 32, 35, 50, 51], "has_valu": [29, 51], "webparseerror": [29, 35, 51], "webpars": [29, 35, 46, 50, 51, 54], "create_pregroup_diagram": [29, 33, 46, 51, 55], "diagram2str": [29, 33, 46, 51], "is_pregroup_diagram": [29, 33, 46, 51], "subpackag": 29, "text2diagram": [29, 47, 50, 51, 60], "strict": [29, 32, 37, 50, 57, 67], "option": [29, 30, 31, 32, 33, 34, 35, 37, 53, 58, 61, 63, 67], "configur": [29, 32, 37, 50, 51, 62, 63, 67], "glossari": [29, 50], "bibliographi": 29, "web": [29, 35, 42, 47, 50, 51], "demo": 29, "fulli": [30, 32, 37, 47, 48, 50, 60], "integr": [30, 32, 37, 47, 50, 67], "extra": [30, 31, 32, 37, 39, 51, 57, 60], "separ": [30, 41, 62], "homepag": 30, "download": [30, 32, 35, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "script": [30, 32, 50], "contrib": 30, "download_depccg_model": 30, "py": [30, 33, 37, 51], "abc": [31, 34, 35, 36, 37, 46, 51], "dict": [31, 32, 33, 35, 37, 51], "callabl": [31, 32, 35, 37, 51, 61, 63], "ndarrai": [31, 37, 51], "bool": [31, 32, 33, 34, 35, 37, 51], "single_qubit_rot": [31, 51], "postselection_basi": [31, 51], "qudit": [31, 51], "constructor": [31, 33, 50, 51, 60], "basi": [31, 50, 51], "present": [31, 41, 51, 55, 60, 61, 63, 65, 67], "seri": [31, 51, 60], "cycl": [31, 51], "pg_type": [31, 51], "calcul": [31, 32, 37, 39, 40, 51, 53], "tupl": [31, 32, 33, 35, 37, 51], "adjac": [31, 51, 55], "crz": [31, 51], "bond": [31, 51, 58], "maximum": [31, 32, 35, 50, 51], "must": [31, 32, 33, 35, 37, 39, 49, 51, 62, 63], "least": [31, 51, 59], "modif": [31, 32, 37, 51, 52], "et": [31, 51], "al": [31, 51], "replac": [31, 32, 34, 35, 41, 50, 51, 56, 59, 65], "ring": [31, 51], "crx": [31, 51], "opposit": [31, 51], "orient": [31, 51], "org": [31, 32, 37, 51], "strongli": [31, 47, 51, 62], "three": [31, 35, 50, 51, 60, 63, 67], "rzryrz": [31, 51], "adapt": [31, 32, 33, 51], "stronglyentanglinglay": [31, 51], "pursuant": [31, 51], "licenc": [31, 51], "architectur": [31, 39, 51, 67], "increas": [31, 32, 40, 41, 51, 67], "subsequ": [31, 32, 37, 41, 51], "assumpt": [31, 51], "augment": [31, 51], "total": [31, 32, 40, 51], "liter": [31, 51], "sqrt": [31, 51, 61], "_": [31, 32, 33, 51, 61], "bertforchartclassif": [32, 46], "config": 32, "chartclassifierconfig": 32, "bertpretrainedmodel": [32, 46], "t_destin": [32, 37], "arg": [32, 35, 37, 51], "share": [32, 56], "scriptmodul": 32, "add_memory_hook": 32, "memori": [32, 37, 39, 51], "hook": [32, 37, 50], "record": [32, 37], "consumpt": 32, "mem_rss_diff": 32, "reset": [32, 37, 51], "zero": [32, 37, 51], "reset_memory_hooks_st": 32, "add_modul": [32, 37], "adjust_logits_during_gener": 32, "logit": 32, "floattensor": 32, "subclass": [32, 39, 47, 50, 56], "pretrainedmodel": [32, 46], "behavior": [32, 37], "adjust": [32, 43, 50, 53, 57], "fn": [32, 37], "recurs": [32, 37], "submodul": [32, 37], "children": [32, 35, 37, 50, 51], "init": [32, 37], "doc": [32, 37, 41, 50], "no_grad": [32, 37], "init_weight": [32, 37], "fill_": [32, 37], "in_featur": [32, 37], "out_featur": [32, 37], "bia": [32, 37, 43], "requires_grad": [32, 37], "assisted_decod": 32, "input_id": 32, "longtensor": 32, "assistant_model": 32, "do_sampl": 32, "logits_processor": 32, "logitsprocessorlist": 32, "logits_warp": 32, "stopping_criteria": 32, "stoppingcriterialist": 32, "pad_token_id": 32, "eos_token_id": 32, "output_attent": 32, "output_hidden_st": 32, "output_scor": 32, "return_dict_in_gener": 32, "synced_gpu": 32, "streamer": 32, "basestream": 32, "model_kwarg": 32, "head": [32, 50], "greedi": 32, "assist": [32, 42], "speech": [32, 41, 42, 44], "vision": 32, "tip": 32, "generationmixin": [32, 46], "strategi": 32, "generation_strategi": 32, "sequence_length": 32, "prompt": [32, 62], "acceler": 32, "achiev": [32, 37, 52, 57], "forecast": 32, "candid": [32, 34, 51], "much": [32, 39, 41, 50], "faster": [32, 33, 34, 39, 50, 51, 59], "re": [32, 37, 59], "logitsprocessor": 32, "modifi": [32, 37, 39, 53, 55], "score": [32, 35, 40, 42, 51], "logitswarp": 32, "warp": 32, "multinomi": 32, "stoppingcriteria": 32, "tell": 32, "loop": [32, 38, 39, 59, 62, 65], "pad": [32, 33], "union": [32, 50], "end": [32, 37, 62], "multipl": [32, 35, 36, 40, 43, 50, 51, 55], "attent": 32, "hidden": [32, 53, 62], "hidden_st": 32, "util": [32, 37, 46], "modeloutput": 32, "plain": 32, "continu": [32, 35, 50, 51], "until": [32, 35, 51, 55], "max_length": 32, "stream": 32, "put": [32, 55], "token_id": 32, "encoder_output": 32, "greedysearchdecoderonlyoutput": 32, "greedysearchencoderdecoderoutput": 32, "is_encoder_decod": 32, "autotoken": 32, "automodelforcausallm": 32, "minlengthlogitsprocessor": 32, "maxlengthcriteria": 32, "from_pretrain": 32, "gpt2": 32, "distilgpt2": 32, "becaus": [32, 35, 40, 51, 61, 64], "generation_config": 32, "input_prompt": 32, "return_tensor": 32, "pt": 32, "batch_decod": 32, "skip_special_token": 32, "base_model": 32, "bodi": 32, "base_model_prefix": 32, "bert": [32, 35, 42, 46, 51], "beam_sampl": 32, "beam_scor": 32, "beamscor": 32, "beamsampleencoderdecoderoutput": 32, "beamsampledecoderonlyoutput": 32, "beam": [32, 35, 51], "search": [32, 41, 42], "hypothes": 32, "deprec": [32, 37, 50], "length": [32, 37, 47, 51, 61, 62, 63], "automodelforseq2seqlm": 32, "topklogitswarp": 32, "temperaturelogitswarp": 32, "beamsearchscor": 32, "t5": 32, "encoder_input_str": 32, "german": 32, "encoder_input_id": 32, "num_beam": 32, "decoder_start_token_id": 32, "get_encod": 32, "repeat_interleav": 32, "return_dict": 32, "scorer": 32, "wie": 32, "alt": 32, "bist": 32, "du": 32, "beam_search": 32, "beamsearchencoderdecoderoutput": 32, "beamsearchdecoderonlyoutput": 32, "bfloat16": [32, 37], "cast": [32, 37], "buffer": [32, 37], "datatyp": [32, 37, 50], "yield": [32, 35, 37, 51], "member": [32, 37], "xdoctest": [32, 37], "skip": [32, 37], "undefin": [32, 37], "buf": [32, 37], "20l": [32, 37], "1l": [32, 37], "5l": [32, 37], "call_super_init": [32, 37], "can_gener": 32, "compute_transition_scor": 32, "beam_indic": 32, "normalize_logit": 32, "indic": [32, 33, 34, 37, 41, 51, 52, 55, 58], "conveni": [32, 47, 52, 53], "quicki": 32, "second": [32, 35, 38, 57], "either": [32, 35, 37, 41, 51, 55, 56, 62], "shorter": 32, "finish": 32, "log": [32, 35, 37, 40, 45, 51, 53], "softmax": 32, "previous": [32, 50, 67], "max_new_token": 32, "element": [32, 37, 41, 51, 56, 57, 58], "vocab_s": 32, "num_return_sequ": 32, "legaci": 32, "gpt2token": 32, "todai": 32, "transition_scor": 32, "input_length": 32, "gpt": [32, 42], "famili": 32, "bart": 32, "generated_token": 32, "tok": 32, "5d": 32, "3f": 32, "262": 32, "414": 32, "1110": 32, "609": 32, "618": 32, "010": 32, "356": 32, "859": 32, "58": 32, "460": 32, "508": 32, "reconstruct": 32, "penalti": 32, "recomput": 32, "output_length": 32, "length_penalti": 32, "reconstructed_scor": 32, "allclos": 32, "sequences_scor": 32, "config_class": 32, "alia": [32, 37], "constrained_beam_search": 32, "constrained_beam_scor": 32, "constrainedbeamsearchscor": 32, "constrain": 32, "constraint": 32, "phrasalconstraint": 32, "constraint_str": 32, "sie": 32, "constraint_token_id": 32, "eo": 32, "sind": 32, "contrastive_search": 32, "top_k": 32, "penalty_alpha": 32, "contrastivesearchencoderdecoderoutput": 32, "contrastivesearchdecoderonlyoutput": 32, "contrast": [32, 40, 55, 64], "rank": 32, "degener": 32, "facebook": 32, "opt": 32, "125m": 32, "deepmind": 32, "64": 32, "focus": [32, 42], "commerci": 32, "artifici": 32, "intellig": [32, 42], "mission": 32, "world": [32, 40, 42], "nin": 32, "benefit": 32, "deep": [32, 41, 42, 67], "busi": 32, "cpu": [32, 35, 37, 51], "move": [32, 37], "static": [32, 35, 37, 51], "create_extended_attention_mask_for_decod": 32, "input_shap": 32, "attention_mask": 32, "cuda": [32, 37, 51], "gpu": [32, 35, 37, 39, 51], "copi": [32, 33, 37, 51], "disable_input_require_grad": 32, "_require_grads_hook": 32, "dummy_input": 32, "dummi": 32, "dump_patch": [32, 37], "enable_input_require_grad": 32, "embed": [32, 42, 67], "fine": 32, "tune": [32, 43], "estimate_token": 32, "input_dict": 32, "helper": [32, 34, 50, 51], "affect": [32, 35, 37, 39, 50, 51], "dropout": [32, 37], "batchnorm": [32, 37], "etc": [32, 37, 53], "equival": [32, 37, 57, 61], "local": [32, 35, 37, 39, 47, 50, 51, 55], "disabl": [32, 37, 63], "comparison": [32, 37, 67], "similar": [32, 37, 41, 43, 55, 65, 67], "confus": [32, 37], "extra_repr": [32, 37], "floating_point_op": 32, "exclude_embed": 32, "approxim": [32, 37, 50, 51, 61, 62, 65, 67], "neglect": 32, "quadrat": 32, "d_model": 32, "laid": 32, "2001": 32, "08361": 32, "overridden": 32, "albert": 32, "token_type_id": 32, "position_id": 32, "head_mask": 32, "inputs_emb": 32, "tag_label": 32, "span_label": 32, "word_mask": 32, "booltensor": 32, "chartclassifieroutput": 32, "although": [32, 47], "recip": 32, "afterward": 32, "former": 32, "care": [32, 43], "regist": [32, 37], "latter": [32, 37], "silent": 32, "identifi": [32, 40, 41, 42, 43], "pretrained_model_name_or_path": 32, "pathlik": [32, 35, 37, 51], "model_arg": 32, "pretrain": 32, "deactiv": 32, "xxx": 32, "come": [32, 34, 41, 47, 51, 58, 59], "those": [32, 34, 51], "downstream": 32, "yyi": 32, "therefor": [32, 52, 56], "host": [32, 37], "repo": 32, "huggingfac": 32, "co": 32, "locat": [32, 35, 37, 42, 51], "uncas": 32, "namespac": [32, 50], "dbmdz": 32, "save_pretrain": 32, "my_model_directori": 32, "url": [32, 35, 50, 51], "tensorflow": [32, 44, 50], "tf_model": 32, "ckpt": 32, "from_tf": 32, "slower": [32, 39], "flax": 32, "msgpack": 32, "flax_model": 32, "from_flax": 32, "dictionari": [32, 35, 37, 41, 51, 55, 56, 61, 63], "resp": 32, "pretrainedconfig": 32, "reload": 32, "suppli": [32, 35, 51], "though": [32, 39], "simpler": [32, 40, 55], "cache_dir": [32, 35, 51], "cach": [32, 35, 51], "ignore_mismatched_s": 32, "force_download": [32, 35, 51], "forc": [32, 35, 51], "overrid": [32, 37, 50, 51], "resume_download": 32, "delet": [32, 37, 51], "incomplet": 32, "receiv": [32, 37], "Will": 32, "resum": 32, "proxi": 32, "endpoint": 32, "foo": 32, "bar": [32, 33, 35, 50, 51], "3128": 32, "hostnam": 32, "4012": 32, "request": 32, "output_loading_info": 32, "ot": 32, "unexpect": [32, 37], "messag": [32, 35, 50, 51], "local_files_onli": 32, "use_auth_token": 32, "bearer": 32, "remot": 32, "cli": [32, 50], "login": [32, 39], "revis": 32, "branch": 32, "git": 32, "artifact": 32, "pull": 32, "made": [32, 37, 47, 50, 60], "hub": [32, 46], "ref": 32, "pr": 32, "pr_number": 32, "mirror": 32, "china": 32, "resolv": [32, 37, 54], "timeli": 32, "safeti": [32, 35, 50, 51], "site": 32, "_fast_init": 32, "fast": [32, 47, 67], "One": [32, 39, 40, 41, 43, 67], "ensur": [32, 37, 42, 43, 55, 56, 60, 61], "compat": [32, 33, 37, 39, 47, 50, 62], "__version__": 32, "major": 32, "11471": 32, "infer": [32, 35, 51], "low_cpu_mem_usag": 32, "tri": [32, 37, 67], "1x": 32, "peak": 32, "moment": 32, "torch_dtyp": 32, "float16": [32, 37], "fp32": 32, "precis": [32, 40, 42], "card": 32, "insert": 32, "device_map": 32, "doesn": 32, "refin": 32, "sent": [32, 62], "ordin": 32, "alloc": [32, 39], "whole": [32, 35, 37, 51], "hf": 32, "en": [32, 35, 51], "usage_guid": 32, "big_model": 32, "max_memori": 32, "ram": 32, "unset": 32, "offload_fold": 32, "disk": 32, "offload": 32, "offload_state_dict": 32, "hard": [32, 52], "drive": 32, "biggest": 32, "shard": 32, "load_in_8bit": 32, "8bit": 32, "quantiz": 32, "bitsandbyt": 32, "pypi": [32, 50], "cudaxxx": 32, "116": 32, "quantization_config": 32, "subfold": 32, "relev": [32, 40, 42], "variant": [32, 35, 37, 51], "pytorch_model": [32, 46], "bin": 32, "updat": [32, 37, 38, 50, 51, 53, 65], "behav": [32, 57], "said": 32, "offlin": 32, "firewal": 32, "bertconfig": 32, "bertmodel": 32, "saved_model": 32, "runnabl": 32, "tf": 32, "from_json_fil": 32, "my_tf_model_config": 32, "my_tf_checkpoint": 32, "drop": 32, "switch": 32, "2nd": 32, "deepspe": 32, "generationconfig": 32, "prefix_allowed_tokens_fn": 32, "sampleencoderdecoderoutput": 32, "sampledecoderonlyoutput": 32, "vari": [32, 42, 52], "modal": 32, "bos_token_id": 32, "input_valu": 32, "input_featur": 32, "pixel_valu": 32, "parametr": 32, "unspecifi": 32, "inherit": [32, 61, 62, 64], "complement": 32, "built": [32, 57], "thrown": [32, 37], "intend": 32, "criteria": 32, "batch_id": 32, "inputs_id": 32, "prefix": [32, 37, 41], "autoregress": 32, "entiti": [32, 42], "retriev": [32, 39, 42], "ab": 32, "00904": 32, "unless": [32, 37], "hang": 32, "generate_config": 32, "decoder_": 32, "get_buff": [32, 37], "throw": [32, 37], "get_submodul": [32, 37], "explan": [32, 37, 67], "correctli": [32, 37, 40, 51], "qualifi": [32, 37], "referenc": [32, 37], "attributeerror": [32, 37], "invalid": [32, 35, 37, 51], "get_extended_attention_mask": 32, "broadcast": 32, "causal": 32, "mask": [32, 50], "attend": 32, "get_extra_st": [32, 37], "set_extra_st": [32, 37], "picklabl": [32, 37], "serial": [32, 37], "get_head_mask": 32, "num_hidden_lay": 32, "is_attention_chunk": 32, "num_head": 32, "chunk": [32, 41], "seq_length": 32, "get_input_embed": 32, "get_memory_footprint": 32, "return_buff": 32, "footprint": 32, "byte": 32, "benchmark": [32, 56, 67], "solut": [32, 67], "56822": 32, "std": 32, "norm": [32, 50, 61], "120266": 32, "get_output_embed": 32, "get_paramet": [32, 37], "get_position_embed": 32, "sai": [32, 37], "net_b": [32, 37], "net_c": [32, 37], "conv": [32, 37], "conv2d": [32, 37], "kernel_s": [32, 37], "stride": [32, 37], "nest": [32, 37, 55, 57], "itself": [32, 37, 44, 57], "runtim": [32, 37], "bound": [32, 37, 51], "degre": [32, 37, 60, 66], "queri": [32, 35, 37, 42, 47, 50, 51], "against": [32, 34, 37, 51], "named_modul": [32, 37], "gradient_checkpointing_dis": 32, "gradient_checkpointing_en": 32, "greedy_search": 32, "group_beam_search": 32, "divers": 32, "hammingdiversitylogitsprocessor": 32, "num_beam_group": 32, "prune": 32, "mayb": 32, "_init_weight": 32, "invert_attention_mask": 32, "encoder_attention_mask": 32, "invert": 32, "ipu": [32, 37], "is_gradient_checkpoint": 32, "is_paralleliz": 32, "descend": [32, 37], "persist": [32, 37], "strictli": [32, 33, 37, 47, 50, 51, 57], "enforc": [32, 37, 50, 57], "namedtupl": [32, 37], "missing_kei": [32, 37], "unexpected_kei": [32, 37], "runtimeerror": [32, 37], "load_tf_weight": 32, "tf_checkpoint_path": 32, "main_input_nam": 32, "duplic": [32, 37], "idx": [32, 37], "named_buff": [32, 37], "remove_dupl": [32, 37], "prepend": [32, 37], "running_var": [32, 37], "named_children": [32, 37], "conv4": [32, 37], "conv5": [32, 37], "memo": [32, 37], "named_paramet": [32, 37], "num_paramet": 32, "only_train": 32, "post_init": 32, "prepare_inputs_for_gener": 32, "prune_head": 32, "heads_to_prun": 32, "push_to_hub": 32, "repo_id": 32, "use_temp_dir": 32, "commit_messag": 32, "max_shard_s": 32, "10gb": 32, "create_pr": 32, "safe_seri": 32, "deprecated_kwarg": 32, "upload": [32, 48], "synchron": 32, "clone": 32, "repo_path_or_nam": 32, "push": 32, "temporari": 32, "repo_url": 32, "lower": [32, 38, 40, 48], "digit": 32, "5mb": 32, "safetensor": 32, "safer": 32, "automodel": 32, "finetun": [32, 37], "register_backward_hook": [32, 37], "removablehandl": [32, 37], "favor": [32, 37], "register_full_backward_hook": [32, 37], "register_buff": [32, 37], "running_mean": [32, 37], "alongsid": [32, 37], "num_featur": [32, 37], "register_for_auto_class": 32, "auto_class": 32, "api": [32, 42, 46, 47, 48, 50, 56, 62], "slight": 32, "register_forward_hook": [32, 37], "with_kwarg": [32, 37], "won": [32, 37], "inplac": [32, 37], "possibli": [32, 37], "fire": [32, 37], "register_module_forward_hook": [32, 37], "register_forward_pre_hook": [32, 37], "invok": [32, 37, 61], "wrap": [32, 37, 50], "And": [32, 37], "forward_pr": [32, 37], "register_module_forward_pre_hook": [32, 37], "grad_input": [32, 37], "grad_output": [32, 37], "technic": [32, 37], "similarli": [32, 37, 50, 57, 60, 67], "caller": [32, 37], "register_module_full_backward_hook": [32, 37], "register_full_backward_pre_hook": [32, 37], "backward_pr": [32, 37], "register_module_full_backward_pre_hook": [32, 37], "register_load_state_dict_post_hook": [32, 37], "incompatible_kei": [32, 37], "register_modul": [32, 37], "register_paramet": [32, 37], "register_state_dict_pre_hook": [32, 37], "These": [32, 37, 40, 41, 42, 55, 57, 59], "keep_var": [32, 37], "requires_grad_": [32, 37], "freez": [32, 37], "individu": [32, 37, 41, 55, 56, 64], "gan": [32, 37], "modeling_util": [32, 46], "moduleutilsmixin": [32, 46], "resize_position_embed": 32, "new_num_position_embed": 32, "resize_token_embed": 32, "new_num_token": 32, "resiz": 32, "tie_weight": 32, "newli": 32, "just": [32, 35, 37, 39, 50, 51, 55, 56, 57, 65], "pointer": 32, "anyth": 32, "retrieve_modules_from_nam": 32, "add_prefix": 32, "remove_prefix": 32, "reverse_bettertransform": 32, "revert": 32, "to_bettertransform": 32, "beauti": 32, "everyth": 32, "celebr": 32, "save_directori": 32, "is_main_process": 32, "save_funct": 32, "tpu": 32, "race": 32, "precaut": 32, "recov": 32, "parallel": [32, 63], "hug": 32, "face": 32, "bigger": 32, "tradit": [32, 42, 57], "pushtohubmixin": [32, 46], "set_input_embed": 32, "share_memori": [32, 37], "share_memory_": [32, 37], "destin": [32, 37], "averag": [32, 37, 53, 65], "shallow": [32, 37], "ordereddict": [32, 37], "supports_gradient_checkpoint": 32, "tie": 32, "torchscript": 32, "non_block": [32, 37], "memory_format": [32, 37], "channels_last": [32, 37], "Its": [32, 37], "unchang": [32, 37], "asynchron": [32, 37], "pin": [32, 37, 50], "desir": [32, 37, 57], "4d": [32, 37], "ignore_w": [32, 37], "determinist": [32, 37, 67], "1913": [32, 37], "3420": [32, 37], "5113": [32, 37], "2325": [32, 37], "float64": [32, 37], "env": [32, 37], "torch_doctest_cuda1": [32, 37], "gpu1": [32, 37], "1914": [32, 37], "5112": [32, 37], "2324": [32, 37], "cdoubl": [32, 37], "3741": [32, 37], "2382": [32, 37], "5593": [32, 37], "4443": [32, 37], "complex128": [32, 37], "6122": [32, 37], "1150": [32, 37], "stabl": 32, "multiheadattent": 32, "optimum": 32, "bettertransform": 32, "fastpath": 32, "speed": [32, 37, 39, 50, 51, 65, 67], "kernel": 32, "fusion": 32, "blog": 32, "medium": 32, "3fbe27d50ab2": 32, "to_empti": [32, 37], "storag": [32, 37], "dst_type": [32, 37], "xpu": [32, 37], "set_to_non": [32, 37], "dir": 32, "x00": 32, "type_raising_dep_var": 32, "constitu": [32, 41], "bwd": 32, "fwd": 32, "slash": [32, 35, 51], "var_map": 32, "relabel": 32, "slot": 32, "chartpars": [32, 46], "eisner_normal_form": [32, 35, 51], "max_parse_tre": [32, 35, 51], "beam_siz": [32, 35, 51], "input_tag_score_weight": [32, 35, 51], "missing_cat_scor": [32, 35, 51], "missing_span_scor": [32, 35, 51], "parseresult": 32, "calc_score_binari": 32, "parsetre": [32, 46], "span_scor": 32, "calc_score_unari": 32, "filter_root": 32, "get_span_scor": 32, "cat_id": 32, "span": [32, 35, 51], "set_root_cat": 32, "binary_rul": 32, "type_changing_rul": 32, "type_raising_rul": 32, "dataclass": 32, "npnp": 32, "integ": [32, 37, 51], "denot": [32, 52], "boolean": 32, "dcl": [32, 35, 51], "strpatht": [32, 35, 37, 51], "unfilled_dep": 32, "filled_dep": 32, "bwd_comp": 32, "coordinated_or_type_rais": 32, "fwd_comp": 32, "is_leaf": 32, "input_supertag": 32, "tagger": [32, 35, 46, 51], "pretrainedtokenizerfast": 32, "tag_top_k": [32, 35, 51], "tag_prob_threshold": [32, 35, 51], "tag_prob_threshold_strategi": [32, 35, 51], "span_top_k": [32, 35, 51], "span_prob_threshold": [32, 35, 51], "span_prob_threshold_strategi": [32, 35, 51], "taggeroutput": 32, "taggeroutputsent": 32, "prepare_input": 32, "textdiagramprint": [33, 46, 51], "word_spac": [33, 35, 51], "discopy_typ": [33, 51], "compress_lay": [33, 51], "use_ascii": [33, 35, 51], "printer": [33, 51], "ascii_char_set": 33, "bottom_l_corn": 33, "bottom_r_corn": 33, "dot": 33, "top_l_corn": 33, "xa0": 33, "top_r_corn": 33, "unicode_char_set": 33, "initialis": [33, 34, 35, 37, 38, 39, 45, 50, 51, 53, 56, 64, 67], "graphic": [33, 35, 51, 57], "preced": [33, 51], "draw_lay": 33, "text_print": [33, 46], "_morphism": 33, "start_wire_idx": [33, 51], "end_wire_idx": [33, 51], "axiomerror": [33, 51], "triangl": 33, "textpad": 33, "draw_type_label": 33, "ratio": [33, 40], "margin": 33, "fontsize_typ": 33, "pretty_typ": 33, "superscript": 33, "triangular": 33, "whenev": [33, 67], "less": [33, 41, 43, 51, 62], "direction": [33, 51], "sens": [33, 40, 51, 52, 57], "elimin": [33, 50, 51, 59], "scan": [33, 51], "am": [33, 41, 51], "pattern": [33, 41, 43, 51, 55], "sleep": [33, 51], "rewritten": [34, 35, 51], "omit": [34, 51], "uncurri": [34, 51], "exchang": [34, 51], "fewer": [34, 51], "case_sensit": [34, 51], "permit": [34, 51], "compar": [34, 37, 40, 43, 50, 51, 52, 55, 57, 59, 67], "henc": [34, 51, 63], "with_traceback": 35, "tb": 35, "__traceback__": 35, "model_name_or_path": [35, 51], "xdg_cache_hom": [35, 51], "pipeline_config": [35, 51], "multipli": [35, 51, 64], "threshold": [35, 41, 51], "absolut": [35, 51], "highest": [35, 38, 51], "chart": [35, 51], "eisner": [35, 51], "limit": [35, 39, 41, 51, 67], "fail": [35, 50, 51], "cell": [35, 50, 51, 60, 62], "kept": [35, 51], "sentencetyp": [35, 51], "planar": [35, 51], "failur": [35, 51], "sentencebatchtyp": [35, 51], "report": [35, 51], "_ccgatomictypemeta": [35, 51], "biclos": [35, 50, 51, 55, 60], "conj": [35, 50, 51], "punc": [35, 50, 51], "section_id": [35, 51], "outlin": [35, 51], "enum": [35, 46, 51], "ba": [35, 51, 60], "bc": [35, 51], "btr": [35, 51], "fa": [35, 51, 60], "fc": [35, 51], "fx": [35, 51], "ftr": [35, 51], "gbc": [35, 51], "gbx": [35, 51], "gfc": [35, 51], "gfx": [35, 51], "lp": [35, 51], "rp": [35, 51], "unk": [35, 41, 51], "admit": [35, 51], "incorrectli": [35, 50, 51], "biclosed_typ": [35, 51], "subtre": [35, 51], "leaf": [35, 51], "node": [35, 51], "empti": [35, 37, 50, 51], "use_slash": [35, 51], "minimum": [35, 50, 51], "_jsondictt": [35, 51], "trivial": [35, 51, 58], "happen": [35, 51], "lang": [35, 51], "use_model_unary_rul": [35, 51], "janom": [35, 51], "ja": [35, 51], "elmo": [35, 51], "rebank": [35, 51], "elmo_rebank": [35, 51], "candc": [35, 51], "jigg": [35, 51], "wq": [35, 51], "qem": [35, 51], "nc": [35, 51], "mod": [35, 51], "nm": [35, 51], "fin": [35, 51], "attr": [35, 51], "cont": [35, 51], "da": [35, 51], "hyp": [35, 51], "imp": [35, 51], "stem": [35, 41, 42, 51, 52], "track": [35, 47, 51], "unsupport": [35, 38, 51], "combining_diagram": [35, 51], "word_typ": [35, 51], "start_box": [35, 51], "linearli": [35, 51], "sentinel": [35, 51], "bobcat_pars": [35, 46, 51], "accord": [35, 51, 52, 53, 60], "unibox": [35, 51, 60], "layer_1": [35, 51], "oserror": [35, 51], "characters_written": 35, "errno": 35, "posix": 35, "filename2": 35, "strerror": 35, "wrapper": [35, 47, 51], "servic": [35, 50, 51, 67], "urlerror": [35, 51], "blank": [35, 51], "linear_read": [35, 46], "spidersread": 35, "word_sequence_read": [35, 46], "bag_of_words_read": [35, 46], "untokenis": [36, 51], "spars": [37, 51], "epsilon": [37, 51], "09": [37, 51], "y_pred": [37, 51], "jnp": [37, 51], "y_true": [37, 51], "ground": [37, 51], "truth": [37, 51], "hot": [37, 51], "smooth": [37, 51], "constant": [37, 51, 63], "content": [37, 51], "filenotfounderror": [37, 51], "multiclass": [37, 51], "n_class": [37, 51], "ce": [37, 51], "data1": [37, 51], "again": [37, 51, 59, 60, 62], "full": [37, 43, 47, 51], "moduletyp": [37, 51], "numer": [37, 42, 50, 51], "squar": [37, 51, 56, 62], "mse": [37, 51], "kwd": [37, 51], "checkpoint_path": [37, 51], "my_checkpoint": [37, 51], "datapoint": [37, 51], "hyperparam": [37, 51], "loss_fn": [37, 51], "arraylik": [37, 51], "hyperparamet": [37, 43, 51, 61, 62, 63], "diff_method": [37, 51], "analyt": [37, 51], "noise_model": [37, 39, 51], "parameterlist": [37, 51], "optimizer_arg": [37, 51], "evalfunct": [37, 51], "log_dir": [37, 51], "rate": [37, 51, 63], "func": [37, 51], "tensorboard": [37, 51], "visualis": [37, 51, 61, 62, 63], "current_datetime_hostnam": [37, 51], "interv": [37, 51, 61], "histori": [37, 51], "save_dict": [37, 51], "get_model_output": [37, 51], "spsa": [37, 51, 53, 63, 65], "spproxim": [37, 51], "ieeexplor": [37, 51], "705889": [37, 51], "shift": [37, 39, 51, 63], "stabil": [37, 51, 63], "num": [37, 51], "snapshot": [37, 51], "keyerror": [37, 51], "sympysymbol": [37, 51], "recommend": [38, 39, 42, 47, 61, 67], "flexibl": [38, 55, 59], "ml": [38, 43, 48, 50, 67], "randomli": [38, 64], "substitut": 38, "explicitli": [38, 55], "densiti": [39, 50], "opt_einsum": 39, "advantag": [39, 59, 60], "magnitud": 39, "instruct": 39, "With": [39, 42, 50], "probabilti": 39, "real": [39, 40, 42, 53, 67], "backpropag": 39, "realist": 39, "noiseless": [39, 67], "aer": 39, "my_noise_model": 39, "noisemodel": 39, "cloud": [39, 67], "emul": 39, "ibmq_qasm_simul": 39, "2e": 39, "ibmq_hardware_devic": 39, "treat": [39, 55], "splite": 39, "pregroup_diagram": 39, "feed": 39, "comprehens": [39, 44], "quantinuumbackend": 39, "device_nam": [39, 67], "2048": 39, "fundament": 40, "textual": 40, "plai": 40, "vital": 40, "role": [40, 41], "sentiment": [40, 41, 42], "spam": 40, "detect": [40, 56], "identif": 40, "among": [40, 56], "analys": [40, 41, 53, 67], "insight": [40, 42], "autom": 40, "consum": [40, 55], "imposs": [40, 58], "goal": [40, 42, 61, 63, 65], "On": [40, 41], "anim": 40, "dog": [40, 41], "bird": 40, "divid": 40, "subcategori": 40, "scenario": [40, 41, 47, 53, 67], "belong": 40, "y_i": 40, "frac": 40, "sum_": 40, "x_i": 40, "recal": [40, 42, 60], "strength": [40, 43, 67], "weak": [40, 43], "balanc": 40, "roughli": 40, "overal": [40, 43, 55, 60, 62], "proport": 40, "filter": [40, 53], "legal": 40, "known": [40, 43, 47, 54, 57], "medic": 40, "diagnosi": 40, "fraud": 40, "compet": 40, "decreas": 40, "vice": [40, 57], "versa": [40, 57], "address": [40, 47, 58, 59, 62, 67], "f1": [40, 42], "harmon": 40, "tradeoff": 40, "heavili": 41, "driven": 41, "wrongli": 41, "interchang": 41, "unlabel": 41, "unstructur": 41, "newspap": 41, "websit": [41, 44], "british": 41, "nation": 41, "bnc": 41, "million": 41, "spoken": [41, 42], "wide": [41, 42, 44, 47, 53, 57, 67], "techniqu": [41, 42, 43, 65], "easili": 41, "understood": 41, "uniqu": [41, 56, 60], "programm": [41, 61, 65], "lemmat": [41, 42], "lemma": 41, "ran": 41, "inflect": 41, "carri": 41, "po": 41, "meaning": 41, "john_n": 41, "gave_vb": 41, "mary_n": 41, "a_det": 41, "flower_n": 41, "advent": 41, "redund": [41, 48], "deal": [41, 42, 56, 57, 63], "easier": [41, 42, 46, 50], "quick": 41, "brown": 41, "fox": 41, "jump": 41, "lazi": 41, "clearli": [41, 59], "paragraph": 41, "flight": 41, "pari": 41, "piec": 41, "morphem": 41, "smallest": 41, "themselv": 41, "suffix": 41, "unbeliev": 41, "believ": 41, "amaz": 41, "un": 41, "abl": [41, 42, 62], "ing": 41, "subword": 41, "challeng": [41, 44], "oov": 41, "unseen": [41, 42, 43], "settl": 41, "er": 41, "meet": 41, "briefli": 42, "explor": 42, "interact": [42, 47, 48, 50, 52], "recognit": 42, "broader": [42, 44], "encompass": 42, "principl": 42, "analyz": 42, "concern": 42, "conceptu": 42, "closer": 42, "mere": 42, "teach": 42, "signific": [42, 62, 66], "toward": 42, "fact": [42, 52, 55, 60, 64, 67], "famou": 42, "ture": 42, "exhibit": 42, "indistinguish": 42, "scope": [42, 44], "simpli": [42, 55], "seek": 42, "holist": 42, "captur": 42, "nuanc": 42, "across": 42, "industri": 42, "promin": 42, "chatbot": 42, "virtual": 42, "accordingli": 42, "social": 42, "media": 42, "feedback": 42, "gain": 42, "transcrib": 42, "voic": 42, "summar": 42, "scrape": 42, "qualiti": 42, "preprocess": [42, 44, 50, 60], "stopword": 42, "logist": 42, "regress": 42, "held": 42, "focu": 42, "chatgpt": 42, "crucial": [43, 60], "largest": 43, "portion": 43, "never": [43, 62], "partit": 43, "fold": [43, 56], "potenti": [43, 63], "stratifi": 43, "imbalanc": 43, "leav": 43, "computation": [43, 63], "collabor": 43, "vast": 44, "broad": [44, 67], "quit": 44, "beginn": 44, "few": [44, 65], "interest": 44, "apart": [44, 55], "nltk": 44, "great": 44, "jurafski": 44, "martin": 44, "textbook": 44, "cover": [44, 48, 50, 53, 59, 67], "supplementari": 44, "lectur": 44, "slide": 44, "exercis": 44, "deepen": 44, "stanford": 44, "encyclopedia": 44, "philosophi": 44, "area": 44, "coursera": 44, "video": 44, "group": [44, 52], "wealth": 44, "adverb": [45, 59], "lexicon": 46, "modeling_bert": 46, "ccg_type": 46, "ccgbank_pars": 46, "ccg_rule": 46, "ccg_tree": 46, "depccg_pars": 46, "tree_read": [46, 60], "web_pars": 46, "spacy_tokenis": 46, "greatli": [46, 48, 50, 57, 67], "numpy_model": 46, "quantum_model": 46, "pytorch_train": 46, "spsa_optim": 46, "tket_model": 46, "pennylane_model": 46, "quantum_train": 46, "particularli": [47, 50], "passag": 47, "closest": [47, 67], "robust": [47, 67], "arbitrari": 47, "ship": [47, 48], "encapsul": 47, "light": 47, "gold": 47, "00": 47, "footnot": 47, "masashi": 47, "catalog": 47, "ldc": 47, "upenn": 47, "edu": 47, "ldc2005t13": 47, "shown": 48, "readi": [48, 65], "onto": 48, "img": 49, "puml": 49, "plantuml": 49, "java": 49, "dplantuml_limit_s": 49, "jar": 49, "jaxlib": 50, "broken": 50, "link": [50, 54, 55, 56, 58], "parametris": 50, "pqc": 50, "101": [50, 60], "l2": [50, 61], "uniform": [50, 61], "hash": 50, "hint": 50, "trigger": [50, 54], "brittl": 50, "quot": 50, "postselect": [50, 56], "mismatch": 50, "credit": 50, "kentaroaoki": 50, "overhaul": 50, "throughout": 50, "bump": 50, "xavier_uniform": 50, "slow": [50, 67], "defer": 50, "unaryswap": 50, "unaryboxconstructor": 50, "refactor": 50, "subsect": [50, 67], "unus": 50, "special_cas": 50, "_ob": 50, "amplitud": 50, "make_checkpoint": 50, "rather": [50, 55, 57, 62], "inadvert": 50, "lint": 50, "codebas": 50, "stricter": 50, "flake8": 50, "setup": 50, "cfg": 50, "ssl": 50, "certif": [50, 54], "erron": 50, "significantli": [50, 62], "scalar": 50, "decompos": 50, "logarithm": 50, "renam": 50, "unifi": 50, "ccg2discocat": 50, "previou": [50, 55, 60], "minim": 50, "onward": 50, "conflict": 50, "customis": 50, "restor": 50, "unavail": 50, "seriou": 50, "creation": [50, 56], "termin": 50, "logo": 50, "readm": 50, "badg": 50, "top": [50, 55], "pennylanecircuit": 51, "progess": 51, "No": 51, "stderr": 51, "visual": 51, "studio": 51, "risk": 51, "assembli": 52, "extrem": [52, 58, 59], "constitut": 52, "eman": 52, "manag": 53, "bundl": 53, "accross": 53, "routin": 53, "unsolv": 54, "workaround": 54, "encount": 54, "encourag": [54, 56], "submit": 54, "archiv": 54, "model_dir": 54, "upgrad": 54, "learnt": 55, "devis": 55, "thought": 55, "invers": 55, "concaten": [55, 62], "sound": 55, "uncontract": 55, "bottom": 55, "same_diagram": 55, "nsp": 55, "cups_and_swap": 55, "mathcal": 55, "compositon": 55, "front": 55, "fvect": 55, "mathbb": 55, "freeli": [55, 57], "unshap": 55, "reshap": 55, "delai": 55, "Such": 55, "hilbert": 55, "fhilb": 55, "pi": 55, "export": [55, 58], "consecut": [55, 60], "unpermut": 55, "chapter": 55, "coerc": 55, "find": 56, "accumul": 56, "scratch": 56, "tens": 56, "compound": [56, 57], "wise": 56, "discocirc": 56, "ldot": 57, "1_b": 57, "1_a": 57, "commut": [57, 60], "notat": 57, "1_i": 57, "upon": 57, "eleg": 57, "calculu": 57, "isomorph": 57, "consequ": 57, "unitor": 57, "coher": 57, "bent": 57, "interoper": 58, "d_n": 58, "d_": 58, "mpss": 58, "greater": [58, 62], "matric": 58, "reduct": 58, "ipynb": [58, 59, 60], "excess": 59, "prohibit": 59, "discontinu": 59, "arrang": 59, "transpar": 59, "mainli": 60, "manifest": 60, "begin": 60, "recurr": 60, "fashion": 60, "interpret": 60, "indirect": 60, "generalis": 60, "chef": [61, 65], "delici": [61, 65], "IT": [61, 65], "130": [61, 65], "operatornam": 61, "flow_cod": 61, "decai": [61, 63], "tensoris": 61, "overwrit": 61, "procedur": 61, "explain": [61, 66], "toi": 62, "qapi": 62, "enter": 62, "password": 62, "queu": 62, "remaind": 62, "hypothesis": 62, "hypothesi": 62, "seem": 62, "seper": 62, "gone": 63, "tqdm": 63, "jupyt": 63, "impair": 63, "restrict": 63, "hyperamet": 63, "approx": 63, "descent": 65, "click": 66, "zoom": 66, "unlik": 67, "inher": 67, "unreli": 67, "aggreg": 67, "uncertainti": 67, "prone": 67, "environment": 67, "tabl": 67, "concis": 67, "baselin": 67, "simplest": 67, "rough": 67, "faith": 67, "ibmqemulatorbackend": 67, "ibmq_washington": 67, "credenti": 67, "quantinuum_account_email": 67, "assess": 67, "thing": 67, "ultim": 67, "plan": 67, "paid": 67, "subscript": 67, "summaris": 67, "technologi": 67, "alpin": 67, "trap": 67, "ion": 67, "amazon": 67, "braket": 67, "anneal": 67, "superconduct": 67, "photon": 67, "googl": 67, "ionq": 67, "iqm": 67, "microsoft": 67, "azur": 67, "neutral": 67, "rigetti": 67, "enhanc": 67, "effortless": 67, "rich": 67, "almost": 67, "smoothli": 67}, "objects": {"": [[51, 0, 0, "-", "lambeq"]], "lambeq": [[51, 1, 1, "", "AtomicType"], [51, 1, 1, "", "BaseAnsatz"], [51, 1, 1, "", "BinaryCrossEntropyLoss"], [51, 4, 1, "", "BobcatParseError"], [51, 1, 1, "", "BobcatParser"], [51, 1, 1, "", "CCGAtomicType"], [51, 4, 1, "", "CCGBankParseError"], [51, 1, 1, "", "CCGBankParser"], [51, 1, 1, "", "CCGParser"], [51, 1, 1, "", "CCGRule"], [51, 4, 1, "", "CCGRuleUseError"], [51, 1, 1, "", "CCGTree"], [51, 1, 1, "", "Checkpoint"], [51, 1, 1, "", "CircuitAnsatz"], [51, 1, 1, "", "CoordinationRewriteRule"], [51, 1, 1, "", "CrossEntropyLoss"], [51, 1, 1, "", "CurryRewriteRule"], [51, 1, 1, "", "Dataset"], [51, 4, 1, "", "DepCCGParseError"], [51, 1, 1, "", "DepCCGParser"], [51, 1, 1, "", "IQPAnsatz"], [51, 1, 1, "", "LinearReader"], [51, 1, 1, "", "LossFunction"], [51, 1, 1, "", "MPSAnsatz"], [51, 1, 1, "", "MSELoss"], [51, 1, 1, "", "Model"], [51, 1, 1, "", "NumpyModel"], [51, 1, 1, "", "Optimizer"], [51, 1, 1, "", "PennyLaneModel"], [51, 1, 1, "", "PytorchModel"], [51, 1, 1, "", "PytorchTrainer"], [51, 1, 1, "", "QuantumModel"], [51, 1, 1, "", "QuantumTrainer"], [51, 1, 1, "", "Reader"], [51, 1, 1, "", "RewriteRule"], [51, 1, 1, "", "Rewriter"], [51, 1, 1, "", "SPSAOptimizer"], [51, 1, 1, "", "Sim14Ansatz"], [51, 1, 1, "", "Sim15Ansatz"], [51, 1, 1, "", "SimpleRewriteRule"], [51, 1, 1, "", "SpacyTokeniser"], [51, 1, 1, "", "SpiderAnsatz"], [51, 1, 1, "", "StronglyEntanglingAnsatz"], [51, 1, 1, "", "Symbol"], [51, 1, 1, "", "TensorAnsatz"], [51, 1, 1, "", "TketModel"], [51, 1, 1, "", "Tokeniser"], [51, 1, 1, "", "Trainer"], [51, 1, 1, "", "TreeReader"], [51, 1, 1, "", "TreeReaderMode"], [51, 1, 1, "", "VerbosityLevel"], [51, 4, 1, "", "WebParseError"], [51, 1, 1, "", "WebParser"], [31, 0, 0, "-", "ansatz"], [32, 0, 0, "-", "bobcat"], [51, 6, 1, "", "create_pregroup_diagram"], [51, 6, 1, "", "diagram2str"], [51, 6, 1, "", "is_pregroup_diagram"], [33, 0, 0, "-", "pregroups"], [51, 6, 1, "", "remove_cups"], [51, 6, 1, "", "remove_swaps"], [34, 0, 0, "-", "rewrite"], [35, 0, 0, "-", "text2diagram"], [36, 0, 0, "-", "tokeniser"], [37, 0, 0, "-", "training"]], "lambeq.AtomicType": [[51, 2, 1, "", "CONJUNCTION"], [51, 2, 1, "", "NOUN"], [51, 2, 1, "", "NOUN_PHRASE"], [51, 2, 1, "", "PREPOSITIONAL_PHRASE"], [51, 2, 1, "", "PUNCTUATION"], [51, 2, 1, "", "SENTENCE"]], "lambeq.BaseAnsatz": [[51, 3, 1, "", "__call__"], [51, 3, 1, "", "__init__"]], "lambeq.BinaryCrossEntropyLoss": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "calculate_loss"]], "lambeq.BobcatParseError": [[51, 3, 1, "", "__init__"]], "lambeq.BobcatParser": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "available_models"], [51, 3, 1, "", "sentences2trees"]], "lambeq.CCGAtomicType": [[51, 2, 1, "", "CONJUNCTION"], [51, 2, 1, "", "NOUN"], [51, 2, 1, "", "NOUN_PHRASE"], [51, 2, 1, "", "PREPOSITIONAL_PHRASE"], [51, 2, 1, "", "PUNCTUATION"], [51, 2, 1, "", "SENTENCE"]], "lambeq.CCGBankParseError": [[51, 3, 1, "", "__init__"]], "lambeq.CCGBankParser": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "section2diagrams"], [51, 3, 1, "", "section2diagrams_gen"], [51, 3, 1, "", "section2trees"], [51, 3, 1, "", "section2trees_gen"], [51, 3, 1, "", "sentences2trees"]], "lambeq.CCGParser": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "sentence2diagram"], [51, 3, 1, "", "sentence2tree"], [51, 3, 1, "", "sentences2diagrams"], [51, 3, 1, "", "sentences2trees"]], "lambeq.CCGRule": [[51, 2, 1, "", "BACKWARD_APPLICATION"], [51, 2, 1, "", "BACKWARD_COMPOSITION"], [51, 2, 1, "", "BACKWARD_CROSSED_COMPOSITION"], [51, 2, 1, "", "BACKWARD_TYPE_RAISING"], [51, 2, 1, "", "CONJUNCTION"], [51, 2, 1, "", "FORWARD_APPLICATION"], [51, 2, 1, "", "FORWARD_COMPOSITION"], [51, 2, 1, "", "FORWARD_CROSSED_COMPOSITION"], [51, 2, 1, "", "FORWARD_TYPE_RAISING"], [51, 2, 1, "", "GENERALIZED_BACKWARD_COMPOSITION"], [51, 2, 1, "", "GENERALIZED_BACKWARD_CROSSED_COMPOSITION"], [51, 2, 1, "", "GENERALIZED_FORWARD_COMPOSITION"], [51, 2, 1, "", "GENERALIZED_FORWARD_CROSSED_COMPOSITION"], [51, 2, 1, "", "LEXICAL"], [51, 2, 1, "", "REMOVE_PUNCTUATION_LEFT"], [51, 2, 1, "", "REMOVE_PUNCTUATION_RIGHT"], [51, 2, 1, "", "UNARY"], [51, 2, 1, "", "UNKNOWN"], [51, 3, 1, "", "__call__"], [51, 3, 1, "", "check_match"], [51, 3, 1, "", "infer_rule"], [51, 5, 1, "", "symbol"]], "lambeq.CCGRuleUseError": [[51, 3, 1, "", "__init__"]], "lambeq.CCGTree": [[51, 3, 1, "", "__init__"], [51, 5, 1, "", "child"], [51, 3, 1, "", "deriv"], [51, 3, 1, "", "from_json"], [51, 5, 1, "", "left"], [51, 5, 1, "", "right"], [51, 5, 1, "", "text"], [51, 3, 1, "", "to_biclosed_diagram"], [51, 3, 1, "", "to_diagram"], [51, 3, 1, "", "to_json"], [51, 3, 1, "", "without_trivial_unary_rules"]], "lambeq.Checkpoint": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "add_many"], [51, 3, 1, "", "from_file"], [51, 3, 1, "", "to_file"]], "lambeq.CircuitAnsatz": [[51, 3, 1, "", "__call__"], [51, 3, 1, "", "__init__"], [51, 3, 1, "", "ob_size"], [51, 3, 1, "", "params_shape"]], "lambeq.CoordinationRewriteRule": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "matches"], [51, 3, 1, "", "rewrite"]], "lambeq.CrossEntropyLoss": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "calculate_loss"]], "lambeq.CurryRewriteRule": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "matches"], [51, 3, 1, "", "rewrite"]], "lambeq.Dataset": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "shuffle_data"]], "lambeq.DepCCGParseError": [[51, 3, 1, "", "__init__"]], "lambeq.DepCCGParser": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "sentence2diagram"], [51, 3, 1, "", "sentence2tree"], [51, 3, 1, "", "sentences2trees"]], "lambeq.IQPAnsatz": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "params_shape"]], "lambeq.LinearReader": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "sentence2diagram"]], "lambeq.LossFunction": [[51, 3, 1, "", "__call__"], [51, 3, 1, "", "__init__"], [51, 3, 1, "", "calculate_loss"]], "lambeq.MPSAnsatz": [[51, 2, 1, "", "BOND_TYPE"], [51, 3, 1, "", "__call__"], [51, 3, 1, "", "__init__"]], "lambeq.MSELoss": [[51, 3, 1, "", "calculate_loss"]], "lambeq.Model": [[51, 3, 1, "", "__call__"], [51, 3, 1, "", "__init__"], [51, 3, 1, "", "forward"], [51, 3, 1, "", "from_checkpoint"], [51, 3, 1, "", "from_diagrams"], [51, 3, 1, "", "get_diagram_output"], [51, 3, 1, "", "initialise_weights"], [51, 3, 1, "", "load"], [51, 3, 1, "", "save"]], "lambeq.NumpyModel": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "forward"], [51, 3, 1, "", "get_diagram_output"], [51, 2, 1, "", "lambdas"], [51, 2, 1, "", "symbols"], [51, 2, 1, "", "weights"]], "lambeq.Optimizer": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "backward"], [51, 3, 1, "", "load_state_dict"], [51, 3, 1, "", "state_dict"], [51, 3, 1, "", "step"], [51, 3, 1, "", "zero_grad"]], "lambeq.PennyLaneModel": [[51, 3, 1, "", "__init__"], [51, 2, 1, "", "circuit_map"], [51, 3, 1, "", "forward"], [51, 3, 1, "", "from_diagrams"], [51, 3, 1, "", "get_diagram_output"], [51, 3, 1, "", "initialise_weights"], [51, 2, 1, "", "symbols"], [51, 2, 1, "", "training"], [51, 2, 1, "", "weights"]], "lambeq.PytorchModel": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "forward"], [51, 3, 1, "", "get_diagram_output"], [51, 3, 1, "", "initialise_weights"], [51, 2, 1, "", "symbols"], [51, 2, 1, "", "training"], [51, 2, 1, "", "weights"]], "lambeq.PytorchTrainer": [[51, 3, 1, "", "__init__"], [51, 2, 1, "", "model"], [51, 2, 1, "", "train_costs"], [51, 2, 1, "", "train_epoch_costs"], [51, 2, 1, "", "train_results"], [51, 3, 1, "", "training_step"], [51, 2, 1, "", "val_costs"], [51, 2, 1, "", "val_results"], [51, 3, 1, "", "validation_step"]], "lambeq.QuantumModel": [[51, 3, 1, "", "__call__"], [51, 3, 1, "", "__init__"], [51, 3, 1, "", "forward"], [51, 3, 1, "", "get_diagram_output"], [51, 3, 1, "", "initialise_weights"], [51, 2, 1, "", "symbols"], [51, 2, 1, "", "weights"]], "lambeq.QuantumTrainer": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "fit"], [51, 2, 1, "", "model"], [51, 2, 1, "", "train_costs"], [51, 2, 1, "", "train_epoch_costs"], [51, 2, 1, "", "train_results"], [51, 3, 1, "", "training_step"], [51, 2, 1, "", "val_costs"], [51, 2, 1, "", "val_results"], [51, 3, 1, "", "validation_step"]], "lambeq.Reader": [[51, 3, 1, "", "sentence2diagram"], [51, 3, 1, "", "sentences2diagrams"]], "lambeq.RewriteRule": [[51, 3, 1, "", "__call__"], [51, 3, 1, "", "matches"], [51, 3, 1, "", "rewrite"]], "lambeq.Rewriter": [[51, 3, 1, "", "__call__"], [51, 3, 1, "", "__init__"], [51, 3, 1, "", "add_rules"], [51, 3, 1, "", "available_rules"]], "lambeq.SPSAOptimizer": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "backward"], [51, 3, 1, "", "load_state_dict"], [51, 2, 1, "", "model"], [51, 2, 1, "", "project"], [51, 3, 1, "", "state_dict"], [51, 3, 1, "", "step"], [51, 3, 1, "", "update_hyper_params"]], "lambeq.Sim14Ansatz": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "params_shape"]], "lambeq.Sim15Ansatz": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "params_shape"]], "lambeq.SimpleRewriteRule": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "matches"], [51, 3, 1, "", "placeholder"], [51, 3, 1, "", "rewrite"]], "lambeq.SpacyTokeniser": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "split_sentences"], [51, 3, 1, "", "tokenise_sentences"]], "lambeq.SpiderAnsatz": [[51, 3, 1, "", "__call__"], [51, 3, 1, "", "__init__"]], "lambeq.StronglyEntanglingAnsatz": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "circuit"], [51, 3, 1, "", "params_shape"]], "lambeq.Symbol": [[51, 2, 1, "", "default_assumptions"], [51, 2, 1, "", "directed_cod"], [51, 2, 1, "", "directed_dom"], [51, 2, 1, "", "name"], [51, 5, 1, "", "size"], [51, 3, 1, "", "sort_key"]], "lambeq.TensorAnsatz": [[51, 3, 1, "", "__call__"], [51, 3, 1, "", "__init__"]], "lambeq.TketModel": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "forward"], [51, 3, 1, "", "get_diagram_output"], [51, 2, 1, "", "symbols"], [51, 2, 1, "", "weights"]], "lambeq.Tokeniser": [[51, 3, 1, "", "split_sentences"], [51, 3, 1, "", "tokenise_sentence"], [51, 3, 1, "", "tokenise_sentences"]], "lambeq.Trainer": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "fit"], [51, 3, 1, "", "load_training_checkpoint"], [51, 3, 1, "", "save_checkpoint"], [51, 3, 1, "", "training_step"], [51, 3, 1, "", "validation_step"]], "lambeq.TreeReader": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "available_modes"], [51, 3, 1, "", "sentence2diagram"], [51, 3, 1, "", "tree2diagram"]], "lambeq.TreeReaderMode": [[51, 2, 1, "", "HEIGHT"], [51, 2, 1, "", "NO_TYPE"], [51, 2, 1, "", "RULE_ONLY"], [51, 2, 1, "", "RULE_TYPE"]], "lambeq.VerbosityLevel": [[51, 2, 1, "", "PROGRESS"], [51, 2, 1, "", "SUPPRESS"], [51, 2, 1, "", "TEXT"], [51, 3, 1, "", "has_value"]], "lambeq.WebParseError": [[51, 3, 1, "", "__init__"]], "lambeq.WebParser": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "sentences2trees"]], "lambeq.ansatz": [[31, 1, 1, "", "BaseAnsatz"], [31, 1, 1, "", "CircuitAnsatz"], [31, 1, 1, "", "IQPAnsatz"], [31, 1, 1, "", "MPSAnsatz"], [31, 1, 1, "", "Sim14Ansatz"], [31, 1, 1, "", "Sim15Ansatz"], [31, 1, 1, "", "SpiderAnsatz"], [31, 1, 1, "", "StronglyEntanglingAnsatz"], [31, 1, 1, "", "Symbol"], [31, 1, 1, "", "TensorAnsatz"]], "lambeq.ansatz.BaseAnsatz": [[31, 3, 1, "", "__call__"], [31, 3, 1, "", "__init__"]], "lambeq.ansatz.CircuitAnsatz": [[31, 3, 1, "", "__call__"], [31, 3, 1, "", "__init__"], [31, 3, 1, "", "ob_size"], [31, 3, 1, "", "params_shape"]], "lambeq.ansatz.IQPAnsatz": [[31, 3, 1, "", "__init__"], [31, 3, 1, "", "params_shape"]], "lambeq.ansatz.MPSAnsatz": [[31, 2, 1, "", "BOND_TYPE"], [31, 3, 1, "", "__call__"], [31, 3, 1, "", "__init__"]], "lambeq.ansatz.Sim14Ansatz": [[31, 3, 1, "", "__init__"], [31, 3, 1, "", "params_shape"]], "lambeq.ansatz.Sim15Ansatz": [[31, 3, 1, "", "__init__"], [31, 3, 1, "", "params_shape"]], "lambeq.ansatz.SpiderAnsatz": [[31, 3, 1, "", "__call__"], [31, 3, 1, "", "__init__"]], "lambeq.ansatz.StronglyEntanglingAnsatz": [[31, 3, 1, "", "__init__"], [31, 3, 1, "", "circuit"], [31, 3, 1, "", "params_shape"]], "lambeq.ansatz.Symbol": [[31, 2, 1, "", "default_assumptions"], [31, 2, 1, "", "directed_cod"], [31, 2, 1, "", "directed_dom"], [31, 2, 1, "", "name"], [31, 5, 1, "", "size"], [31, 3, 1, "", "sort_key"]], "lambeq.ansatz.TensorAnsatz": [[31, 3, 1, "", "__call__"], [31, 3, 1, "", "__init__"]], "lambeq.bobcat": [[32, 1, 1, "", "BertForChartClassification"], [32, 1, 1, "", "Category"], [32, 1, 1, "", "ChartParser"], [32, 1, 1, "", "Grammar"], [32, 1, 1, "", "ParseTree"], [32, 1, 1, "", "Sentence"], [32, 1, 1, "", "Supertag"], [32, 1, 1, "", "Tagger"]], "lambeq.bobcat.BertForChartClassification": [[32, 2, 1, "", "T_destination"], [32, 3, 1, "", "__call__"], [32, 3, 1, "", "__init__"], [32, 3, 1, "", "add_memory_hooks"], [32, 3, 1, "", "add_module"], [32, 3, 1, "", "adjust_logits_during_generation"], [32, 3, 1, "", "apply"], [32, 3, 1, "", "assisted_decoding"], [32, 5, 1, "", "base_model"], [32, 2, 1, "", "base_model_prefix"], [32, 3, 1, "", "beam_sample"], [32, 3, 1, "", "beam_search"], [32, 3, 1, "", "bfloat16"], [32, 3, 1, "", "buffers"], [32, 2, 1, "", "call_super_init"], [32, 3, 1, "", "can_generate"], [32, 3, 1, "", "children"], [32, 3, 1, "", "compute_transition_scores"], [32, 2, 1, "", "config_class"], [32, 3, 1, "", "constrained_beam_search"], [32, 3, 1, "", "contrastive_search"], [32, 3, 1, "", "cpu"], [32, 3, 1, "", "create_extended_attention_mask_for_decoder"], [32, 3, 1, "", "cuda"], [32, 5, 1, "", "device"], [32, 3, 1, "", "disable_input_require_grads"], [32, 3, 1, "", "double"], [32, 5, 1, "", "dtype"], [32, 5, 1, "", "dummy_inputs"], [32, 2, 1, "", "dump_patches"], [32, 3, 1, "", "enable_input_require_grads"], [32, 3, 1, "", "estimate_tokens"], [32, 3, 1, "", "eval"], [32, 3, 1, "", "extra_repr"], [32, 3, 1, "", "float"], [32, 3, 1, "", "floating_point_ops"], [32, 3, 1, "", "forward"], [32, 5, 1, "", "framework"], [32, 3, 1, "", "from_pretrained"], [32, 3, 1, "", "generate"], [32, 3, 1, "", "get_buffer"], [32, 3, 1, "", "get_extended_attention_mask"], [32, 3, 1, "", "get_extra_state"], [32, 3, 1, "", "get_head_mask"], [32, 3, 1, "", "get_input_embeddings"], [32, 3, 1, "", "get_memory_footprint"], [32, 3, 1, "", "get_output_embeddings"], [32, 3, 1, "", "get_parameter"], [32, 3, 1, "", "get_position_embeddings"], [32, 3, 1, "", "get_submodule"], [32, 3, 1, "", "gradient_checkpointing_disable"], [32, 3, 1, "", "gradient_checkpointing_enable"], [32, 3, 1, "", "greedy_search"], [32, 3, 1, "", "group_beam_search"], [32, 3, 1, "", "half"], [32, 3, 1, "", "init_weights"], [32, 3, 1, "", "invert_attention_mask"], [32, 3, 1, "", "ipu"], [32, 5, 1, "", "is_gradient_checkpointing"], [32, 2, 1, "", "is_parallelizable"], [32, 3, 1, "", "load_state_dict"], [32, 3, 1, "", "load_tf_weights"], [32, 2, 1, "", "main_input_name"], [32, 3, 1, "", "modules"], [32, 3, 1, "", "named_buffers"], [32, 3, 1, "", "named_children"], [32, 3, 1, "", "named_modules"], [32, 3, 1, "", "named_parameters"], [32, 3, 1, "", "num_parameters"], [32, 3, 1, "", "parameters"], [32, 3, 1, "", "post_init"], [32, 3, 1, "", "prepare_inputs_for_generation"], [32, 3, 1, "", "prune_heads"], [32, 3, 1, "", "push_to_hub"], [32, 3, 1, "", "register_backward_hook"], [32, 3, 1, "", "register_buffer"], [32, 3, 1, "", "register_for_auto_class"], [32, 3, 1, "", "register_forward_hook"], [32, 3, 1, "", "register_forward_pre_hook"], [32, 3, 1, "", "register_full_backward_hook"], [32, 3, 1, "", "register_full_backward_pre_hook"], [32, 3, 1, "", "register_load_state_dict_post_hook"], [32, 3, 1, "", "register_module"], [32, 3, 1, "", "register_parameter"], [32, 3, 1, "", "register_state_dict_pre_hook"], [32, 3, 1, "", "requires_grad_"], [32, 3, 1, "", "reset_memory_hooks_state"], [32, 3, 1, "", "resize_position_embeddings"], [32, 3, 1, "", "resize_token_embeddings"], [32, 3, 1, "", "retrieve_modules_from_names"], [32, 3, 1, "", "reverse_bettertransformer"], [32, 3, 1, "", "sample"], [32, 3, 1, "", "save_pretrained"], [32, 3, 1, "", "set_extra_state"], [32, 3, 1, "", "set_input_embeddings"], [32, 3, 1, "", "share_memory"], [32, 3, 1, "", "state_dict"], [32, 2, 1, "", "supports_gradient_checkpointing"], [32, 3, 1, "", "tie_weights"], [32, 3, 1, "", "to"], [32, 3, 1, "", "to_bettertransformer"], [32, 3, 1, "", "to_empty"], [32, 3, 1, "", "train"], [32, 2, 1, "", "training"], [32, 3, 1, "", "type"], [32, 3, 1, "", "xpu"], [32, 3, 1, "", "zero_grad"]], "lambeq.bobcat.Category": [[32, 3, 1, "", "__init__"], [32, 2, 1, "", "argument"], [32, 2, 1, "", "atom"], [32, 5, 1, "", "bwd"], [32, 2, 1, "", "dir"], [32, 2, 1, "", "feature"], [32, 5, 1, "", "fwd"], [32, 3, 1, "", "matches"], [32, 3, 1, "", "parse"], [32, 2, 1, "", "relation"], [32, 2, 1, "", "result"], [32, 3, 1, "", "slash"], [32, 3, 1, "", "translate"], [32, 2, 1, "", "type_raising_dep_var"], [32, 2, 1, "", "var"]], "lambeq.bobcat.ChartParser": [[32, 3, 1, "", "__call__"], [32, 3, 1, "", "__init__"], [32, 3, 1, "", "calc_score_binary"], [32, 3, 1, "", "calc_score_unary"], [32, 3, 1, "", "filter_root"], [32, 3, 1, "", "get_span_score"], [32, 3, 1, "", "set_root_cats"]], "lambeq.bobcat.Grammar": [[32, 3, 1, "", "__init__"], [32, 2, 1, "", "binary_rules"], [32, 2, 1, "", "categories"], [32, 3, 1, "", "load"], [32, 3, 1, "", "save"], [32, 2, 1, "", "type_changing_rules"], [32, 2, 1, "", "type_raising_rules"]], "lambeq.bobcat.ParseTree": [[32, 3, 1, "", "__init__"], [32, 5, 1, "", "bwd_comp"], [32, 2, 1, "", "cat"], [32, 5, 1, "", "coordinated"], [32, 5, 1, "", "coordinated_or_type_raised"], [32, 2, 1, "", "filled_deps"], [32, 5, 1, "", "fwd_comp"], [32, 5, 1, "", "is_leaf"], [32, 2, 1, "", "left"], [32, 2, 1, "", "right"], [32, 2, 1, "", "rule"], [32, 2, 1, "", "score"], [32, 2, 1, "", "unfilled_deps"], [32, 2, 1, "", "var_map"], [32, 5, 1, "", "variable"], [32, 5, 1, "", "word"]], "lambeq.bobcat.Sentence": [[32, 3, 1, "", "__init__"], [32, 2, 1, "", "input_supertags"], [32, 2, 1, "", "span_scores"], [32, 2, 1, "", "words"]], "lambeq.bobcat.Supertag": [[32, 3, 1, "", "__init__"], [32, 2, 1, "", "category"], [32, 2, 1, "", "probability"]], "lambeq.bobcat.Tagger": [[32, 3, 1, "", "__call__"], [32, 3, 1, "", "__init__"], [32, 3, 1, "", "parse"], [32, 3, 1, "", "prepare_inputs"]], "lambeq.pregroups": [[33, 1, 1, "", "TextDiagramPrinter"], [33, 6, 1, "", "create_pregroup_diagram"], [33, 6, 1, "", "diagram2str"], [33, 6, 1, "", "draw"], [33, 6, 1, "", "is_pregroup_diagram"], [33, 6, 1, "", "remove_cups"], [33, 6, 1, "", "remove_swaps"]], "lambeq.pregroups.TextDiagramPrinter": [[33, 2, 1, "", "ASCII_CHAR_SET"], [33, 2, 1, "", "UNICODE_CHAR_SET"], [33, 3, 1, "", "__init__"], [33, 3, 1, "", "diagram2str"], [33, 3, 1, "", "draw_layer"]], "lambeq.rewrite": [[34, 1, 1, "", "CoordinationRewriteRule"], [34, 1, 1, "", "CurryRewriteRule"], [34, 1, 1, "", "RewriteRule"], [34, 1, 1, "", "Rewriter"], [34, 1, 1, "", "SimpleRewriteRule"]], "lambeq.rewrite.CoordinationRewriteRule": [[34, 3, 1, "", "__call__"], [34, 3, 1, "", "__init__"], [34, 3, 1, "", "matches"], [34, 3, 1, "", "rewrite"]], "lambeq.rewrite.CurryRewriteRule": [[34, 3, 1, "", "__call__"], [34, 3, 1, "", "__init__"], [34, 3, 1, "", "matches"], [34, 3, 1, "", "rewrite"]], "lambeq.rewrite.RewriteRule": [[34, 3, 1, "", "__call__"], [34, 3, 1, "", "matches"], [34, 3, 1, "", "rewrite"]], "lambeq.rewrite.Rewriter": [[34, 3, 1, "", "__call__"], [34, 3, 1, "", "__init__"], [34, 3, 1, "", "add_rules"], [34, 3, 1, "", "available_rules"]], "lambeq.rewrite.SimpleRewriteRule": [[34, 3, 1, "", "__call__"], [34, 3, 1, "", "__init__"], [34, 3, 1, "", "matches"], [34, 3, 1, "", "placeholder"], [34, 3, 1, "", "rewrite"]], "lambeq.text2diagram": [[35, 4, 1, "", "BobcatParseError"], [35, 1, 1, "", "BobcatParser"], [35, 1, 1, "", "CCGAtomicType"], [35, 4, 1, "", "CCGBankParseError"], [35, 1, 1, "", "CCGBankParser"], [35, 1, 1, "", "CCGParser"], [35, 1, 1, "", "CCGRule"], [35, 4, 1, "", "CCGRuleUseError"], [35, 1, 1, "", "CCGTree"], [35, 4, 1, "", "DepCCGParseError"], [35, 1, 1, "", "DepCCGParser"], [35, 1, 1, "", "LinearReader"], [35, 1, 1, "", "Reader"], [35, 1, 1, "", "TreeReader"], [35, 1, 1, "", "TreeReaderMode"], [35, 4, 1, "", "WebParseError"], [35, 1, 1, "", "WebParser"], [35, 7, 1, "", "bag_of_words_reader"], [35, 7, 1, "", "cups_reader"], [35, 7, 1, "", "spiders_reader"], [35, 7, 1, "", "stairs_reader"], [35, 7, 1, "", "word_sequence_reader"]], "lambeq.text2diagram.BobcatParseError": [[35, 3, 1, "", "__init__"], [35, 2, 1, "", "args"], [35, 3, 1, "", "with_traceback"]], "lambeq.text2diagram.BobcatParser": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "available_models"], [35, 3, 1, "", "sentence2diagram"], [35, 3, 1, "", "sentence2tree"], [35, 3, 1, "", "sentences2diagrams"], [35, 3, 1, "", "sentences2trees"]], "lambeq.text2diagram.CCGAtomicType": [[35, 2, 1, "", "CONJUNCTION"], [35, 2, 1, "", "NOUN"], [35, 2, 1, "", "NOUN_PHRASE"], [35, 2, 1, "", "PREPOSITIONAL_PHRASE"], [35, 2, 1, "", "PUNCTUATION"], [35, 2, 1, "", "SENTENCE"]], "lambeq.text2diagram.CCGBankParseError": [[35, 3, 1, "", "__init__"], [35, 2, 1, "", "args"], [35, 3, 1, "", "with_traceback"]], "lambeq.text2diagram.CCGBankParser": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "section2diagrams"], [35, 3, 1, "", "section2diagrams_gen"], [35, 3, 1, "", "section2trees"], [35, 3, 1, "", "section2trees_gen"], [35, 3, 1, "", "sentence2diagram"], [35, 3, 1, "", "sentence2tree"], [35, 3, 1, "", "sentences2diagrams"], [35, 3, 1, "", "sentences2trees"]], "lambeq.text2diagram.CCGParser": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "sentence2diagram"], [35, 3, 1, "", "sentence2tree"], [35, 3, 1, "", "sentences2diagrams"], [35, 3, 1, "", "sentences2trees"]], "lambeq.text2diagram.CCGRule": [[35, 2, 1, "", "BACKWARD_APPLICATION"], [35, 2, 1, "", "BACKWARD_COMPOSITION"], [35, 2, 1, "", "BACKWARD_CROSSED_COMPOSITION"], [35, 2, 1, "", "BACKWARD_TYPE_RAISING"], [35, 2, 1, "", "CONJUNCTION"], [35, 2, 1, "", "FORWARD_APPLICATION"], [35, 2, 1, "", "FORWARD_COMPOSITION"], [35, 2, 1, "", "FORWARD_CROSSED_COMPOSITION"], [35, 2, 1, "", "FORWARD_TYPE_RAISING"], [35, 2, 1, "", "GENERALIZED_BACKWARD_COMPOSITION"], [35, 2, 1, "", "GENERALIZED_BACKWARD_CROSSED_COMPOSITION"], [35, 2, 1, "", "GENERALIZED_FORWARD_COMPOSITION"], [35, 2, 1, "", "GENERALIZED_FORWARD_CROSSED_COMPOSITION"], [35, 2, 1, "", "LEXICAL"], [35, 2, 1, "", "REMOVE_PUNCTUATION_LEFT"], [35, 2, 1, "", "REMOVE_PUNCTUATION_RIGHT"], [35, 2, 1, "", "UNARY"], [35, 2, 1, "", "UNKNOWN"], [35, 3, 1, "", "__call__"], [35, 3, 1, "", "check_match"], [35, 3, 1, "", "infer_rule"], [35, 5, 1, "", "symbol"]], "lambeq.text2diagram.CCGRuleUseError": [[35, 3, 1, "", "__init__"], [35, 2, 1, "", "args"], [35, 3, 1, "", "with_traceback"]], "lambeq.text2diagram.CCGTree": [[35, 3, 1, "", "__init__"], [35, 5, 1, "", "child"], [35, 3, 1, "", "deriv"], [35, 3, 1, "", "from_json"], [35, 5, 1, "", "left"], [35, 5, 1, "", "right"], [35, 5, 1, "", "text"], [35, 3, 1, "", "to_biclosed_diagram"], [35, 3, 1, "", "to_diagram"], [35, 3, 1, "", "to_json"], [35, 3, 1, "", "without_trivial_unary_rules"]], "lambeq.text2diagram.DepCCGParseError": [[35, 3, 1, "", "__init__"], [35, 2, 1, "", "args"], [35, 3, 1, "", "with_traceback"]], "lambeq.text2diagram.DepCCGParser": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "sentence2diagram"], [35, 3, 1, "", "sentence2tree"], [35, 3, 1, "", "sentences2diagrams"], [35, 3, 1, "", "sentences2trees"]], "lambeq.text2diagram.LinearReader": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "sentence2diagram"], [35, 3, 1, "", "sentences2diagrams"]], "lambeq.text2diagram.Reader": [[35, 3, 1, "", "sentence2diagram"], [35, 3, 1, "", "sentences2diagrams"]], "lambeq.text2diagram.TreeReader": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "available_modes"], [35, 3, 1, "", "sentence2diagram"], [35, 3, 1, "", "sentences2diagrams"], [35, 3, 1, "", "tree2diagram"]], "lambeq.text2diagram.TreeReaderMode": [[35, 2, 1, "", "HEIGHT"], [35, 2, 1, "", "NO_TYPE"], [35, 2, 1, "", "RULE_ONLY"], [35, 2, 1, "", "RULE_TYPE"]], "lambeq.text2diagram.WebParseError": [[35, 3, 1, "", "__init__"], [35, 2, 1, "", "args"], [35, 2, 1, "", "characters_written"], [35, 2, 1, "", "errno"], [35, 2, 1, "", "filename"], [35, 2, 1, "", "filename2"], [35, 2, 1, "", "strerror"], [35, 3, 1, "", "with_traceback"]], "lambeq.text2diagram.WebParser": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "sentence2diagram"], [35, 3, 1, "", "sentence2tree"], [35, 3, 1, "", "sentences2diagrams"], [35, 3, 1, "", "sentences2trees"]], "lambeq.tokeniser": [[36, 1, 1, "", "SpacyTokeniser"], [36, 1, 1, "", "Tokeniser"]], "lambeq.tokeniser.SpacyTokeniser": [[36, 3, 1, "", "__init__"], [36, 3, 1, "", "split_sentences"], [36, 3, 1, "", "tokenise_sentence"], [36, 3, 1, "", "tokenise_sentences"]], "lambeq.tokeniser.Tokeniser": [[36, 3, 1, "", "split_sentences"], [36, 3, 1, "", "tokenise_sentence"], [36, 3, 1, "", "tokenise_sentences"]], "lambeq.training": [[37, 1, 1, "", "BinaryCrossEntropyLoss"], [37, 1, 1, "", "Checkpoint"], [37, 1, 1, "", "CrossEntropyLoss"], [37, 1, 1, "", "Dataset"], [37, 1, 1, "", "LossFunction"], [37, 1, 1, "", "MSELoss"], [37, 1, 1, "", "Model"], [37, 1, 1, "", "NumpyModel"], [37, 1, 1, "", "Optimizer"], [37, 1, 1, "", "PennyLaneModel"], [37, 1, 1, "", "PytorchModel"], [37, 1, 1, "", "PytorchTrainer"], [37, 1, 1, "", "QuantumModel"], [37, 1, 1, "", "QuantumTrainer"], [37, 1, 1, "", "SPSAOptimizer"], [37, 1, 1, "", "TketModel"], [37, 1, 1, "", "Trainer"]], "lambeq.training.BinaryCrossEntropyLoss": [[37, 3, 1, "", "__call__"], [37, 3, 1, "", "__init__"], [37, 3, 1, "", "calculate_loss"]], "lambeq.training.Checkpoint": [[37, 3, 1, "", "__init__"], [37, 3, 1, "", "add_many"], [37, 3, 1, "", "from_file"], [37, 3, 1, "", "get"], [37, 3, 1, "", "items"], [37, 3, 1, "", "keys"], [37, 3, 1, "", "to_file"], [37, 3, 1, "", "values"]], "lambeq.training.CrossEntropyLoss": [[37, 3, 1, "", "__call__"], [37, 3, 1, "", "__init__"], [37, 3, 1, "", "calculate_loss"]], "lambeq.training.Dataset": [[37, 3, 1, "", "__init__"], [37, 3, 1, "", "shuffle_data"]], "lambeq.training.LossFunction": [[37, 3, 1, "", "__call__"], [37, 3, 1, "", "__init__"], [37, 3, 1, "", "calculate_loss"]], "lambeq.training.MSELoss": [[37, 3, 1, "", "__call__"], [37, 3, 1, "", "__init__"], [37, 3, 1, "", "calculate_loss"]], "lambeq.training.Model": [[37, 3, 1, "", "__call__"], [37, 3, 1, "", "__init__"], [37, 3, 1, "", "forward"], [37, 3, 1, "", "from_checkpoint"], [37, 3, 1, "", "from_diagrams"], [37, 3, 1, "", "get_diagram_output"], [37, 3, 1, "", "initialise_weights"], [37, 3, 1, "", "load"], [37, 3, 1, "", "save"]], "lambeq.training.NumpyModel": [[37, 3, 1, "", "__call__"], [37, 3, 1, "", "__init__"], [37, 3, 1, "", "forward"], [37, 3, 1, "", "from_checkpoint"], [37, 3, 1, "", "from_diagrams"], [37, 3, 1, "", "get_diagram_output"], [37, 3, 1, "", "initialise_weights"], [37, 3, 1, "", "load"], [37, 3, 1, "", "save"], [37, 2, 1, "", "weights"]], "lambeq.training.Optimizer": [[37, 3, 1, "", "__init__"], [37, 3, 1, "", "backward"], [37, 3, 1, "", "load_state_dict"], [37, 3, 1, "", "state_dict"], [37, 3, 1, "", "step"], [37, 3, 1, "", "zero_grad"]], "lambeq.training.PennyLaneModel": [[37, 2, 1, "", "T_destination"], [37, 3, 1, "", "__call__"], [37, 3, 1, "", "__init__"], [37, 3, 1, "", "add_module"], [37, 3, 1, "", "apply"], [37, 3, 1, "", "bfloat16"], [37, 3, 1, "", "buffers"], [37, 2, 1, "", "call_super_init"], [37, 3, 1, "", "children"], [37, 3, 1, "", "cpu"], [37, 3, 1, "", "cuda"], [37, 3, 1, "", "double"], [37, 2, 1, "", "dump_patches"], [37, 3, 1, "", "eval"], [37, 3, 1, "", "extra_repr"], [37, 3, 1, "", "float"], [37, 3, 1, "", "forward"], [37, 3, 1, "", "from_checkpoint"], [37, 3, 1, "", "from_diagrams"], [37, 3, 1, "", "get_buffer"], [37, 3, 1, "", "get_diagram_output"], [37, 3, 1, "", "get_extra_state"], [37, 3, 1, "", "get_parameter"], [37, 3, 1, "", "get_submodule"], [37, 3, 1, "", "half"], [37, 3, 1, "", "initialise_weights"], [37, 3, 1, "", "ipu"], [37, 3, 1, "", "load"], [37, 3, 1, "", "load_state_dict"], [37, 3, 1, "", "modules"], [37, 3, 1, "", "named_buffers"], [37, 3, 1, "", "named_children"], [37, 3, 1, "", "named_modules"], [37, 3, 1, "", "named_parameters"], [37, 3, 1, "", "parameters"], [37, 3, 1, "", "register_backward_hook"], [37, 3, 1, "", "register_buffer"], [37, 3, 1, "", "register_forward_hook"], [37, 3, 1, "", "register_forward_pre_hook"], [37, 3, 1, "", "register_full_backward_hook"], [37, 3, 1, "", "register_full_backward_pre_hook"], [37, 3, 1, "", "register_load_state_dict_post_hook"], [37, 3, 1, "", "register_module"], [37, 3, 1, "", "register_parameter"], [37, 3, 1, "", "register_state_dict_pre_hook"], [37, 3, 1, "", "requires_grad_"], [37, 3, 1, "", "save"], [37, 3, 1, "", "set_extra_state"], [37, 3, 1, "", "share_memory"], [37, 3, 1, "", "state_dict"], [37, 2, 1, "", "symbols"], [37, 3, 1, "", "to"], [37, 3, 1, "", "to_empty"], [37, 3, 1, "", "train"], [37, 2, 1, "", "training"], [37, 3, 1, "", "type"], [37, 2, 1, "", "weights"], [37, 3, 1, "", "xpu"], [37, 3, 1, "", "zero_grad"]], "lambeq.training.PytorchModel": [[37, 2, 1, "", "T_destination"], [37, 3, 1, "", "__call__"], [37, 3, 1, "", "__init__"], [37, 3, 1, "", "add_module"], [37, 3, 1, "", "apply"], [37, 3, 1, "", "bfloat16"], [37, 3, 1, "", "buffers"], [37, 2, 1, "", "call_super_init"], [37, 3, 1, "", "children"], [37, 3, 1, "", "cpu"], [37, 3, 1, "", "cuda"], [37, 3, 1, "", "double"], [37, 2, 1, "", "dump_patches"], [37, 3, 1, "", "eval"], [37, 3, 1, "", "extra_repr"], [37, 3, 1, "", "float"], [37, 3, 1, "", "forward"], [37, 3, 1, "", "from_checkpoint"], [37, 3, 1, "", "from_diagrams"], [37, 3, 1, "", "get_buffer"], [37, 3, 1, "", "get_diagram_output"], [37, 3, 1, "", "get_extra_state"], [37, 3, 1, "", "get_parameter"], [37, 3, 1, "", "get_submodule"], [37, 3, 1, "", "half"], [37, 3, 1, "", "initialise_weights"], [37, 3, 1, "", "ipu"], [37, 3, 1, "", "load"], [37, 3, 1, "", "load_state_dict"], [37, 3, 1, "", "modules"], [37, 3, 1, "", "named_buffers"], [37, 3, 1, "", "named_children"], [37, 3, 1, "", "named_modules"], [37, 3, 1, "", "named_parameters"], [37, 3, 1, "", "parameters"], [37, 3, 1, "", "register_backward_hook"], [37, 3, 1, "", "register_buffer"], [37, 3, 1, "", "register_forward_hook"], [37, 3, 1, "", "register_forward_pre_hook"], [37, 3, 1, "", "register_full_backward_hook"], [37, 3, 1, "", "register_full_backward_pre_hook"], [37, 3, 1, "", "register_load_state_dict_post_hook"], [37, 3, 1, "", "register_module"], [37, 3, 1, "", "register_parameter"], [37, 3, 1, "", "register_state_dict_pre_hook"], [37, 3, 1, "", "requires_grad_"], [37, 3, 1, "", "save"], [37, 3, 1, "", "set_extra_state"], [37, 3, 1, "", "share_memory"], [37, 3, 1, "", "state_dict"], [37, 2, 1, "", "symbols"], [37, 3, 1, "", "to"], [37, 3, 1, "", "to_empty"], [37, 3, 1, "", "train"], [37, 2, 1, "", "training"], [37, 3, 1, "", "type"], [37, 2, 1, "", "weights"], [37, 3, 1, "", "xpu"], [37, 3, 1, "", "zero_grad"]], "lambeq.training.PytorchTrainer": [[37, 3, 1, "", "__init__"], [37, 3, 1, "", "fit"], [37, 3, 1, "", "load_training_checkpoint"], [37, 2, 1, "", "model"], [37, 3, 1, "", "save_checkpoint"], [37, 3, 1, "", "training_step"], [37, 3, 1, "", "validation_step"]], "lambeq.training.QuantumModel": [[37, 3, 1, "", "__call__"], [37, 3, 1, "", "__init__"], [37, 3, 1, "", "forward"], [37, 3, 1, "", "from_checkpoint"], [37, 3, 1, "", "from_diagrams"], [37, 3, 1, "", "get_diagram_output"], [37, 3, 1, "", "initialise_weights"], [37, 3, 1, "", "load"], [37, 3, 1, "", "save"], [37, 2, 1, "", "weights"]], "lambeq.training.QuantumTrainer": [[37, 3, 1, "", "__init__"], [37, 3, 1, "", "fit"], [37, 3, 1, "", "load_training_checkpoint"], [37, 2, 1, "", "model"], [37, 3, 1, "", "save_checkpoint"], [37, 3, 1, "", "training_step"], [37, 3, 1, "", "validation_step"]], "lambeq.training.SPSAOptimizer": [[37, 3, 1, "", "__init__"], [37, 3, 1, "", "backward"], [37, 3, 1, "", "load_state_dict"], [37, 2, 1, "", "model"], [37, 3, 1, "", "state_dict"], [37, 3, 1, "", "step"], [37, 3, 1, "", "update_hyper_params"], [37, 3, 1, "", "zero_grad"]], "lambeq.training.TketModel": [[37, 3, 1, "", "__call__"], [37, 3, 1, "", "__init__"], [37, 3, 1, "", "forward"], [37, 3, 1, "", "from_checkpoint"], [37, 3, 1, "", "from_diagrams"], [37, 3, 1, "", "get_diagram_output"], [37, 3, 1, "", "initialise_weights"], [37, 3, 1, "", "load"], [37, 3, 1, "", "save"], [37, 2, 1, "", "symbols"], [37, 2, 1, "", "weights"]], "lambeq.training.Trainer": [[37, 3, 1, "", "__init__"], [37, 3, 1, "", "fit"], [37, 3, 1, "", "load_training_checkpoint"], [37, 3, 1, "", "save_checkpoint"], [37, 3, 1, "", "training_step"], [37, 3, 1, "", "validation_step"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:exception", "5": "py:property", "6": "py:function", "7": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "exception", "Python exception"], "5": ["py", "property", "Python property"], "6": ["py", "function", "Python function"], "7": ["py", "data", "Python data"]}, "titleterms": {"contribut": [0, 56], "lambeq": [0, 29, 31, 32, 33, 34, 35, 36, 37, 46, 51, 56, 66, 67], "open": 0, "pull": 0, "request": 0, "trivial": 0, "an": 0, "issu": 0, "where": 0, "start": [0, 29], "code": 0, "conduct": 0, "advanc": [12, 38, 56], "discopi": [12, 15, 19, 55, 57], "usag": [12, 14], "bibliographi": 13, "command": 14, "line": 14, "interfac": 14, "basic": 14, "strict": 14, "pregroup": [14, 33, 46, 52, 55, 66], "mode": 14, "us": [14, 19, 20, 21, 39, 62, 65, 67], "reader": [14, 22, 26, 56, 60], "rewrit": [14, 23, 34, 46, 56, 59, 66], "rule": [14, 23, 56], "ans\u00e4tz": [14, 56], "other": 14, "option": [14, 51], "detail": 14, "posit": [14, 56], "argument": 14, "name": 14, "output": 14, "parser": [14, 18], "configur": [14, 39], "circuit": [16, 17, 19, 20, 21, 55, 62, 63, 64, 65, 67], "classic": [17, 55, 58, 61, 67], "pipelin": [17, 20, 21, 48], "input": [17, 60, 61, 62, 63, 65], "data": [17, 19, 20, 21, 41, 61, 62, 63, 65], "creat": [17, 19, 20, 21, 49, 56, 61, 62, 63, 65], "diagram": [17, 19, 20, 21, 52, 59, 61, 62, 63, 65, 66], "parameteris": [17, 20, 21, 58, 61, 62, 63, 65], "defin": [17, 20, 21, 61, 62, 63, 65], "evalu": [17, 20, 21, 40, 61, 62, 63, 65, 67], "metric": [17, 20, 21, 40, 61, 62, 63], "initi": [17, 20, 21], "trainer": [17, 20, 21, 61, 62, 63], "train": [17, 19, 20, 21, 37, 38, 46, 53, 61, 62, 63, 65, 66, 67], "show": [17, 20, 21], "result": [17, 20, 21, 61, 62, 63], "hybrid": [19, 62, 67], "model": [19, 39, 60, 61, 62, 63, 67], "pennylan": 19, "backend": [19, 21, 39], "read": [19, 20, 21, 44, 47], "remov": [19, 20, 21, 23], "cup": [19, 20, 21, 23, 60], "pure": 19, "quantum": [19, 20, 21, 55, 58, 62, 63, 65, 67], "initialis": [19, 61, 62, 63], "paramet": 19, "prepar": [19, 61, 62, 63, 65], "dataset": [19, 41, 61, 62, 63], "pytorchtrain": 19, "determin": [19, 23], "test": [19, 62], "accuraci": [19, 62], "standard": [19, 62], "pytorch": [19, 62], "make": [19, 62], "pair": [19, 62], "log": [19, 62], "jax": 21, "auxiliari": 23, "connector": 23, "adverb": 23, "preposit": 23, "phrase": 23, "rel": 23, "pronoun": 23, "coordin": 23, "curri": 23, "functor": [23, 55, 56], "tensor": [24, 52, 55, 64, 67], "tokenis": [25, 36, 46, 60, 66], "word": [25, 41, 60], "split": 25, "document": 25, "sentenc": [25, 60], "tree": [26, 60], "index": 27, "glossari": 28, "user": 29, "support": 29, "licenc": 29, "how": 29, "cite": 29, "get": 29, "nlp": [29, 42], "101": 29, "tutori": 29, "toolkit": 29, "refer": [29, 44], "extern": 29, "link": 29, "instal": 30, "ansatz": [31, 46, 56, 66], "bobcat": [32, 46, 66], "text2diagram": [35, 46, 66], "manual": 38, "choos": 39, "numpymodel": 39, "pennylanemodel": 39, "differ": 39, "case": [39, 58, 61, 62, 63, 65, 67], "pytorchmodel": 39, "tketmodel": 39, "text": [40, 41], "classif": 40, "binari": 40, "v": 40, "multi": 40, "class": [40, 66], "loss": [40, 62, 63, 65], "function": [40, 65], "work": [41, 65], "corpora": 41, "pre": [41, 60], "process": [41, 60], "token": 41, "handl": 41, "unknown": 41, "introduct": [42, 64], "qnlp": 42, "comput": [42, 62, 67], "lingust": 42, "task": 42, "applic": 42, "typic": 42, "workflow": 42, "machin": 43, "learn": 43, "best": 43, "practic": 43, "cross": 43, "valid": 43, "further": 44, "studi": 44, "onlin": 44, "cours": 44, "organis": 44, "softwar": 44, "tool": 44, "exampl": [45, 55, 56], "subpackag": 46, "syntact": 47, "pars": 47, "ccgbank": 47, "png": 49, "file": 49, "releas": 50, "note": 50, "0": 50, "3": [50, 58], "1": [50, 55, 60], "2": [50, 55, 59], "8": 50, "7": 50, "6": 50, "5": 50, "4": [50, 53], "packag": 51, "avail": 51, "string": 52, "motiv": 52, "connect": 52, "network": [52, 55], "grammar": [52, 55], "step": [53, 58, 59, 60], "troubleshoot": 54, "ssl": 54, "error": 54, "window": 54, "discocat": [55, 60], "veri": 55, "twist": 55, "extend": 56, "comb": 56, "simplerewriterul": 56, "negat": 56, "rewriterul": 56, "past": 56, "circuitansatz": 56, "real": [56, 62], "valu": 56, "tensoransatz": 56, "monoid": 57, "categori": 57, "rigid": 57, "matrix": 58, "product": 58, "state": 58, "syntax": 60, "base": [60, 67], "bag": 60, "spider": 60, "sequenc": 60, "stair": 60, "instanti": [61, 62, 63], "ad": 61, "custom": 61, "layer": 61, "simplifi": [62, 63], "run": 62, "analys": 62, "intern": 62, "represent": 62, "filter": 63, "symbol": 64, "from": 64, "A": 65, "complet": 65, "vocabulari": 65, "common": 67, "exact": 67, "non": 67, "shot": 67, "simul": 67, "hardwar": 67, "platform": 67}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Contributing to lambeq": [[0, "contributing-to-lambeq"]], "Opening a pull request": [[0, "opening-a-pull-request"]], "Trivial contributions": [[0, "trivial-contributions"]], "Opening an issue": [[0, "opening-an-issue"]], "Where to start": [[0, "where-to-start"]], "Code of conduct": [[0, "code-of-conduct"]], "Advanced: DisCoPy usage": [[12, "advanced-discopy-usage"]], "Bibliography": [[13, "bibliography"]], "Command-line interface": [[14, "command-line-interface"]], "Basic usage": [[14, "basic-usage"]], "Strict pregroups mode": [[14, "strict-pregroups-mode"]], "Using a reader": [[14, "using-a-reader"]], "Rewrite rules and ans\u00e4tze": [[14, "rewrite-rules-and-ansatze"]], "Other options": [[14, "other-options"]], "Detailed options": [[14, "detailed-options"]], "Positional Arguments": [[14, "positional-arguments"]], "Named Arguments": [[14, "named-arguments"]], "Output": [[14, "output"]], "Parser": [[14, "parser"], [18, "Parser"]], "Rewriter": [[14, "rewriter"]], "Ans\u00e4tze": [[14, "ans\u00e4tze"]], "Configuration": [[14, "configuration"]], "DisCoPy": [[15, "discopy"]], "Circuit": [[16, "Circuit"]], "Classical pipeline": [[17, "Classical-pipeline"]], "Input data": [[17, "Input-data"], [61, "Input-data"], [62, "Input-data"], [63, "Input-data"], [65, "Input-data"]], "Create diagrams": [[17, "Create-diagrams"], [20, "Create-diagrams"], [21, "Create-diagrams"]], "Create circuits": [[17, "Create-circuits"], [20, "Create-circuits"], [21, "Create-circuits"], [62, "Create-circuits"], [63, "Create-circuits"]], "Parameterise": [[17, "Parameterise"], [20, "Parameterise"], [21, "Parameterise"]], "Define Evaluation Metric": [[17, "Define-Evaluation-Metric"]], "Initialize Trainer": [[17, "Initialize-Trainer"]], "Train": [[17, "Train"], [20, "Train"], [21, "Train"], [61, "Train"], [62, "Train"], [63, "Train"], [65, "Train"]], "Show results": [[17, "Show-results"], [20, "Show-results"], [21, "Show-results"]], "Training hybrid models using the Pennylane backend": [[19, "Training-hybrid-models-using-the-Pennylane-backend"]], "Read in the data and create diagrams": [[19, "Read-in-the-data-and-create-diagrams"], [20, "Read-in-the-data-and-create-diagrams"], [21, "Read-in-the-data-and-create-diagrams"]], "Remove cups": [[19, "Remove-cups"], [23, "Remove-cups"]], "Create DisCoPy circuits": [[19, "Create-DisCoPy-circuits"]], "Create (pure quantum) model and initialise parameters": [[19, "Create-(pure-quantum)-model-and-initialise-parameters"]], "Prepare train dataset": [[19, "Prepare-train-dataset"]], "Training": [[19, "Training"], [61, "Training"], [62, "Training"], [63, "Training"], [65, "Training"]], "Using PytorchTrainer": [[19, "Using-PytorchTrainer"]], "Determine test accuracy": [[19, "Determine-test-accuracy"]], "Using standard PyTorch": [[19, "Using-standard-PyTorch"], [62, "Using-standard-PyTorch"]], "Determine the test accuracy": [[19, "Determine-the-test-accuracy"]], "Creating a hybrid model": [[19, "Creating-a-hybrid-model"]], "Make paired dataset": [[19, "Make-paired-dataset"], [62, "Make-paired-dataset"]], "Initialise the model": [[19, "Initialise-the-model"]], "Train the model and log accuracies": [[19, "Train-the-model-and-log-accuracies"]], "Quantum pipeline using the Quantum Trainer": [[20, "Quantum-pipeline-using-the-Quantum-Trainer"]], "Remove the cups": [[20, "Remove-the-cups"], [21, "Remove-the-cups"]], "Define evaluation metric": [[20, "Define-evaluation-metric"], [21, "Define-evaluation-metric"], [61, "Define-evaluation-metric"]], "Initialize trainer": [[20, "Initialize-trainer"], [21, "Initialize-trainer"]], "Quantum pipeline using JAX backend": [[21, "Quantum-pipeline-using-JAX-backend"]], "Reader": [[22, "Reader"]], "Rewrite": [[23, "Rewrite"]], "Auxiliary rule": [[23, "Auxiliary-rule"]], "Connector rule": [[23, "Connector-rule"]], "Determiner rule": [[23, "Determiner-rule"]], "Adverb rules": [[23, "Adverb-rules"]], "Prepositional phrase rule": [[23, "Prepositional-phrase-rule"]], "Relative Pronoun rules": [[23, "Relative-Pronoun-rules"]], "Coordination": [[23, "Coordination"]], "Curry functor": [[23, "Curry-functor"]], "Tensor": [[24, "Tensor"]], "Tokenisation": [[25, "Tokenisation"]], "Word tokenisation": [[25, "Word-tokenisation"]], "Splitting a document into sentences": [[25, "Splitting-a-document-into-sentences"]], "Tree reader": [[26, "Tree-reader"]], "Index": [[27, "index"]], "Glossary": [[28, "glossary"]], "lambeq": [[29, "lambeq"]], "User support": [[29, "user-support"]], "Licence": [[29, "licence"]], "How to cite": [[29, "how-to-cite"]], "Getting started": [[29, null]], "NLP-101": [[29, null]], "Tutorials": [[29, null]], "Toolkit": [[29, null]], "Reference": [[29, null]], "External links": [[29, null]], "Installation": [[30, "installation"]], "lambeq.ansatz": [[31, "module-lambeq.ansatz"], [46, "lambeq-ansatz"], [66, "lambeq-ansatz"]], "lambeq.bobcat": [[32, "module-lambeq.bobcat"], [46, "lambeq-bobcat"], [66, "lambeq-bobcat"]], "lambeq.pregroups": [[33, "module-lambeq.pregroups"], [46, "lambeq-pregroups"], [66, "lambeq-pregroups"]], "lambeq.rewrite": [[34, "module-lambeq.rewrite"], [46, "lambeq-rewrite"], [66, "lambeq-rewrite"]], "lambeq.text2diagram": [[35, "module-lambeq.text2diagram"], [46, "lambeq-text2diagram"], [66, "lambeq-text2diagram"]], "lambeq.tokeniser": [[36, "module-lambeq.tokeniser"], [46, "lambeq-tokeniser"], [66, "lambeq-tokeniser"]], "lambeq.training": [[37, "module-lambeq.training"], [46, "lambeq-training"], [66, "lambeq-training"]], "Advanced: Manual training": [[38, "advanced-manual-training"]], "Choosing a model": [[39, "choosing-a-model"]], "NumpyModel": [[39, "numpymodel"]], "PennyLaneModel": [[39, "pennylanemodel"]], "Backend configurations for different use cases.": [[39, "id1"]], "PytorchModel": [[39, "pytorchmodel"]], "TketModel": [[39, "tketmodel"]], "Text classification": [[40, "text-classification"]], "Binary vs multi-class classification": [[40, "binary-vs-multi-class-classification"]], "Loss functions": [[40, "loss-functions"]], "Evaluation metrics": [[40, "evaluation-metrics"]], "Working with text data": [[41, "working-with-text-data"]], "Datasets and corpora": [[41, "datasets-and-corpora"]], "Text pre-processing": [[41, "text-pre-processing"]], "Tokenization": [[41, "tokenization"]], "Handling unknown words": [[41, "handling-unknown-words"]], "Introduction": [[42, "introduction"]], "NLP, QNLP and Computational Lingustics": [[42, "nlp-qnlp-and-computational-lingustics"]], "Tasks and applications": [[42, "tasks-and-applications"]], "Typical NLP workflow": [[42, "typical-nlp-workflow"]], "Machine learning best practices": [[43, "machine-learning-best-practices"]], "Cross-validation": [[43, "cross-validation"]], "References for further study": [[44, "references-for-further-study"]], "Reading": [[44, "reading"]], "Online courses": [[44, "online-courses"]], "Organisations": [[44, "organisations"]], "Software tools": [[44, "software-tools"]], "Examples": [[45, "examples"]], "Subpackages": [[46, "subpackages"]], "Syntactic parsing": [[47, "syntactic-parsing"]], "Reading CCGBank": [[47, "reading-ccgbank"]], "Pipeline": [[48, "pipeline"]], "Creating PNG files": [[49, "creating-png-files"]], "Release notes": [[50, "release-notes"]], "0.3.1": [[50, "rel-0-3-1"]], "0.3.0": [[50, "rel-0-3-0"]], "0.2.8": [[50, "rel-0-2-8"]], "0.2.7": [[50, "rel-0-2-7"]], "0.2.6": [[50, "rel-0-2-6"]], "0.2.5": [[50, "rel-0-2-5"]], "0.2.4": [[50, "rel-0-2-4"]], "0.2.3": [[50, "rel-0-2-3"]], "0.2.2": [[50, "rel-0-2-2"]], "0.2.1": [[50, "rel-0-2-1"]], "0.2.0": [[50, "rel-0-2-0"]], "0.1.2": [[50, "rel-0-1-2"]], "0.1.1": [[50, "rel-0-1-1"]], "0.1.0": [[50, "rel-0-1-0"]], "lambeq package": [[51, "module-lambeq"]], "Available Options": [[51, "id2"]], "String diagrams": [[52, "string-diagrams"]], "Motivation and connection to tensor networks": [[52, "motivation-and-connection-to-tensor-networks"]], "Pregroup grammars": [[52, "pregroup-grammars"], [55, "Pregroup-grammars"]], "Step 4: Training": [[53, "step-4-training"]], "Troubleshooting": [[54, "troubleshooting"]], "SSL error [Windows]": [[54, "ssl-error-windows"]], "DisCoCat in DisCoPy": [[55, "DisCoCat-in-DisCoPy"]], "Functors": [[55, "Functors"]], "Example 1: \u201cVery\u201d functor": [[55, "Example-1:-\u201cVery\u201d-functor"]], "Example 2: Twist functor": [[55, "Example-2:-Twist-functor"]], "Classical DisCoCat: Tensor networks": [[55, "Classical-DisCoCat:-Tensor-networks"]], "Quantum DisCoCat: Quantum circuits": [[55, "Quantum-DisCoCat:-Quantum-circuits"]], "Advanced: Extending lambeq": [[56, "Advanced:-Extending-lambeq"]], "Creating readers": [[56, "Creating-readers"]], "Reader example: \u201cComb\u201d reader": [[56, "Reader-example:-\u201cComb\u201d-reader"]], "Creating rewrite rules": [[56, "Creating-rewrite-rules"]], "SimpleRewriteRule example: Negation functor": [[56, "SimpleRewriteRule-example:-Negation-functor"]], "RewriteRule example: \u201cPast\u201d functor": [[56, "RewriteRule-example:-\u201cPast\u201d-functor"]], "Creating ans\u00e4tze": [[56, "Creating-ans\u00e4tze"]], "CircuitAnsatz example: \u201cReal-valued\u201d ansatz": [[56, "CircuitAnsatz-example:-\u201cReal-valued\u201d-ansatz"]], "TensorAnsatz example: \u201cPositive\u201d ansatz": [[56, "TensorAnsatz-example:-\u201cPositive\u201d-ansatz"]], "Contributions": [[56, "Contributions"]], "Monoidal categories in DisCoPy": [[57, "Monoidal-categories-in-DisCoPy"]], "Categories": [[57, "Categories"]], "Monoidal categories": [[57, "Monoidal-categories"]], "Rigid monoidal categories": [[57, "Rigid-monoidal-categories"]], "Step 3. Parameterisation": [[58, "Step-3.-Parameterisation"]], "Quantum case": [[58, "Quantum-case"]], "Classical case": [[58, "Classical-case"]], "Matrix product states": [[58, "Matrix-product-states"]], "Step 2. Diagram rewriting": [[59, "Step-2.-Diagram-rewriting"]], "Step 1. Sentence input": [[60, "Step-1.-Sentence-input"]], "Pre-processing and tokenisation": [[60, "Pre-processing-and-tokenisation"]], "Syntax-based model: DisCoCat": [[60, "Syntax-based-model:-DisCoCat"]], "Bag-of-words: Spiders reader": [[60, "Bag-of-words:-Spiders-reader"]], "Word-sequence models: Cups and stairs readers": [[60, "Word-sequence-models:-Cups-and-stairs-readers"]], "Tree readers": [[60, "Tree-readers"]], "Training: Classical case": [[61, "Training:-Classical-case"]], "Preparation": [[61, "Preparation"], [62, "Preparation"], [63, "Preparation"], [65, "Preparation"]], "Creating and parameterising diagrams": [[61, "Creating-and-parameterising-diagrams"], [62, "Creating-and-parameterising-diagrams"], [63, "Creating-and-parameterising-diagrams"], [65, "Creating-and-parameterising-diagrams"]], "Instantiate model": [[61, "Instantiate-model"], [62, "Instantiate-model"]], "Initialise trainer": [[61, "Initialise-trainer"], [62, "Initialise-trainer"], [63, "Initialise-trainer"]], "Create datasets": [[61, "Create-datasets"], [62, "Create-datasets"], [63, "Create-datasets"]], "Results": [[61, "Results"], [62, "Results"], [63, "Results"]], "Adding custom layers to the model": [[61, "Adding-custom-layers-to-the-model"]], "Training: Hybrid case": [[62, "Training:-Hybrid-case"]], "Simplify diagrams": [[62, "Simplify-diagrams"]], "Running on a real quantum computer": [[62, "Running-on-a-real-quantum-computer"]], "Define loss and evaluation metric": [[62, "Define-loss-and-evaluation-metric"], [63, "Define-loss-and-evaluation-metric"]], "Evaluate test accuracy": [[62, "Evaluate-test-accuracy"]], "Hybrid models": [[62, "Hybrid-models"]], "Initialise model": [[62, "Initialise-model"]], "Train and log accuracies": [[62, "Train-and-log-accuracies"]], "Analysing the internal representations of the model": [[62, "Analysing-the-internal-representations-of-the-model"]], "Training: Quantum case": [[63, "Training:-Quantum-case"]], "Filter and simplify diagrams": [[63, "Filter-and-simplify-diagrams"]], "Instantiate the model": [[63, "Instantiate-the-model"]], "Introduction to symbols": [[64, "Introduction-to-symbols"]], "Circuit symbols": [[64, "Circuit-symbols"]], "From symbols to tensors": [[64, "From-symbols-to-tensors"]], "A complete use case": [[65, "A-complete-use-case"]], "Creating a vocabulary": [[65, "Creating-a-vocabulary"]], "Define loss function": [[65, "Define-loss-function"]], "Evaluate": [[65, "Evaluate"]], "Working with quantum circuits": [[65, "Working-with-quantum-circuits"]], "Class diagrams": [[66, "class-diagrams"]], "lambeq use cases": [[67, "lambeq-use-cases"]], "Common training use cases.": [[67, "id3"]], "Exact (non shot-based) simulation of quantum circuits on classical hardware": [[67, "exact-non-shot-based-simulation-of-quantum-circuits-on-classical-hardware"]], "Shot-based simulation of quantum circuits on classical hardware": [[67, "shot-based-simulation-of-quantum-circuits-on-classical-hardware"]], "Evaluation of quantum circuits on a quantum computer": [[67, "evaluation-of-quantum-circuits-on-a-quantum-computer"]], "Quantum platforms.": [[67, "id4"]], "Evaluation of classical tensor-based models": [[67, "evaluation-of-classical-tensor-based-models"]], "Hybrid classical/quantum simulations on classical hardware": [[67, "hybrid-classical-quantum-simulations-on-classical-hardware"]]}, "indexentries": {"bobcat": [[28, "term-Bobcat"]], "ccgbank": [[28, "term-CCGBank"]], "combinatory categorial grammar (ccg)": [[28, "term-Combinatory-Categorial-Grammar-CCG"]], "discocat": [[28, "term-DisCoCat"]], "discopy": [[28, "term-DisCoPy"]], "frobenius algebra": [[28, "term-Frobenius-algebra"]], "iqp circuit": [[28, "term-IQP-circuit"]], "nisq": [[28, "term-NISQ"]], "pennylane": [[28, "term-PennyLane"]], "pytorch": [[28, "term-PyTorch"]], "qiskit": [[28, "term-Qiskit"]], "adjoint": [[28, "term-adjoint"]], "ansatz (plural: ans\u00e4tze)": [[28, "term-ansatz-plural-ansatze"]], "bag-of-words": [[28, "term-bag-of-words"]], "cap": [[28, "term-cap"]], "categorical quantum mechanics (cqm)": [[28, "term-categorical-quantum-mechanics-CQM"]], "category": [[28, "term-category"]], "compact closed category": [[28, "term-compact-closed-category"]], "compositional model": [[28, "term-compositional-model"]], "cup": [[28, "term-cup"]], "depccg": [[28, "term-depccg"]], "functor": [[28, "term-functor"]], "loss function": [[28, "term-loss-function"]], "matrix product state (mps)": [[28, "term-matrix-product-state-MPS"]], "model": [[28, "term-model"]], "monoidal category": [[28, "term-monoidal-category"]], "natural language processing (nlp)": [[28, "term-natural-language-processing-NLP"]], "noise": [[28, "term-noise"]], "parser": [[28, "term-parser"]], "post-selection": [[28, "term-post-selection"]], "pregroup grammar": [[28, "term-pregroup-grammar"]], "pytket": [[28, "term-pytket"]], "quantum nlp (qnlp)": [[28, "term-quantum-NLP-QNLP"]], "quantum circuit": [[28, "term-quantum-circuit"]], "quantum gate": [[28, "term-quantum-gate"]], "qubit": [[28, "term-qubit"]], "reader": [[28, "term-reader"]], "rewrite rule": [[28, "term-rewrite-rule"]], "rigid category": [[28, "term-rigid-category"]], "shots": [[28, "term-shots"]], "snake equations": [[28, "term-snake-equations"]], "spider": [[28, "term-spider"]], "string diagram": [[28, "term-string-diagram"]], "swap": [[28, "term-swap"]], "symbol": [[28, "term-symbol"]], "symmetric monoidal category": [[28, "term-symmetric-monoidal-category"]], "syntax tree": [[28, "term-syntax-tree"]], "tensor network": [[28, "term-tensor-network"]], "tensor train": [[28, "term-tensor-train"]], "tket": [[28, "term-tket"]], "trainer": [[28, "term-trainer"]], "tree reader": [[28, "term-tree-reader"]], "word-sequence model": [[28, "term-word-sequence-model"]], "bond_type (lambeq.ansatz.mpsansatz attribute)": [[31, "lambeq.ansatz.MPSAnsatz.BOND_TYPE"]], "baseansatz (class in lambeq.ansatz)": [[31, "lambeq.ansatz.BaseAnsatz"]], "circuitansatz (class in lambeq.ansatz)": [[31, "lambeq.ansatz.CircuitAnsatz"]], "iqpansatz (class in lambeq.ansatz)": [[31, "lambeq.ansatz.IQPAnsatz"]], "mpsansatz (class in lambeq.ansatz)": [[31, "lambeq.ansatz.MPSAnsatz"]], "sim14ansatz (class in lambeq.ansatz)": [[31, "lambeq.ansatz.Sim14Ansatz"]], "sim15ansatz (class in lambeq.ansatz)": [[31, "lambeq.ansatz.Sim15Ansatz"]], "spideransatz (class in lambeq.ansatz)": [[31, "lambeq.ansatz.SpiderAnsatz"]], "stronglyentanglingansatz (class in lambeq.ansatz)": [[31, "lambeq.ansatz.StronglyEntanglingAnsatz"]], "symbol (class in lambeq.ansatz)": [[31, "lambeq.ansatz.Symbol"]], "tensoransatz (class in lambeq.ansatz)": [[31, "lambeq.ansatz.TensorAnsatz"]], "__call__() (lambeq.ansatz.baseansatz method)": [[31, "lambeq.ansatz.BaseAnsatz.__call__"]], "__call__() (lambeq.ansatz.circuitansatz method)": [[31, "lambeq.ansatz.CircuitAnsatz.__call__"]], "__call__() (lambeq.ansatz.mpsansatz method)": [[31, "lambeq.ansatz.MPSAnsatz.__call__"]], "__call__() (lambeq.ansatz.spideransatz method)": [[31, "lambeq.ansatz.SpiderAnsatz.__call__"]], "__call__() (lambeq.ansatz.tensoransatz method)": [[31, "lambeq.ansatz.TensorAnsatz.__call__"]], "__init__() (lambeq.ansatz.baseansatz method)": [[31, "lambeq.ansatz.BaseAnsatz.__init__"]], "__init__() (lambeq.ansatz.circuitansatz method)": [[31, "lambeq.ansatz.CircuitAnsatz.__init__"]], "__init__() (lambeq.ansatz.iqpansatz method)": [[31, "lambeq.ansatz.IQPAnsatz.__init__"]], "__init__() (lambeq.ansatz.mpsansatz method)": [[31, "lambeq.ansatz.MPSAnsatz.__init__"]], "__init__() (lambeq.ansatz.sim14ansatz method)": [[31, "lambeq.ansatz.Sim14Ansatz.__init__"]], "__init__() (lambeq.ansatz.sim15ansatz method)": [[31, "lambeq.ansatz.Sim15Ansatz.__init__"]], "__init__() (lambeq.ansatz.spideransatz method)": [[31, "lambeq.ansatz.SpiderAnsatz.__init__"]], "__init__() (lambeq.ansatz.stronglyentanglingansatz method)": [[31, "lambeq.ansatz.StronglyEntanglingAnsatz.__init__"]], "__init__() (lambeq.ansatz.tensoransatz method)": [[31, "lambeq.ansatz.TensorAnsatz.__init__"]], "circuit() (lambeq.ansatz.stronglyentanglingansatz method)": [[31, "lambeq.ansatz.StronglyEntanglingAnsatz.circuit"]], "default_assumptions (lambeq.ansatz.symbol attribute)": [[31, "lambeq.ansatz.Symbol.default_assumptions"]], "directed_cod (lambeq.ansatz.symbol attribute)": [[31, "lambeq.ansatz.Symbol.directed_cod"]], "directed_dom (lambeq.ansatz.symbol attribute)": [[31, "lambeq.ansatz.Symbol.directed_dom"]], "lambeq.ansatz": [[31, "module-lambeq.ansatz"]], "module": [[31, "module-lambeq.ansatz"], [32, "module-lambeq.bobcat"], [33, "module-lambeq.pregroups"], [34, "module-lambeq.rewrite"], [35, "module-lambeq.text2diagram"], [36, "module-lambeq.tokeniser"], [37, "module-lambeq.training"], [51, "module-lambeq"]], "name (lambeq.ansatz.symbol attribute)": [[31, "lambeq.ansatz.Symbol.name"]], "ob_size() (lambeq.ansatz.circuitansatz method)": [[31, "lambeq.ansatz.CircuitAnsatz.ob_size"]], "params_shape() (lambeq.ansatz.circuitansatz method)": [[31, "lambeq.ansatz.CircuitAnsatz.params_shape"]], "params_shape() (lambeq.ansatz.iqpansatz method)": [[31, "lambeq.ansatz.IQPAnsatz.params_shape"]], "params_shape() (lambeq.ansatz.sim14ansatz method)": [[31, "lambeq.ansatz.Sim14Ansatz.params_shape"]], "params_shape() (lambeq.ansatz.sim15ansatz method)": [[31, "lambeq.ansatz.Sim15Ansatz.params_shape"]], "params_shape() (lambeq.ansatz.stronglyentanglingansatz method)": [[31, "lambeq.ansatz.StronglyEntanglingAnsatz.params_shape"]], "size (lambeq.ansatz.symbol property)": [[31, "lambeq.ansatz.Symbol.size"]], "sort_key() (lambeq.ansatz.symbol method)": [[31, "lambeq.ansatz.Symbol.sort_key"]], "bertforchartclassification (class in lambeq.bobcat)": [[32, "lambeq.bobcat.BertForChartClassification"]], "category (class in lambeq.bobcat)": [[32, "lambeq.bobcat.Category"]], "chartparser (class in lambeq.bobcat)": [[32, "lambeq.bobcat.ChartParser"]], "grammar (class in lambeq.bobcat)": [[32, "lambeq.bobcat.Grammar"]], "parsetree (class in lambeq.bobcat)": [[32, "lambeq.bobcat.ParseTree"]], "sentence (class in lambeq.bobcat)": [[32, "lambeq.bobcat.Sentence"]], "supertag (class in lambeq.bobcat)": [[32, "lambeq.bobcat.Supertag"]], "t_destination (lambeq.bobcat.bertforchartclassification attribute)": [[32, "lambeq.bobcat.BertForChartClassification.T_destination"]], "tagger (class in lambeq.bobcat)": [[32, "lambeq.bobcat.Tagger"]], "__call__() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.__call__"]], "__call__() (lambeq.bobcat.chartparser method)": [[32, "lambeq.bobcat.ChartParser.__call__"]], "__call__() (lambeq.bobcat.tagger method)": [[32, "lambeq.bobcat.Tagger.__call__"]], "__init__() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.__init__"]], "__init__() (lambeq.bobcat.category method)": [[32, "lambeq.bobcat.Category.__init__"]], "__init__() (lambeq.bobcat.chartparser method)": [[32, "lambeq.bobcat.ChartParser.__init__"]], "__init__() (lambeq.bobcat.grammar method)": [[32, "lambeq.bobcat.Grammar.__init__"]], "__init__() (lambeq.bobcat.parsetree method)": [[32, "lambeq.bobcat.ParseTree.__init__"]], "__init__() (lambeq.bobcat.sentence method)": [[32, "lambeq.bobcat.Sentence.__init__"]], "__init__() (lambeq.bobcat.supertag method)": [[32, "lambeq.bobcat.Supertag.__init__"]], "__init__() (lambeq.bobcat.tagger method)": [[32, "lambeq.bobcat.Tagger.__init__"]], "add_memory_hooks() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.add_memory_hooks"]], "add_module() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.add_module"]], "adjust_logits_during_generation() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.adjust_logits_during_generation"]], "apply() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.apply"]], "argument (lambeq.bobcat.category attribute)": [[32, "lambeq.bobcat.Category.argument"]], "assisted_decoding() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.assisted_decoding"]], "atom (lambeq.bobcat.category attribute)": [[32, "lambeq.bobcat.Category.atom"]], "base_model (lambeq.bobcat.bertforchartclassification property)": [[32, "lambeq.bobcat.BertForChartClassification.base_model"]], "base_model_prefix (lambeq.bobcat.bertforchartclassification attribute)": [[32, "lambeq.bobcat.BertForChartClassification.base_model_prefix"]], "beam_sample() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.beam_sample"]], "beam_search() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.beam_search"]], "bfloat16() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.bfloat16"]], "binary_rules (lambeq.bobcat.grammar attribute)": [[32, "lambeq.bobcat.Grammar.binary_rules"]], "buffers() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.buffers"]], "bwd (lambeq.bobcat.category property)": [[32, "lambeq.bobcat.Category.bwd"]], "bwd_comp (lambeq.bobcat.parsetree property)": [[32, "lambeq.bobcat.ParseTree.bwd_comp"]], "calc_score_binary() (lambeq.bobcat.chartparser method)": [[32, "lambeq.bobcat.ChartParser.calc_score_binary"]], "calc_score_unary() (lambeq.bobcat.chartparser method)": [[32, "lambeq.bobcat.ChartParser.calc_score_unary"]], "call_super_init (lambeq.bobcat.bertforchartclassification attribute)": [[32, "lambeq.bobcat.BertForChartClassification.call_super_init"]], "can_generate() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.can_generate"]], "cat (lambeq.bobcat.parsetree attribute)": [[32, "lambeq.bobcat.ParseTree.cat"]], "categories (lambeq.bobcat.grammar attribute)": [[32, "lambeq.bobcat.Grammar.categories"]], "category (lambeq.bobcat.supertag attribute)": [[32, "lambeq.bobcat.Supertag.category"]], "children() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.children"]], "compute_transition_scores() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.compute_transition_scores"]], "config_class (lambeq.bobcat.bertforchartclassification attribute)": [[32, "lambeq.bobcat.BertForChartClassification.config_class"]], "constrained_beam_search() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.constrained_beam_search"]], "contrastive_search() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.contrastive_search"]], "coordinated (lambeq.bobcat.parsetree property)": [[32, "lambeq.bobcat.ParseTree.coordinated"]], "coordinated_or_type_raised (lambeq.bobcat.parsetree property)": [[32, "lambeq.bobcat.ParseTree.coordinated_or_type_raised"]], "cpu() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.cpu"]], "create_extended_attention_mask_for_decoder() (lambeq.bobcat.bertforchartclassification static method)": [[32, "lambeq.bobcat.BertForChartClassification.create_extended_attention_mask_for_decoder"]], "cuda() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.cuda"]], "device (lambeq.bobcat.bertforchartclassification property)": [[32, "lambeq.bobcat.BertForChartClassification.device"]], "dir (lambeq.bobcat.category attribute)": [[32, "lambeq.bobcat.Category.dir"]], "disable_input_require_grads() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.disable_input_require_grads"]], "double() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.double"]], "dtype (lambeq.bobcat.bertforchartclassification property)": [[32, "lambeq.bobcat.BertForChartClassification.dtype"]], "dummy_inputs (lambeq.bobcat.bertforchartclassification property)": [[32, "lambeq.bobcat.BertForChartClassification.dummy_inputs"]], "dump_patches (lambeq.bobcat.bertforchartclassification attribute)": [[32, "lambeq.bobcat.BertForChartClassification.dump_patches"]], "enable_input_require_grads() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.enable_input_require_grads"]], "estimate_tokens() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.estimate_tokens"]], "eval() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.eval"]], "extra_repr() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.extra_repr"]], "feature (lambeq.bobcat.category attribute)": [[32, "lambeq.bobcat.Category.feature"]], "filled_deps (lambeq.bobcat.parsetree attribute)": [[32, "lambeq.bobcat.ParseTree.filled_deps"]], "filter_root() (lambeq.bobcat.chartparser method)": [[32, "lambeq.bobcat.ChartParser.filter_root"]], "float() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.float"]], "floating_point_ops() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.floating_point_ops"]], "forward() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.forward"]], "framework (lambeq.bobcat.bertforchartclassification property)": [[32, "lambeq.bobcat.BertForChartClassification.framework"]], "from_pretrained() (lambeq.bobcat.bertforchartclassification class method)": [[32, "lambeq.bobcat.BertForChartClassification.from_pretrained"]], "fwd (lambeq.bobcat.category property)": [[32, "lambeq.bobcat.Category.fwd"]], "fwd_comp (lambeq.bobcat.parsetree property)": [[32, "lambeq.bobcat.ParseTree.fwd_comp"]], "generate() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.generate"]], "get_buffer() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.get_buffer"]], "get_extended_attention_mask() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.get_extended_attention_mask"]], "get_extra_state() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.get_extra_state"]], "get_head_mask() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.get_head_mask"]], "get_input_embeddings() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.get_input_embeddings"]], "get_memory_footprint() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.get_memory_footprint"]], "get_output_embeddings() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.get_output_embeddings"]], "get_parameter() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.get_parameter"]], "get_position_embeddings() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.get_position_embeddings"]], "get_span_score() (lambeq.bobcat.chartparser method)": [[32, "lambeq.bobcat.ChartParser.get_span_score"]], "get_submodule() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.get_submodule"]], "gradient_checkpointing_disable() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.gradient_checkpointing_disable"]], "gradient_checkpointing_enable() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.gradient_checkpointing_enable"]], "greedy_search() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.greedy_search"]], "group_beam_search() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.group_beam_search"]], "half() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.half"]], "init_weights() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.init_weights"]], "input_supertags (lambeq.bobcat.sentence attribute)": [[32, "lambeq.bobcat.Sentence.input_supertags"]], "invert_attention_mask() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.invert_attention_mask"]], "ipu() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.ipu"]], "is_gradient_checkpointing (lambeq.bobcat.bertforchartclassification property)": [[32, "lambeq.bobcat.BertForChartClassification.is_gradient_checkpointing"]], "is_leaf (lambeq.bobcat.parsetree property)": [[32, "lambeq.bobcat.ParseTree.is_leaf"]], "is_parallelizable (lambeq.bobcat.bertforchartclassification attribute)": [[32, "lambeq.bobcat.BertForChartClassification.is_parallelizable"]], "lambeq.bobcat": [[32, "module-lambeq.bobcat"]], "left (lambeq.bobcat.parsetree attribute)": [[32, "lambeq.bobcat.ParseTree.left"]], "load() (lambeq.bobcat.grammar class method)": [[32, "lambeq.bobcat.Grammar.load"]], "load_state_dict() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.load_state_dict"]], "load_tf_weights() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.load_tf_weights"]], "main_input_name (lambeq.bobcat.bertforchartclassification attribute)": [[32, "lambeq.bobcat.BertForChartClassification.main_input_name"]], "matches() (lambeq.bobcat.category method)": [[32, "lambeq.bobcat.Category.matches"]], "modules() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.modules"]], "named_buffers() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.named_buffers"]], "named_children() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.named_children"]], "named_modules() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.named_modules"]], "named_parameters() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.named_parameters"]], "num_parameters() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.num_parameters"]], "parameters() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.parameters"]], "parse() (lambeq.bobcat.category static method)": [[32, "lambeq.bobcat.Category.parse"]], "parse() (lambeq.bobcat.tagger method)": [[32, "lambeq.bobcat.Tagger.parse"]], "post_init() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.post_init"]], "prepare_inputs() (lambeq.bobcat.tagger method)": [[32, "lambeq.bobcat.Tagger.prepare_inputs"]], "prepare_inputs_for_generation() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.prepare_inputs_for_generation"]], "probability (lambeq.bobcat.supertag attribute)": [[32, "lambeq.bobcat.Supertag.probability"]], "prune_heads() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.prune_heads"]], "push_to_hub() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.push_to_hub"]], "register_backward_hook() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.register_backward_hook"]], "register_buffer() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.register_buffer"]], "register_for_auto_class() (lambeq.bobcat.bertforchartclassification class method)": [[32, "lambeq.bobcat.BertForChartClassification.register_for_auto_class"]], "register_forward_hook() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.register_forward_hook"]], "register_forward_pre_hook() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.register_forward_pre_hook"]], "register_full_backward_hook() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.register_full_backward_hook"]], "register_full_backward_pre_hook() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.register_load_state_dict_post_hook"]], "register_module() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.register_module"]], "register_parameter() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.register_parameter"]], "register_state_dict_pre_hook() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.register_state_dict_pre_hook"]], "relation (lambeq.bobcat.category attribute)": [[32, "lambeq.bobcat.Category.relation"]], "requires_grad_() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.requires_grad_"]], "reset_memory_hooks_state() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.reset_memory_hooks_state"]], "resize_position_embeddings() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.resize_position_embeddings"]], "resize_token_embeddings() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.resize_token_embeddings"]], "result (lambeq.bobcat.category attribute)": [[32, "lambeq.bobcat.Category.result"]], "retrieve_modules_from_names() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.retrieve_modules_from_names"]], "reverse_bettertransformer() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.reverse_bettertransformer"]], "right (lambeq.bobcat.parsetree attribute)": [[32, "lambeq.bobcat.ParseTree.right"]], "rule (lambeq.bobcat.parsetree attribute)": [[32, "lambeq.bobcat.ParseTree.rule"]], "sample() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.sample"]], "save() (lambeq.bobcat.grammar method)": [[32, "lambeq.bobcat.Grammar.save"]], "save_pretrained() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.save_pretrained"]], "score (lambeq.bobcat.parsetree attribute)": [[32, "lambeq.bobcat.ParseTree.score"]], "set_extra_state() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.set_extra_state"]], "set_input_embeddings() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.set_input_embeddings"]], "set_root_cats() (lambeq.bobcat.chartparser method)": [[32, "lambeq.bobcat.ChartParser.set_root_cats"]], "share_memory() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.share_memory"]], "slash() (lambeq.bobcat.category method)": [[32, "lambeq.bobcat.Category.slash"]], "span_scores (lambeq.bobcat.sentence attribute)": [[32, "lambeq.bobcat.Sentence.span_scores"]], "state_dict() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.state_dict"]], "supports_gradient_checkpointing (lambeq.bobcat.bertforchartclassification attribute)": [[32, "lambeq.bobcat.BertForChartClassification.supports_gradient_checkpointing"]], "tie_weights() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.tie_weights"]], "to() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.to"]], "to_bettertransformer() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.to_bettertransformer"]], "to_empty() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.to_empty"]], "train() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.train"]], "training (lambeq.bobcat.bertforchartclassification attribute)": [[32, "lambeq.bobcat.BertForChartClassification.training"]], "translate() (lambeq.bobcat.category method)": [[32, "lambeq.bobcat.Category.translate"]], "type() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.type"]], "type_changing_rules (lambeq.bobcat.grammar attribute)": [[32, "lambeq.bobcat.Grammar.type_changing_rules"]], "type_raising_dep_var (lambeq.bobcat.category attribute)": [[32, "lambeq.bobcat.Category.type_raising_dep_var"]], "type_raising_rules (lambeq.bobcat.grammar attribute)": [[32, "lambeq.bobcat.Grammar.type_raising_rules"]], "unfilled_deps (lambeq.bobcat.parsetree attribute)": [[32, "lambeq.bobcat.ParseTree.unfilled_deps"]], "var (lambeq.bobcat.category attribute)": [[32, "lambeq.bobcat.Category.var"]], "var_map (lambeq.bobcat.parsetree attribute)": [[32, "lambeq.bobcat.ParseTree.var_map"]], "variable (lambeq.bobcat.parsetree property)": [[32, "lambeq.bobcat.ParseTree.variable"]], "word (lambeq.bobcat.parsetree property)": [[32, "lambeq.bobcat.ParseTree.word"]], "words (lambeq.bobcat.sentence attribute)": [[32, "lambeq.bobcat.Sentence.words"]], "xpu() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.xpu"]], "zero_grad() (lambeq.bobcat.bertforchartclassification method)": [[32, "lambeq.bobcat.BertForChartClassification.zero_grad"]], "ascii_char_set (lambeq.pregroups.textdiagramprinter attribute)": [[33, "lambeq.pregroups.TextDiagramPrinter.ASCII_CHAR_SET"]], "textdiagramprinter (class in lambeq.pregroups)": [[33, "lambeq.pregroups.TextDiagramPrinter"]], "unicode_char_set (lambeq.pregroups.textdiagramprinter attribute)": [[33, "lambeq.pregroups.TextDiagramPrinter.UNICODE_CHAR_SET"]], "__init__() (lambeq.pregroups.textdiagramprinter method)": [[33, "lambeq.pregroups.TextDiagramPrinter.__init__"]], "create_pregroup_diagram() (in module lambeq.pregroups)": [[33, "lambeq.pregroups.create_pregroup_diagram"]], "diagram2str() (in module lambeq.pregroups)": [[33, "lambeq.pregroups.diagram2str"]], "diagram2str() (lambeq.pregroups.textdiagramprinter method)": [[33, "lambeq.pregroups.TextDiagramPrinter.diagram2str"]], "draw() (in module lambeq.pregroups)": [[33, "lambeq.pregroups.draw"]], "draw_layer() (lambeq.pregroups.textdiagramprinter method)": [[33, "lambeq.pregroups.TextDiagramPrinter.draw_layer"]], "is_pregroup_diagram() (in module lambeq.pregroups)": [[33, "lambeq.pregroups.is_pregroup_diagram"]], "lambeq.pregroups": [[33, "module-lambeq.pregroups"]], "remove_cups() (in module lambeq.pregroups)": [[33, "lambeq.pregroups.remove_cups"]], "remove_swaps() (in module lambeq.pregroups)": [[33, "lambeq.pregroups.remove_swaps"]], "coordinationrewriterule (class in lambeq.rewrite)": [[34, "lambeq.rewrite.CoordinationRewriteRule"]], "curryrewriterule (class in lambeq.rewrite)": [[34, "lambeq.rewrite.CurryRewriteRule"]], "rewriterule (class in lambeq.rewrite)": [[34, "lambeq.rewrite.RewriteRule"]], "rewriter (class in lambeq.rewrite)": [[34, "lambeq.rewrite.Rewriter"]], "simplerewriterule (class in lambeq.rewrite)": [[34, "lambeq.rewrite.SimpleRewriteRule"]], "__call__() (lambeq.rewrite.coordinationrewriterule method)": [[34, "lambeq.rewrite.CoordinationRewriteRule.__call__"]], "__call__() (lambeq.rewrite.curryrewriterule method)": [[34, "lambeq.rewrite.CurryRewriteRule.__call__"]], "__call__() (lambeq.rewrite.rewriterule method)": [[34, "lambeq.rewrite.RewriteRule.__call__"]], "__call__() (lambeq.rewrite.rewriter method)": [[34, "lambeq.rewrite.Rewriter.__call__"]], "__call__() (lambeq.rewrite.simplerewriterule method)": [[34, "lambeq.rewrite.SimpleRewriteRule.__call__"]], "__init__() (lambeq.rewrite.coordinationrewriterule method)": [[34, "lambeq.rewrite.CoordinationRewriteRule.__init__"]], "__init__() (lambeq.rewrite.curryrewriterule method)": [[34, "lambeq.rewrite.CurryRewriteRule.__init__"]], "__init__() (lambeq.rewrite.rewriter method)": [[34, "lambeq.rewrite.Rewriter.__init__"]], "__init__() (lambeq.rewrite.simplerewriterule method)": [[34, "lambeq.rewrite.SimpleRewriteRule.__init__"]], "add_rules() (lambeq.rewrite.rewriter method)": [[34, "lambeq.rewrite.Rewriter.add_rules"]], "available_rules() (lambeq.rewrite.rewriter class method)": [[34, "lambeq.rewrite.Rewriter.available_rules"]], "lambeq.rewrite": [[34, "module-lambeq.rewrite"]], "matches() (lambeq.rewrite.coordinationrewriterule method)": [[34, "lambeq.rewrite.CoordinationRewriteRule.matches"]], "matches() (lambeq.rewrite.curryrewriterule method)": [[34, "lambeq.rewrite.CurryRewriteRule.matches"]], "matches() (lambeq.rewrite.rewriterule method)": [[34, "lambeq.rewrite.RewriteRule.matches"]], "matches() (lambeq.rewrite.simplerewriterule method)": [[34, "lambeq.rewrite.SimpleRewriteRule.matches"]], "placeholder() (lambeq.rewrite.simplerewriterule class method)": [[34, "lambeq.rewrite.SimpleRewriteRule.placeholder"]], "rewrite() (lambeq.rewrite.coordinationrewriterule method)": [[34, "lambeq.rewrite.CoordinationRewriteRule.rewrite"]], "rewrite() (lambeq.rewrite.curryrewriterule method)": [[34, "lambeq.rewrite.CurryRewriteRule.rewrite"]], "rewrite() (lambeq.rewrite.rewriterule method)": [[34, "lambeq.rewrite.RewriteRule.rewrite"]], "rewrite() (lambeq.rewrite.simplerewriterule method)": [[34, "lambeq.rewrite.SimpleRewriteRule.rewrite"]], "backward_application (lambeq.text2diagram.ccgrule attribute)": [[35, "lambeq.text2diagram.CCGRule.BACKWARD_APPLICATION"]], "backward_composition (lambeq.text2diagram.ccgrule attribute)": [[35, "lambeq.text2diagram.CCGRule.BACKWARD_COMPOSITION"]], "backward_crossed_composition (lambeq.text2diagram.ccgrule attribute)": [[35, "lambeq.text2diagram.CCGRule.BACKWARD_CROSSED_COMPOSITION"]], "backward_type_raising (lambeq.text2diagram.ccgrule attribute)": [[35, "lambeq.text2diagram.CCGRule.BACKWARD_TYPE_RAISING"]], "bobcatparseerror": [[35, "lambeq.text2diagram.BobcatParseError"], [51, "lambeq.BobcatParseError"]], "bobcatparser (class in lambeq.text2diagram)": [[35, "lambeq.text2diagram.BobcatParser"]], "ccgatomictype (class in lambeq.text2diagram)": [[35, "lambeq.text2diagram.CCGAtomicType"]], "ccgbankparseerror": [[35, "lambeq.text2diagram.CCGBankParseError"], [51, "lambeq.CCGBankParseError"]], "ccgbankparser (class in lambeq.text2diagram)": [[35, "lambeq.text2diagram.CCGBankParser"]], "ccgparser (class in lambeq.text2diagram)": [[35, "lambeq.text2diagram.CCGParser"]], "ccgrule (class in lambeq.text2diagram)": [[35, "lambeq.text2diagram.CCGRule"]], "ccgruleuseerror": [[35, "lambeq.text2diagram.CCGRuleUseError"], [51, "lambeq.CCGRuleUseError"]], "ccgtree (class in lambeq.text2diagram)": [[35, "lambeq.text2diagram.CCGTree"]], "conjunction (lambeq.text2diagram.ccgatomictype attribute)": [[35, "lambeq.text2diagram.CCGAtomicType.CONJUNCTION"]], "conjunction (lambeq.text2diagram.ccgrule attribute)": [[35, "lambeq.text2diagram.CCGRule.CONJUNCTION"]], "depccgparseerror": [[35, "lambeq.text2diagram.DepCCGParseError"], [51, "lambeq.DepCCGParseError"]], "depccgparser (class in lambeq.text2diagram)": [[35, "lambeq.text2diagram.DepCCGParser"]], "forward_application (lambeq.text2diagram.ccgrule attribute)": [[35, "lambeq.text2diagram.CCGRule.FORWARD_APPLICATION"]], "forward_composition (lambeq.text2diagram.ccgrule attribute)": [[35, "lambeq.text2diagram.CCGRule.FORWARD_COMPOSITION"]], "forward_crossed_composition (lambeq.text2diagram.ccgrule attribute)": [[35, "lambeq.text2diagram.CCGRule.FORWARD_CROSSED_COMPOSITION"]], "forward_type_raising (lambeq.text2diagram.ccgrule attribute)": [[35, "lambeq.text2diagram.CCGRule.FORWARD_TYPE_RAISING"]], "generalized_backward_composition (lambeq.text2diagram.ccgrule attribute)": [[35, "lambeq.text2diagram.CCGRule.GENERALIZED_BACKWARD_COMPOSITION"]], "generalized_backward_crossed_composition (lambeq.text2diagram.ccgrule attribute)": [[35, "lambeq.text2diagram.CCGRule.GENERALIZED_BACKWARD_CROSSED_COMPOSITION"]], "generalized_forward_composition (lambeq.text2diagram.ccgrule attribute)": [[35, "lambeq.text2diagram.CCGRule.GENERALIZED_FORWARD_COMPOSITION"]], "generalized_forward_crossed_composition (lambeq.text2diagram.ccgrule attribute)": [[35, "lambeq.text2diagram.CCGRule.GENERALIZED_FORWARD_CROSSED_COMPOSITION"]], "height": [[35, "term-HEIGHT"], [51, "term-HEIGHT"]], "height (lambeq.text2diagram.treereadermode attribute)": [[35, "lambeq.text2diagram.TreeReaderMode.HEIGHT"]], "lexical (lambeq.text2diagram.ccgrule attribute)": [[35, "lambeq.text2diagram.CCGRule.LEXICAL"]], "linearreader (class in lambeq.text2diagram)": [[35, "lambeq.text2diagram.LinearReader"]], "noun (lambeq.text2diagram.ccgatomictype attribute)": [[35, "lambeq.text2diagram.CCGAtomicType.NOUN"]], "noun_phrase (lambeq.text2diagram.ccgatomictype attribute)": [[35, "lambeq.text2diagram.CCGAtomicType.NOUN_PHRASE"]], "no_type": [[35, "term-NO_TYPE"], [51, "term-NO_TYPE"]], "no_type (lambeq.text2diagram.treereadermode attribute)": [[35, "lambeq.text2diagram.TreeReaderMode.NO_TYPE"]], "prepositional_phrase (lambeq.text2diagram.ccgatomictype attribute)": [[35, "lambeq.text2diagram.CCGAtomicType.PREPOSITIONAL_PHRASE"]], "punctuation (lambeq.text2diagram.ccgatomictype attribute)": [[35, "lambeq.text2diagram.CCGAtomicType.PUNCTUATION"]], "remove_punctuation_left (lambeq.text2diagram.ccgrule attribute)": [[35, "lambeq.text2diagram.CCGRule.REMOVE_PUNCTUATION_LEFT"]], "remove_punctuation_right (lambeq.text2diagram.ccgrule attribute)": [[35, "lambeq.text2diagram.CCGRule.REMOVE_PUNCTUATION_RIGHT"]], "rule_only": [[35, "term-RULE_ONLY"], [51, "term-RULE_ONLY"]], "rule_only (lambeq.text2diagram.treereadermode attribute)": [[35, "lambeq.text2diagram.TreeReaderMode.RULE_ONLY"]], "rule_type": [[35, "term-RULE_TYPE"], [51, "term-RULE_TYPE"]], "rule_type (lambeq.text2diagram.treereadermode attribute)": [[35, "lambeq.text2diagram.TreeReaderMode.RULE_TYPE"]], "reader (class in lambeq.text2diagram)": [[35, "lambeq.text2diagram.Reader"]], "sentence (lambeq.text2diagram.ccgatomictype attribute)": [[35, "lambeq.text2diagram.CCGAtomicType.SENTENCE"]], "treereader (class in lambeq.text2diagram)": [[35, "lambeq.text2diagram.TreeReader"]], "treereadermode (class in lambeq.text2diagram)": [[35, "lambeq.text2diagram.TreeReaderMode"]], "unary (lambeq.text2diagram.ccgrule attribute)": [[35, "lambeq.text2diagram.CCGRule.UNARY"]], "unknown (lambeq.text2diagram.ccgrule attribute)": [[35, "lambeq.text2diagram.CCGRule.UNKNOWN"]], "webparseerror": [[35, "lambeq.text2diagram.WebParseError"], [51, "lambeq.WebParseError"]], "webparser (class in lambeq.text2diagram)": [[35, "lambeq.text2diagram.WebParser"]], "__call__() (lambeq.text2diagram.ccgrule method)": [[35, "lambeq.text2diagram.CCGRule.__call__"]], "__init__() (lambeq.text2diagram.bobcatparseerror method)": [[35, "lambeq.text2diagram.BobcatParseError.__init__"]], "__init__() (lambeq.text2diagram.bobcatparser method)": [[35, "lambeq.text2diagram.BobcatParser.__init__"]], "__init__() (lambeq.text2diagram.ccgbankparseerror method)": [[35, "lambeq.text2diagram.CCGBankParseError.__init__"]], "__init__() (lambeq.text2diagram.ccgbankparser method)": [[35, "lambeq.text2diagram.CCGBankParser.__init__"]], "__init__() (lambeq.text2diagram.ccgparser method)": [[35, "lambeq.text2diagram.CCGParser.__init__"]], "__init__() (lambeq.text2diagram.ccgruleuseerror method)": [[35, "lambeq.text2diagram.CCGRuleUseError.__init__"]], "__init__() (lambeq.text2diagram.ccgtree method)": [[35, "lambeq.text2diagram.CCGTree.__init__"]], "__init__() (lambeq.text2diagram.depccgparseerror method)": [[35, "lambeq.text2diagram.DepCCGParseError.__init__"]], "__init__() (lambeq.text2diagram.depccgparser method)": [[35, "lambeq.text2diagram.DepCCGParser.__init__"]], "__init__() (lambeq.text2diagram.linearreader method)": [[35, "lambeq.text2diagram.LinearReader.__init__"]], "__init__() (lambeq.text2diagram.treereader method)": [[35, "lambeq.text2diagram.TreeReader.__init__"]], "__init__() (lambeq.text2diagram.webparseerror method)": [[35, "lambeq.text2diagram.WebParseError.__init__"]], "__init__() (lambeq.text2diagram.webparser method)": [[35, "lambeq.text2diagram.WebParser.__init__"]], "args (lambeq.text2diagram.bobcatparseerror attribute)": [[35, "lambeq.text2diagram.BobcatParseError.args"]], "args (lambeq.text2diagram.ccgbankparseerror attribute)": [[35, "lambeq.text2diagram.CCGBankParseError.args"]], "args (lambeq.text2diagram.ccgruleuseerror attribute)": [[35, "lambeq.text2diagram.CCGRuleUseError.args"]], "args (lambeq.text2diagram.depccgparseerror attribute)": [[35, "lambeq.text2diagram.DepCCGParseError.args"]], "args (lambeq.text2diagram.webparseerror attribute)": [[35, "lambeq.text2diagram.WebParseError.args"]], "available_models() (lambeq.text2diagram.bobcatparser static method)": [[35, "lambeq.text2diagram.BobcatParser.available_models"]], "available_modes() (lambeq.text2diagram.treereader class method)": [[35, "lambeq.text2diagram.TreeReader.available_modes"]], "bag_of_words_reader (in module lambeq.text2diagram)": [[35, "lambeq.text2diagram.bag_of_words_reader"]], "characters_written (lambeq.text2diagram.webparseerror attribute)": [[35, "lambeq.text2diagram.WebParseError.characters_written"]], "check_match() (lambeq.text2diagram.ccgrule method)": [[35, "lambeq.text2diagram.CCGRule.check_match"]], "child (lambeq.text2diagram.ccgtree property)": [[35, "lambeq.text2diagram.CCGTree.child"]], "cups_reader (in module lambeq.text2diagram)": [[35, "lambeq.text2diagram.cups_reader"]], "deriv() (lambeq.text2diagram.ccgtree method)": [[35, "lambeq.text2diagram.CCGTree.deriv"]], "errno (lambeq.text2diagram.webparseerror attribute)": [[35, "lambeq.text2diagram.WebParseError.errno"]], "filename (lambeq.text2diagram.webparseerror attribute)": [[35, "lambeq.text2diagram.WebParseError.filename"]], "filename2 (lambeq.text2diagram.webparseerror attribute)": [[35, "lambeq.text2diagram.WebParseError.filename2"]], "from_json() (lambeq.text2diagram.ccgtree class method)": [[35, "lambeq.text2diagram.CCGTree.from_json"]], "infer_rule() (lambeq.text2diagram.ccgrule class method)": [[35, "lambeq.text2diagram.CCGRule.infer_rule"]], "lambeq.text2diagram": [[35, "module-lambeq.text2diagram"]], "left (lambeq.text2diagram.ccgtree property)": [[35, "lambeq.text2diagram.CCGTree.left"]], "right (lambeq.text2diagram.ccgtree property)": [[35, "lambeq.text2diagram.CCGTree.right"]], "section2diagrams() (lambeq.text2diagram.ccgbankparser method)": [[35, "lambeq.text2diagram.CCGBankParser.section2diagrams"]], "section2diagrams_gen() (lambeq.text2diagram.ccgbankparser method)": [[35, "lambeq.text2diagram.CCGBankParser.section2diagrams_gen"]], "section2trees() (lambeq.text2diagram.ccgbankparser method)": [[35, "lambeq.text2diagram.CCGBankParser.section2trees"]], "section2trees_gen() (lambeq.text2diagram.ccgbankparser method)": [[35, "lambeq.text2diagram.CCGBankParser.section2trees_gen"]], "sentence2diagram() (lambeq.text2diagram.bobcatparser method)": [[35, "lambeq.text2diagram.BobcatParser.sentence2diagram"]], "sentence2diagram() (lambeq.text2diagram.ccgbankparser method)": [[35, "lambeq.text2diagram.CCGBankParser.sentence2diagram"]], "sentence2diagram() (lambeq.text2diagram.ccgparser method)": [[35, "lambeq.text2diagram.CCGParser.sentence2diagram"]], "sentence2diagram() (lambeq.text2diagram.depccgparser method)": [[35, "lambeq.text2diagram.DepCCGParser.sentence2diagram"]], "sentence2diagram() (lambeq.text2diagram.linearreader method)": [[35, "lambeq.text2diagram.LinearReader.sentence2diagram"]], "sentence2diagram() (lambeq.text2diagram.reader method)": [[35, "lambeq.text2diagram.Reader.sentence2diagram"]], "sentence2diagram() (lambeq.text2diagram.treereader method)": [[35, "lambeq.text2diagram.TreeReader.sentence2diagram"]], "sentence2diagram() (lambeq.text2diagram.webparser method)": [[35, "lambeq.text2diagram.WebParser.sentence2diagram"]], "sentence2tree() (lambeq.text2diagram.bobcatparser method)": [[35, "lambeq.text2diagram.BobcatParser.sentence2tree"]], "sentence2tree() (lambeq.text2diagram.ccgbankparser method)": [[35, "lambeq.text2diagram.CCGBankParser.sentence2tree"]], "sentence2tree() (lambeq.text2diagram.ccgparser method)": [[35, "lambeq.text2diagram.CCGParser.sentence2tree"]], "sentence2tree() (lambeq.text2diagram.depccgparser method)": [[35, "lambeq.text2diagram.DepCCGParser.sentence2tree"]], "sentence2tree() (lambeq.text2diagram.webparser method)": [[35, "lambeq.text2diagram.WebParser.sentence2tree"]], "sentences2diagrams() (lambeq.text2diagram.bobcatparser method)": [[35, "lambeq.text2diagram.BobcatParser.sentences2diagrams"]], "sentences2diagrams() (lambeq.text2diagram.ccgbankparser method)": [[35, "lambeq.text2diagram.CCGBankParser.sentences2diagrams"]], "sentences2diagrams() (lambeq.text2diagram.ccgparser method)": [[35, "lambeq.text2diagram.CCGParser.sentences2diagrams"]], "sentences2diagrams() (lambeq.text2diagram.depccgparser method)": [[35, "lambeq.text2diagram.DepCCGParser.sentences2diagrams"]], "sentences2diagrams() (lambeq.text2diagram.linearreader method)": [[35, "lambeq.text2diagram.LinearReader.sentences2diagrams"]], "sentences2diagrams() (lambeq.text2diagram.reader method)": [[35, "lambeq.text2diagram.Reader.sentences2diagrams"]], "sentences2diagrams() (lambeq.text2diagram.treereader method)": [[35, "lambeq.text2diagram.TreeReader.sentences2diagrams"]], "sentences2diagrams() (lambeq.text2diagram.webparser method)": [[35, "lambeq.text2diagram.WebParser.sentences2diagrams"]], "sentences2trees() (lambeq.text2diagram.bobcatparser method)": [[35, "lambeq.text2diagram.BobcatParser.sentences2trees"]], "sentences2trees() (lambeq.text2diagram.ccgbankparser method)": [[35, "lambeq.text2diagram.CCGBankParser.sentences2trees"]], "sentences2trees() (lambeq.text2diagram.ccgparser method)": [[35, "lambeq.text2diagram.CCGParser.sentences2trees"]], "sentences2trees() (lambeq.text2diagram.depccgparser method)": [[35, "lambeq.text2diagram.DepCCGParser.sentences2trees"]], "sentences2trees() (lambeq.text2diagram.webparser method)": [[35, "lambeq.text2diagram.WebParser.sentences2trees"]], "spiders_reader (in module lambeq.text2diagram)": [[35, "lambeq.text2diagram.spiders_reader"]], "stairs_reader (in module lambeq.text2diagram)": [[35, "lambeq.text2diagram.stairs_reader"]], "strerror (lambeq.text2diagram.webparseerror attribute)": [[35, "lambeq.text2diagram.WebParseError.strerror"]], "symbol (lambeq.text2diagram.ccgrule property)": [[35, "lambeq.text2diagram.CCGRule.symbol"]], "text (lambeq.text2diagram.ccgtree property)": [[35, "lambeq.text2diagram.CCGTree.text"]], "to_biclosed_diagram() (lambeq.text2diagram.ccgtree method)": [[35, "lambeq.text2diagram.CCGTree.to_biclosed_diagram"]], "to_diagram() (lambeq.text2diagram.ccgtree method)": [[35, "lambeq.text2diagram.CCGTree.to_diagram"]], "to_json() (lambeq.text2diagram.ccgtree method)": [[35, "lambeq.text2diagram.CCGTree.to_json"]], "tree2diagram() (lambeq.text2diagram.treereader static method)": [[35, "lambeq.text2diagram.TreeReader.tree2diagram"]], "with_traceback() (lambeq.text2diagram.bobcatparseerror method)": [[35, "lambeq.text2diagram.BobcatParseError.with_traceback"]], "with_traceback() (lambeq.text2diagram.ccgbankparseerror method)": [[35, "lambeq.text2diagram.CCGBankParseError.with_traceback"]], "with_traceback() (lambeq.text2diagram.ccgruleuseerror method)": [[35, "lambeq.text2diagram.CCGRuleUseError.with_traceback"]], "with_traceback() (lambeq.text2diagram.depccgparseerror method)": [[35, "lambeq.text2diagram.DepCCGParseError.with_traceback"]], "with_traceback() (lambeq.text2diagram.webparseerror method)": [[35, "lambeq.text2diagram.WebParseError.with_traceback"]], "without_trivial_unary_rules() (lambeq.text2diagram.ccgtree method)": [[35, "lambeq.text2diagram.CCGTree.without_trivial_unary_rules"]], "word_sequence_reader (in module lambeq.text2diagram)": [[35, "lambeq.text2diagram.word_sequence_reader"]], "spacytokeniser (class in lambeq.tokeniser)": [[36, "lambeq.tokeniser.SpacyTokeniser"]], "tokeniser (class in lambeq.tokeniser)": [[36, "lambeq.tokeniser.Tokeniser"]], "__init__() (lambeq.tokeniser.spacytokeniser method)": [[36, "lambeq.tokeniser.SpacyTokeniser.__init__"]], "lambeq.tokeniser": [[36, "module-lambeq.tokeniser"]], "split_sentences() (lambeq.tokeniser.spacytokeniser method)": [[36, "lambeq.tokeniser.SpacyTokeniser.split_sentences"]], "split_sentences() (lambeq.tokeniser.tokeniser method)": [[36, "lambeq.tokeniser.Tokeniser.split_sentences"]], "tokenise_sentence() (lambeq.tokeniser.spacytokeniser method)": [[36, "lambeq.tokeniser.SpacyTokeniser.tokenise_sentence"]], "tokenise_sentence() (lambeq.tokeniser.tokeniser method)": [[36, "lambeq.tokeniser.Tokeniser.tokenise_sentence"]], "tokenise_sentences() (lambeq.tokeniser.spacytokeniser method)": [[36, "lambeq.tokeniser.SpacyTokeniser.tokenise_sentences"]], "tokenise_sentences() (lambeq.tokeniser.tokeniser method)": [[36, "lambeq.tokeniser.Tokeniser.tokenise_sentences"]], "binarycrossentropyloss (class in lambeq.training)": [[37, "lambeq.training.BinaryCrossEntropyLoss"]], "checkpoint (class in lambeq.training)": [[37, "lambeq.training.Checkpoint"]], "crossentropyloss (class in lambeq.training)": [[37, "lambeq.training.CrossEntropyLoss"]], "dataset (class in lambeq.training)": [[37, "lambeq.training.Dataset"]], "lossfunction (class in lambeq.training)": [[37, "lambeq.training.LossFunction"]], "mseloss (class in lambeq.training)": [[37, "lambeq.training.MSELoss"]], "model (class in lambeq.training)": [[37, "lambeq.training.Model"]], "numpymodel (class in lambeq.training)": [[37, "lambeq.training.NumpyModel"]], "optimizer (class in lambeq.training)": [[37, "lambeq.training.Optimizer"]], "pennylanemodel (class in lambeq.training)": [[37, "lambeq.training.PennyLaneModel"]], "pytorchmodel (class in lambeq.training)": [[37, "lambeq.training.PytorchModel"]], "pytorchtrainer (class in lambeq.training)": [[37, "lambeq.training.PytorchTrainer"]], "quantummodel (class in lambeq.training)": [[37, "lambeq.training.QuantumModel"]], "quantumtrainer (class in lambeq.training)": [[37, "lambeq.training.QuantumTrainer"]], "spsaoptimizer (class in lambeq.training)": [[37, "lambeq.training.SPSAOptimizer"]], "t_destination (lambeq.training.pennylanemodel attribute)": [[37, "lambeq.training.PennyLaneModel.T_destination"]], "t_destination (lambeq.training.pytorchmodel attribute)": [[37, "lambeq.training.PytorchModel.T_destination"]], "tketmodel (class in lambeq.training)": [[37, "lambeq.training.TketModel"]], "trainer (class in lambeq.training)": [[37, "lambeq.training.Trainer"]], "__call__() (lambeq.training.binarycrossentropyloss method)": [[37, "lambeq.training.BinaryCrossEntropyLoss.__call__"]], "__call__() (lambeq.training.crossentropyloss method)": [[37, "lambeq.training.CrossEntropyLoss.__call__"]], "__call__() (lambeq.training.lossfunction method)": [[37, "lambeq.training.LossFunction.__call__"]], "__call__() (lambeq.training.mseloss method)": [[37, "lambeq.training.MSELoss.__call__"]], "__call__() (lambeq.training.model method)": [[37, "lambeq.training.Model.__call__"]], "__call__() (lambeq.training.numpymodel method)": [[37, "lambeq.training.NumpyModel.__call__"]], "__call__() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.__call__"]], "__call__() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.__call__"]], "__call__() (lambeq.training.quantummodel method)": [[37, "lambeq.training.QuantumModel.__call__"]], "__call__() (lambeq.training.tketmodel method)": [[37, "lambeq.training.TketModel.__call__"]], "__init__() (lambeq.training.binarycrossentropyloss method)": [[37, "lambeq.training.BinaryCrossEntropyLoss.__init__"]], "__init__() (lambeq.training.checkpoint method)": [[37, "lambeq.training.Checkpoint.__init__"]], "__init__() (lambeq.training.crossentropyloss method)": [[37, "lambeq.training.CrossEntropyLoss.__init__"]], "__init__() (lambeq.training.dataset method)": [[37, "lambeq.training.Dataset.__init__"]], "__init__() (lambeq.training.lossfunction method)": [[37, "lambeq.training.LossFunction.__init__"]], "__init__() (lambeq.training.mseloss method)": [[37, "lambeq.training.MSELoss.__init__"]], "__init__() (lambeq.training.model method)": [[37, "lambeq.training.Model.__init__"]], "__init__() (lambeq.training.numpymodel method)": [[37, "lambeq.training.NumpyModel.__init__"]], "__init__() (lambeq.training.optimizer method)": [[37, "lambeq.training.Optimizer.__init__"]], "__init__() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.__init__"]], "__init__() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.__init__"]], "__init__() (lambeq.training.pytorchtrainer method)": [[37, "lambeq.training.PytorchTrainer.__init__"]], "__init__() (lambeq.training.quantummodel method)": [[37, "lambeq.training.QuantumModel.__init__"]], "__init__() (lambeq.training.quantumtrainer method)": [[37, "lambeq.training.QuantumTrainer.__init__"]], "__init__() (lambeq.training.spsaoptimizer method)": [[37, "lambeq.training.SPSAOptimizer.__init__"]], "__init__() (lambeq.training.tketmodel method)": [[37, "lambeq.training.TketModel.__init__"]], "__init__() (lambeq.training.trainer method)": [[37, "lambeq.training.Trainer.__init__"]], "add_many() (lambeq.training.checkpoint method)": [[37, "lambeq.training.Checkpoint.add_many"]], "add_module() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.add_module"]], "add_module() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.add_module"]], "apply() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.apply"]], "apply() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.apply"]], "backward() (lambeq.training.optimizer method)": [[37, "lambeq.training.Optimizer.backward"]], "backward() (lambeq.training.spsaoptimizer method)": [[37, "lambeq.training.SPSAOptimizer.backward"]], "bfloat16() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.bfloat16"]], "bfloat16() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.bfloat16"]], "buffers() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.buffers"]], "buffers() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.buffers"]], "calculate_loss() (lambeq.training.binarycrossentropyloss method)": [[37, "lambeq.training.BinaryCrossEntropyLoss.calculate_loss"]], "calculate_loss() (lambeq.training.crossentropyloss method)": [[37, "lambeq.training.CrossEntropyLoss.calculate_loss"]], "calculate_loss() (lambeq.training.lossfunction method)": [[37, "lambeq.training.LossFunction.calculate_loss"]], "calculate_loss() (lambeq.training.mseloss method)": [[37, "lambeq.training.MSELoss.calculate_loss"]], "call_super_init (lambeq.training.pennylanemodel attribute)": [[37, "lambeq.training.PennyLaneModel.call_super_init"]], "call_super_init (lambeq.training.pytorchmodel attribute)": [[37, "lambeq.training.PytorchModel.call_super_init"]], "children() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.children"]], "children() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.children"]], "cpu() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.cpu"]], "cpu() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.cpu"]], "cuda() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.cuda"]], "cuda() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.cuda"]], "double() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.double"]], "double() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.double"]], "dump_patches (lambeq.training.pennylanemodel attribute)": [[37, "lambeq.training.PennyLaneModel.dump_patches"]], "dump_patches (lambeq.training.pytorchmodel attribute)": [[37, "lambeq.training.PytorchModel.dump_patches"]], "eval() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.eval"]], "eval() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.eval"]], "extra_repr() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.extra_repr"]], "extra_repr() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.extra_repr"]], "fit() (lambeq.training.pytorchtrainer method)": [[37, "lambeq.training.PytorchTrainer.fit"]], "fit() (lambeq.training.quantumtrainer method)": [[37, "lambeq.training.QuantumTrainer.fit"]], "fit() (lambeq.training.trainer method)": [[37, "lambeq.training.Trainer.fit"]], "float() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.float"]], "float() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.float"]], "forward() (lambeq.training.model method)": [[37, "lambeq.training.Model.forward"]], "forward() (lambeq.training.numpymodel method)": [[37, "lambeq.training.NumpyModel.forward"]], "forward() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.forward"]], "forward() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.forward"]], "forward() (lambeq.training.quantummodel method)": [[37, "lambeq.training.QuantumModel.forward"]], "forward() (lambeq.training.tketmodel method)": [[37, "lambeq.training.TketModel.forward"]], "from_checkpoint() (lambeq.training.model class method)": [[37, "lambeq.training.Model.from_checkpoint"]], "from_checkpoint() (lambeq.training.numpymodel class method)": [[37, "lambeq.training.NumpyModel.from_checkpoint"]], "from_checkpoint() (lambeq.training.pennylanemodel class method)": [[37, "lambeq.training.PennyLaneModel.from_checkpoint"]], "from_checkpoint() (lambeq.training.pytorchmodel class method)": [[37, "lambeq.training.PytorchModel.from_checkpoint"]], "from_checkpoint() (lambeq.training.quantummodel class method)": [[37, "lambeq.training.QuantumModel.from_checkpoint"]], "from_checkpoint() (lambeq.training.tketmodel class method)": [[37, "lambeq.training.TketModel.from_checkpoint"]], "from_diagrams() (lambeq.training.model class method)": [[37, "lambeq.training.Model.from_diagrams"]], "from_diagrams() (lambeq.training.numpymodel class method)": [[37, "lambeq.training.NumpyModel.from_diagrams"]], "from_diagrams() (lambeq.training.pennylanemodel class method)": [[37, "lambeq.training.PennyLaneModel.from_diagrams"]], "from_diagrams() (lambeq.training.pytorchmodel class method)": [[37, "lambeq.training.PytorchModel.from_diagrams"]], "from_diagrams() (lambeq.training.quantummodel class method)": [[37, "lambeq.training.QuantumModel.from_diagrams"]], "from_diagrams() (lambeq.training.tketmodel class method)": [[37, "lambeq.training.TketModel.from_diagrams"]], "from_file() (lambeq.training.checkpoint class method)": [[37, "lambeq.training.Checkpoint.from_file"]], "get() (lambeq.training.checkpoint method)": [[37, "lambeq.training.Checkpoint.get"]], "get_buffer() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.get_buffer"]], "get_buffer() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.get_buffer"]], "get_diagram_output() (lambeq.training.model method)": [[37, "lambeq.training.Model.get_diagram_output"]], "get_diagram_output() (lambeq.training.numpymodel method)": [[37, "lambeq.training.NumpyModel.get_diagram_output"]], "get_diagram_output() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.get_diagram_output"]], "get_diagram_output() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.get_diagram_output"]], "get_diagram_output() (lambeq.training.quantummodel method)": [[37, "lambeq.training.QuantumModel.get_diagram_output"]], "get_diagram_output() (lambeq.training.tketmodel method)": [[37, "lambeq.training.TketModel.get_diagram_output"]], "get_extra_state() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.get_extra_state"]], "get_extra_state() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.get_extra_state"]], "get_parameter() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.get_parameter"]], "get_parameter() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.get_parameter"]], "get_submodule() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.get_submodule"]], "get_submodule() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.get_submodule"]], "half() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.half"]], "half() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.half"]], "initialise_weights() (lambeq.training.model method)": [[37, "lambeq.training.Model.initialise_weights"]], "initialise_weights() (lambeq.training.numpymodel method)": [[37, "lambeq.training.NumpyModel.initialise_weights"]], "initialise_weights() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.initialise_weights"]], "initialise_weights() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.initialise_weights"]], "initialise_weights() (lambeq.training.quantummodel method)": [[37, "lambeq.training.QuantumModel.initialise_weights"]], "initialise_weights() (lambeq.training.tketmodel method)": [[37, "lambeq.training.TketModel.initialise_weights"]], "ipu() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.ipu"]], "ipu() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.ipu"]], "items() (lambeq.training.checkpoint method)": [[37, "lambeq.training.Checkpoint.items"]], "keys() (lambeq.training.checkpoint method)": [[37, "lambeq.training.Checkpoint.keys"]], "lambeq.training": [[37, "module-lambeq.training"]], "load() (lambeq.training.model method)": [[37, "lambeq.training.Model.load"]], "load() (lambeq.training.numpymodel method)": [[37, "lambeq.training.NumpyModel.load"]], "load() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.load"]], "load() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.load"]], "load() (lambeq.training.quantummodel method)": [[37, "lambeq.training.QuantumModel.load"]], "load() (lambeq.training.tketmodel method)": [[37, "lambeq.training.TketModel.load"]], "load_state_dict() (lambeq.training.optimizer method)": [[37, "lambeq.training.Optimizer.load_state_dict"]], "load_state_dict() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.load_state_dict"]], "load_state_dict() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.load_state_dict"]], "load_state_dict() (lambeq.training.spsaoptimizer method)": [[37, "lambeq.training.SPSAOptimizer.load_state_dict"]], "load_training_checkpoint() (lambeq.training.pytorchtrainer method)": [[37, "lambeq.training.PytorchTrainer.load_training_checkpoint"]], "load_training_checkpoint() (lambeq.training.quantumtrainer method)": [[37, "lambeq.training.QuantumTrainer.load_training_checkpoint"]], "load_training_checkpoint() (lambeq.training.trainer method)": [[37, "lambeq.training.Trainer.load_training_checkpoint"]], "model (lambeq.training.pytorchtrainer attribute)": [[37, "lambeq.training.PytorchTrainer.model"]], "model (lambeq.training.quantumtrainer attribute)": [[37, "lambeq.training.QuantumTrainer.model"]], "model (lambeq.training.spsaoptimizer attribute)": [[37, "lambeq.training.SPSAOptimizer.model"]], "modules() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.modules"]], "modules() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.modules"]], "named_buffers() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.named_buffers"]], "named_buffers() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.named_buffers"]], "named_children() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.named_children"]], "named_children() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.named_children"]], "named_modules() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.named_modules"]], "named_modules() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.named_modules"]], "named_parameters() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.named_parameters"]], "named_parameters() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.named_parameters"]], "parameters() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.parameters"]], "parameters() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.parameters"]], "register_backward_hook() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.register_backward_hook"]], "register_backward_hook() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.register_backward_hook"]], "register_buffer() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.register_buffer"]], "register_buffer() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.register_buffer"]], "register_forward_hook() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.register_forward_hook"]], "register_forward_hook() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.register_forward_hook"]], "register_forward_pre_hook() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.register_forward_pre_hook"]], "register_forward_pre_hook() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.register_forward_pre_hook"]], "register_full_backward_hook() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.register_full_backward_hook"]], "register_full_backward_hook() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.register_full_backward_hook"]], "register_full_backward_pre_hook() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.register_full_backward_pre_hook"]], "register_full_backward_pre_hook() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.register_load_state_dict_post_hook"]], "register_load_state_dict_post_hook() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.register_load_state_dict_post_hook"]], "register_module() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.register_module"]], "register_module() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.register_module"]], "register_parameter() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.register_parameter"]], "register_parameter() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.register_parameter"]], "register_state_dict_pre_hook() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.register_state_dict_pre_hook"]], "register_state_dict_pre_hook() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.register_state_dict_pre_hook"]], "requires_grad_() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.requires_grad_"]], "requires_grad_() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.requires_grad_"]], "save() (lambeq.training.model method)": [[37, "lambeq.training.Model.save"]], "save() (lambeq.training.numpymodel method)": [[37, "lambeq.training.NumpyModel.save"]], "save() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.save"]], "save() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.save"]], "save() (lambeq.training.quantummodel method)": [[37, "lambeq.training.QuantumModel.save"]], "save() (lambeq.training.tketmodel method)": [[37, "lambeq.training.TketModel.save"]], "save_checkpoint() (lambeq.training.pytorchtrainer method)": [[37, "lambeq.training.PytorchTrainer.save_checkpoint"]], "save_checkpoint() (lambeq.training.quantumtrainer method)": [[37, "lambeq.training.QuantumTrainer.save_checkpoint"]], "save_checkpoint() (lambeq.training.trainer method)": [[37, "lambeq.training.Trainer.save_checkpoint"]], "set_extra_state() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.set_extra_state"]], "set_extra_state() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.set_extra_state"]], "share_memory() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.share_memory"]], "share_memory() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.share_memory"]], "shuffle_data() (lambeq.training.dataset static method)": [[37, "lambeq.training.Dataset.shuffle_data"]], "state_dict() (lambeq.training.optimizer method)": [[37, "lambeq.training.Optimizer.state_dict"]], "state_dict() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.state_dict"]], "state_dict() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.state_dict"]], "state_dict() (lambeq.training.spsaoptimizer method)": [[37, "lambeq.training.SPSAOptimizer.state_dict"]], "step() (lambeq.training.optimizer method)": [[37, "lambeq.training.Optimizer.step"]], "step() (lambeq.training.spsaoptimizer method)": [[37, "lambeq.training.SPSAOptimizer.step"]], "symbols (lambeq.training.pennylanemodel attribute)": [[37, "lambeq.training.PennyLaneModel.symbols"]], "symbols (lambeq.training.pytorchmodel attribute)": [[37, "lambeq.training.PytorchModel.symbols"]], "symbols (lambeq.training.tketmodel attribute)": [[37, "lambeq.training.TketModel.symbols"]], "to() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.to"]], "to() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.to"]], "to_empty() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.to_empty"]], "to_empty() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.to_empty"]], "to_file() (lambeq.training.checkpoint method)": [[37, "lambeq.training.Checkpoint.to_file"]], "train() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.train"]], "train() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.train"]], "training (lambeq.training.pennylanemodel attribute)": [[37, "lambeq.training.PennyLaneModel.training"]], "training (lambeq.training.pytorchmodel attribute)": [[37, "lambeq.training.PytorchModel.training"]], "training_step() (lambeq.training.pytorchtrainer method)": [[37, "lambeq.training.PytorchTrainer.training_step"]], "training_step() (lambeq.training.quantumtrainer method)": [[37, "lambeq.training.QuantumTrainer.training_step"]], "training_step() (lambeq.training.trainer method)": [[37, "lambeq.training.Trainer.training_step"]], "type() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.type"]], "type() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.type"]], "update_hyper_params() (lambeq.training.spsaoptimizer method)": [[37, "lambeq.training.SPSAOptimizer.update_hyper_params"]], "validation_step() (lambeq.training.pytorchtrainer method)": [[37, "lambeq.training.PytorchTrainer.validation_step"]], "validation_step() (lambeq.training.quantumtrainer method)": [[37, "lambeq.training.QuantumTrainer.validation_step"]], "validation_step() (lambeq.training.trainer method)": [[37, "lambeq.training.Trainer.validation_step"]], "values() (lambeq.training.checkpoint method)": [[37, "lambeq.training.Checkpoint.values"]], "weights (lambeq.training.numpymodel attribute)": [[37, "lambeq.training.NumpyModel.weights"]], "weights (lambeq.training.pennylanemodel attribute)": [[37, "lambeq.training.PennyLaneModel.weights"]], "weights (lambeq.training.pytorchmodel attribute)": [[37, "lambeq.training.PytorchModel.weights"]], "weights (lambeq.training.quantummodel attribute)": [[37, "lambeq.training.QuantumModel.weights"]], "weights (lambeq.training.tketmodel attribute)": [[37, "lambeq.training.TketModel.weights"]], "xpu() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.xpu"]], "xpu() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.xpu"]], "zero_grad() (lambeq.training.optimizer method)": [[37, "lambeq.training.Optimizer.zero_grad"]], "zero_grad() (lambeq.training.pennylanemodel method)": [[37, "lambeq.training.PennyLaneModel.zero_grad"]], "zero_grad() (lambeq.training.pytorchmodel method)": [[37, "lambeq.training.PytorchModel.zero_grad"]], "zero_grad() (lambeq.training.spsaoptimizer method)": [[37, "lambeq.training.SPSAOptimizer.zero_grad"]], "atomictype (class in lambeq)": [[51, "lambeq.AtomicType"]], "backward_application (lambeq.ccgrule attribute)": [[51, "lambeq.CCGRule.BACKWARD_APPLICATION"]], "backward_composition (lambeq.ccgrule attribute)": [[51, "lambeq.CCGRule.BACKWARD_COMPOSITION"]], "backward_crossed_composition (lambeq.ccgrule attribute)": [[51, "lambeq.CCGRule.BACKWARD_CROSSED_COMPOSITION"]], "backward_type_raising (lambeq.ccgrule attribute)": [[51, "lambeq.CCGRule.BACKWARD_TYPE_RAISING"]], "bond_type (lambeq.mpsansatz attribute)": [[51, "lambeq.MPSAnsatz.BOND_TYPE"]], "baseansatz (class in lambeq)": [[51, "lambeq.BaseAnsatz"]], "binarycrossentropyloss (class in lambeq)": [[51, "lambeq.BinaryCrossEntropyLoss"]], "bobcatparser (class in lambeq)": [[51, "lambeq.BobcatParser"]], "ccgatomictype (class in lambeq)": [[51, "lambeq.CCGAtomicType"]], "ccgbankparser (class in lambeq)": [[51, "lambeq.CCGBankParser"]], "ccgparser (class in lambeq)": [[51, "lambeq.CCGParser"]], "ccgrule (class in lambeq)": [[51, "lambeq.CCGRule"]], "ccgtree (class in lambeq)": [[51, "lambeq.CCGTree"]], "conjunction (lambeq.atomictype attribute)": [[51, "lambeq.AtomicType.CONJUNCTION"]], "conjunction (lambeq.ccgatomictype attribute)": [[51, "lambeq.CCGAtomicType.CONJUNCTION"]], "conjunction (lambeq.ccgrule attribute)": [[51, "lambeq.CCGRule.CONJUNCTION"]], "checkpoint (class in lambeq)": [[51, "lambeq.Checkpoint"]], "circuitansatz (class in lambeq)": [[51, "lambeq.CircuitAnsatz"]], "coordinationrewriterule (class in lambeq)": [[51, "lambeq.CoordinationRewriteRule"]], "crossentropyloss (class in lambeq)": [[51, "lambeq.CrossEntropyLoss"]], "curryrewriterule (class in lambeq)": [[51, "lambeq.CurryRewriteRule"]], "dataset (class in lambeq)": [[51, "lambeq.Dataset"]], "depccgparser (class in lambeq)": [[51, "lambeq.DepCCGParser"]], "forward_application (lambeq.ccgrule attribute)": [[51, "lambeq.CCGRule.FORWARD_APPLICATION"]], "forward_composition (lambeq.ccgrule attribute)": [[51, "lambeq.CCGRule.FORWARD_COMPOSITION"]], "forward_crossed_composition (lambeq.ccgrule attribute)": [[51, "lambeq.CCGRule.FORWARD_CROSSED_COMPOSITION"]], "forward_type_raising (lambeq.ccgrule attribute)": [[51, "lambeq.CCGRule.FORWARD_TYPE_RAISING"]], "generalized_backward_composition (lambeq.ccgrule attribute)": [[51, "lambeq.CCGRule.GENERALIZED_BACKWARD_COMPOSITION"]], "generalized_backward_crossed_composition (lambeq.ccgrule attribute)": [[51, "lambeq.CCGRule.GENERALIZED_BACKWARD_CROSSED_COMPOSITION"]], "generalized_forward_composition (lambeq.ccgrule attribute)": [[51, "lambeq.CCGRule.GENERALIZED_FORWARD_COMPOSITION"]], "generalized_forward_crossed_composition (lambeq.ccgrule attribute)": [[51, "lambeq.CCGRule.GENERALIZED_FORWARD_CROSSED_COMPOSITION"]], "height (lambeq.treereadermode attribute)": [[51, "lambeq.TreeReaderMode.HEIGHT"]], "iqpansatz (class in lambeq)": [[51, "lambeq.IQPAnsatz"]], "lexical (lambeq.ccgrule attribute)": [[51, "lambeq.CCGRule.LEXICAL"]], "linearreader (class in lambeq)": [[51, "lambeq.LinearReader"]], "lossfunction (class in lambeq)": [[51, "lambeq.LossFunction"]], "mpsansatz (class in lambeq)": [[51, "lambeq.MPSAnsatz"]], "mseloss (class in lambeq)": [[51, "lambeq.MSELoss"]], "model (class in lambeq)": [[51, "lambeq.Model"]], "noun (lambeq.atomictype attribute)": [[51, "lambeq.AtomicType.NOUN"]], "noun (lambeq.ccgatomictype attribute)": [[51, "lambeq.CCGAtomicType.NOUN"]], "noun_phrase (lambeq.atomictype attribute)": [[51, "lambeq.AtomicType.NOUN_PHRASE"]], "noun_phrase (lambeq.ccgatomictype attribute)": [[51, "lambeq.CCGAtomicType.NOUN_PHRASE"]], "no_type (lambeq.treereadermode attribute)": [[51, "lambeq.TreeReaderMode.NO_TYPE"]], "numpymodel (class in lambeq)": [[51, "lambeq.NumpyModel"]], "optimizer (class in lambeq)": [[51, "lambeq.Optimizer"]], "prepositional_phrase (lambeq.atomictype attribute)": [[51, "lambeq.AtomicType.PREPOSITIONAL_PHRASE"]], "prepositional_phrase (lambeq.ccgatomictype attribute)": [[51, "lambeq.CCGAtomicType.PREPOSITIONAL_PHRASE"]], "progress (lambeq.verbositylevel attribute)": [[51, "lambeq.VerbosityLevel.PROGRESS"]], "punctuation (lambeq.atomictype attribute)": [[51, "lambeq.AtomicType.PUNCTUATION"]], "punctuation (lambeq.ccgatomictype attribute)": [[51, "lambeq.CCGAtomicType.PUNCTUATION"]], "pennylanemodel (class in lambeq)": [[51, "lambeq.PennyLaneModel"]], "pytorchmodel (class in lambeq)": [[51, "lambeq.PytorchModel"]], "pytorchtrainer (class in lambeq)": [[51, "lambeq.PytorchTrainer"]], "quantummodel (class in lambeq)": [[51, "lambeq.QuantumModel"]], "quantumtrainer (class in lambeq)": [[51, "lambeq.QuantumTrainer"]], "remove_punctuation_left (lambeq.ccgrule attribute)": [[51, "lambeq.CCGRule.REMOVE_PUNCTUATION_LEFT"]], "remove_punctuation_right (lambeq.ccgrule attribute)": [[51, "lambeq.CCGRule.REMOVE_PUNCTUATION_RIGHT"]], "rule_only (lambeq.treereadermode attribute)": [[51, "lambeq.TreeReaderMode.RULE_ONLY"]], "rule_type (lambeq.treereadermode attribute)": [[51, "lambeq.TreeReaderMode.RULE_TYPE"]], "reader (class in lambeq)": [[51, "lambeq.Reader"]], "rewriterule (class in lambeq)": [[51, "lambeq.RewriteRule"]], "rewriter (class in lambeq)": [[51, "lambeq.Rewriter"]], "sentence (lambeq.atomictype attribute)": [[51, "lambeq.AtomicType.SENTENCE"]], "sentence (lambeq.ccgatomictype attribute)": [[51, "lambeq.CCGAtomicType.SENTENCE"]], "spsaoptimizer (class in lambeq)": [[51, "lambeq.SPSAOptimizer"]], "suppress (lambeq.verbositylevel attribute)": [[51, "lambeq.VerbosityLevel.SUPPRESS"]], "sim14ansatz (class in lambeq)": [[51, "lambeq.Sim14Ansatz"]], "sim15ansatz (class in lambeq)": [[51, "lambeq.Sim15Ansatz"]], "simplerewriterule (class in lambeq)": [[51, "lambeq.SimpleRewriteRule"]], "spacytokeniser (class in lambeq)": [[51, "lambeq.SpacyTokeniser"]], "spideransatz (class in lambeq)": [[51, "lambeq.SpiderAnsatz"]], "stronglyentanglingansatz (class in lambeq)": [[51, "lambeq.StronglyEntanglingAnsatz"]], "symbol (class in lambeq)": [[51, "lambeq.Symbol"]], "text (lambeq.verbositylevel attribute)": [[51, "lambeq.VerbosityLevel.TEXT"]], "tensoransatz (class in lambeq)": [[51, "lambeq.TensorAnsatz"]], "tketmodel (class in lambeq)": [[51, "lambeq.TketModel"]], "tokeniser (class in lambeq)": [[51, "lambeq.Tokeniser"]], "trainer (class in lambeq)": [[51, "lambeq.Trainer"]], "treereader (class in lambeq)": [[51, "lambeq.TreeReader"]], "treereadermode (class in lambeq)": [[51, "lambeq.TreeReaderMode"]], "unary (lambeq.ccgrule attribute)": [[51, "lambeq.CCGRule.UNARY"]], "unknown (lambeq.ccgrule attribute)": [[51, "lambeq.CCGRule.UNKNOWN"]], "verbositylevel (class in lambeq)": [[51, "lambeq.VerbosityLevel"]], "webparser (class in lambeq)": [[51, "lambeq.WebParser"]], "__call__() (lambeq.baseansatz method)": [[51, "lambeq.BaseAnsatz.__call__"]], "__call__() (lambeq.ccgrule method)": [[51, "lambeq.CCGRule.__call__"]], "__call__() (lambeq.circuitansatz method)": [[51, "lambeq.CircuitAnsatz.__call__"]], "__call__() (lambeq.lossfunction method)": [[51, "lambeq.LossFunction.__call__"]], "__call__() (lambeq.mpsansatz method)": [[51, "lambeq.MPSAnsatz.__call__"]], "__call__() (lambeq.model method)": [[51, "lambeq.Model.__call__"]], "__call__() (lambeq.quantummodel method)": [[51, "lambeq.QuantumModel.__call__"]], "__call__() (lambeq.rewriterule method)": [[51, "lambeq.RewriteRule.__call__"]], "__call__() (lambeq.rewriter method)": [[51, "lambeq.Rewriter.__call__"]], "__call__() (lambeq.spideransatz method)": [[51, "lambeq.SpiderAnsatz.__call__"]], "__call__() (lambeq.tensoransatz method)": [[51, "lambeq.TensorAnsatz.__call__"]], "__init__() (lambeq.baseansatz method)": [[51, "lambeq.BaseAnsatz.__init__"]], "__init__() (lambeq.binarycrossentropyloss method)": [[51, "lambeq.BinaryCrossEntropyLoss.__init__"]], "__init__() (lambeq.bobcatparseerror method)": [[51, "lambeq.BobcatParseError.__init__"]], "__init__() (lambeq.bobcatparser method)": [[51, "lambeq.BobcatParser.__init__"]], "__init__() (lambeq.ccgbankparseerror method)": [[51, "lambeq.CCGBankParseError.__init__"]], "__init__() (lambeq.ccgbankparser method)": [[51, "lambeq.CCGBankParser.__init__"]], "__init__() (lambeq.ccgparser method)": [[51, "lambeq.CCGParser.__init__"]], "__init__() (lambeq.ccgruleuseerror method)": [[51, "lambeq.CCGRuleUseError.__init__"]], "__init__() (lambeq.ccgtree method)": [[51, "lambeq.CCGTree.__init__"]], "__init__() (lambeq.checkpoint method)": [[51, "lambeq.Checkpoint.__init__"]], "__init__() (lambeq.circuitansatz method)": [[51, "lambeq.CircuitAnsatz.__init__"]], "__init__() (lambeq.coordinationrewriterule method)": [[51, "lambeq.CoordinationRewriteRule.__init__"]], "__init__() (lambeq.crossentropyloss method)": [[51, "lambeq.CrossEntropyLoss.__init__"]], "__init__() (lambeq.curryrewriterule method)": [[51, "lambeq.CurryRewriteRule.__init__"]], "__init__() (lambeq.dataset method)": [[51, "lambeq.Dataset.__init__"]], "__init__() (lambeq.depccgparseerror method)": [[51, "lambeq.DepCCGParseError.__init__"]], "__init__() (lambeq.depccgparser method)": [[51, "lambeq.DepCCGParser.__init__"]], "__init__() (lambeq.iqpansatz method)": [[51, "lambeq.IQPAnsatz.__init__"]], "__init__() (lambeq.linearreader method)": [[51, "lambeq.LinearReader.__init__"]], "__init__() (lambeq.lossfunction method)": [[51, "lambeq.LossFunction.__init__"]], "__init__() (lambeq.mpsansatz method)": [[51, "lambeq.MPSAnsatz.__init__"]], "__init__() (lambeq.model method)": [[51, "lambeq.Model.__init__"]], "__init__() (lambeq.numpymodel method)": [[51, "lambeq.NumpyModel.__init__"]], "__init__() (lambeq.optimizer method)": [[51, "lambeq.Optimizer.__init__"]], "__init__() (lambeq.pennylanemodel method)": [[51, "lambeq.PennyLaneModel.__init__"]], "__init__() (lambeq.pytorchmodel method)": [[51, "lambeq.PytorchModel.__init__"]], "__init__() (lambeq.pytorchtrainer method)": [[51, "lambeq.PytorchTrainer.__init__"]], "__init__() (lambeq.quantummodel method)": [[51, "lambeq.QuantumModel.__init__"]], "__init__() (lambeq.quantumtrainer method)": [[51, "lambeq.QuantumTrainer.__init__"]], "__init__() (lambeq.rewriter method)": [[51, "lambeq.Rewriter.__init__"]], "__init__() (lambeq.spsaoptimizer method)": [[51, "lambeq.SPSAOptimizer.__init__"]], "__init__() (lambeq.sim14ansatz method)": [[51, "lambeq.Sim14Ansatz.__init__"]], "__init__() (lambeq.sim15ansatz method)": [[51, "lambeq.Sim15Ansatz.__init__"]], "__init__() (lambeq.simplerewriterule method)": [[51, "lambeq.SimpleRewriteRule.__init__"]], "__init__() (lambeq.spacytokeniser method)": [[51, "lambeq.SpacyTokeniser.__init__"]], "__init__() (lambeq.spideransatz method)": [[51, "lambeq.SpiderAnsatz.__init__"]], "__init__() (lambeq.stronglyentanglingansatz method)": [[51, "lambeq.StronglyEntanglingAnsatz.__init__"]], "__init__() (lambeq.tensoransatz method)": [[51, "lambeq.TensorAnsatz.__init__"]], "__init__() (lambeq.tketmodel method)": [[51, "lambeq.TketModel.__init__"]], "__init__() (lambeq.trainer method)": [[51, "lambeq.Trainer.__init__"]], "__init__() (lambeq.treereader method)": [[51, "lambeq.TreeReader.__init__"]], "__init__() (lambeq.webparseerror method)": [[51, "lambeq.WebParseError.__init__"]], "__init__() (lambeq.webparser method)": [[51, "lambeq.WebParser.__init__"]], "add_many() (lambeq.checkpoint method)": [[51, "lambeq.Checkpoint.add_many"]], "add_rules() (lambeq.rewriter method)": [[51, "lambeq.Rewriter.add_rules"]], "available_models() (lambeq.bobcatparser static method)": [[51, "lambeq.BobcatParser.available_models"]], "available_modes() (lambeq.treereader class method)": [[51, "lambeq.TreeReader.available_modes"]], "available_rules() (lambeq.rewriter class method)": [[51, "lambeq.Rewriter.available_rules"]], "backward() (lambeq.optimizer method)": [[51, "lambeq.Optimizer.backward"]], "backward() (lambeq.spsaoptimizer method)": [[51, "lambeq.SPSAOptimizer.backward"]], "calculate_loss() (lambeq.binarycrossentropyloss method)": [[51, "lambeq.BinaryCrossEntropyLoss.calculate_loss"]], "calculate_loss() (lambeq.crossentropyloss method)": [[51, "lambeq.CrossEntropyLoss.calculate_loss"]], "calculate_loss() (lambeq.lossfunction method)": [[51, "lambeq.LossFunction.calculate_loss"]], "calculate_loss() (lambeq.mseloss method)": [[51, "lambeq.MSELoss.calculate_loss"]], "check_match() (lambeq.ccgrule method)": [[51, "lambeq.CCGRule.check_match"]], "child (lambeq.ccgtree property)": [[51, "lambeq.CCGTree.child"]], "circuit() (lambeq.stronglyentanglingansatz method)": [[51, "lambeq.StronglyEntanglingAnsatz.circuit"]], "circuit_map (lambeq.pennylanemodel attribute)": [[51, "lambeq.PennyLaneModel.circuit_map"]], "create_pregroup_diagram() (in module lambeq)": [[51, "lambeq.create_pregroup_diagram"]], "default_assumptions (lambeq.symbol attribute)": [[51, "lambeq.Symbol.default_assumptions"]], "deriv() (lambeq.ccgtree method)": [[51, "lambeq.CCGTree.deriv"]], "diagram2str() (in module lambeq)": [[51, "lambeq.diagram2str"]], "directed_cod (lambeq.symbol attribute)": [[51, "lambeq.Symbol.directed_cod"]], "directed_dom (lambeq.symbol attribute)": [[51, "lambeq.Symbol.directed_dom"]], "fit() (lambeq.quantumtrainer method)": [[51, "lambeq.QuantumTrainer.fit"]], "fit() (lambeq.trainer method)": [[51, "lambeq.Trainer.fit"]], "forward() (lambeq.model method)": [[51, "lambeq.Model.forward"]], "forward() (lambeq.numpymodel method)": [[51, "lambeq.NumpyModel.forward"]], "forward() (lambeq.pennylanemodel method)": [[51, "lambeq.PennyLaneModel.forward"]], "forward() (lambeq.pytorchmodel method)": [[51, "lambeq.PytorchModel.forward"]], "forward() (lambeq.quantummodel method)": [[51, "lambeq.QuantumModel.forward"]], "forward() (lambeq.tketmodel method)": [[51, "lambeq.TketModel.forward"]], "from_checkpoint() (lambeq.model class method)": [[51, "lambeq.Model.from_checkpoint"]], "from_diagrams() (lambeq.model class method)": [[51, "lambeq.Model.from_diagrams"]], "from_diagrams() (lambeq.pennylanemodel class method)": [[51, "lambeq.PennyLaneModel.from_diagrams"]], "from_file() (lambeq.checkpoint class method)": [[51, "lambeq.Checkpoint.from_file"]], "from_json() (lambeq.ccgtree class method)": [[51, "lambeq.CCGTree.from_json"]], "get_diagram_output() (lambeq.model method)": [[51, "lambeq.Model.get_diagram_output"]], "get_diagram_output() (lambeq.numpymodel method)": [[51, "lambeq.NumpyModel.get_diagram_output"]], "get_diagram_output() (lambeq.pennylanemodel method)": [[51, "lambeq.PennyLaneModel.get_diagram_output"]], "get_diagram_output() (lambeq.pytorchmodel method)": [[51, "lambeq.PytorchModel.get_diagram_output"]], "get_diagram_output() (lambeq.quantummodel method)": [[51, "lambeq.QuantumModel.get_diagram_output"]], "get_diagram_output() (lambeq.tketmodel method)": [[51, "lambeq.TketModel.get_diagram_output"]], "has_value() (lambeq.verbositylevel class method)": [[51, "lambeq.VerbosityLevel.has_value"]], "infer_rule() (lambeq.ccgrule class method)": [[51, "lambeq.CCGRule.infer_rule"]], "initialise_weights() (lambeq.model method)": [[51, "lambeq.Model.initialise_weights"]], "initialise_weights() (lambeq.pennylanemodel method)": [[51, "lambeq.PennyLaneModel.initialise_weights"]], "initialise_weights() (lambeq.pytorchmodel method)": [[51, "lambeq.PytorchModel.initialise_weights"]], "initialise_weights() (lambeq.quantummodel method)": [[51, "lambeq.QuantumModel.initialise_weights"]], "is_pregroup_diagram() (in module lambeq)": [[51, "lambeq.is_pregroup_diagram"]], "lambdas (lambeq.numpymodel attribute)": [[51, "lambeq.NumpyModel.lambdas"]], "lambeq": [[51, "module-lambeq"]], "left (lambeq.ccgtree property)": [[51, "lambeq.CCGTree.left"]], "load() (lambeq.model method)": [[51, "lambeq.Model.load"]], "load_state_dict() (lambeq.optimizer method)": [[51, "lambeq.Optimizer.load_state_dict"]], "load_state_dict() (lambeq.spsaoptimizer method)": [[51, "lambeq.SPSAOptimizer.load_state_dict"]], "load_training_checkpoint() (lambeq.trainer method)": [[51, "lambeq.Trainer.load_training_checkpoint"]], "matches() (lambeq.coordinationrewriterule method)": [[51, "lambeq.CoordinationRewriteRule.matches"]], "matches() (lambeq.curryrewriterule method)": [[51, "lambeq.CurryRewriteRule.matches"]], "matches() (lambeq.rewriterule method)": [[51, "lambeq.RewriteRule.matches"]], "matches() (lambeq.simplerewriterule method)": [[51, "lambeq.SimpleRewriteRule.matches"]], "model (lambeq.pytorchtrainer attribute)": [[51, "lambeq.PytorchTrainer.model"]], "model (lambeq.quantumtrainer attribute)": [[51, "lambeq.QuantumTrainer.model"]], "model (lambeq.spsaoptimizer attribute)": [[51, "lambeq.SPSAOptimizer.model"]], "name (lambeq.symbol attribute)": [[51, "lambeq.Symbol.name"]], "ob_size() (lambeq.circuitansatz method)": [[51, "lambeq.CircuitAnsatz.ob_size"]], "params_shape() (lambeq.circuitansatz method)": [[51, "lambeq.CircuitAnsatz.params_shape"]], "params_shape() (lambeq.iqpansatz method)": [[51, "lambeq.IQPAnsatz.params_shape"]], "params_shape() (lambeq.sim14ansatz method)": [[51, "lambeq.Sim14Ansatz.params_shape"]], "params_shape() (lambeq.sim15ansatz method)": [[51, "lambeq.Sim15Ansatz.params_shape"]], "params_shape() (lambeq.stronglyentanglingansatz method)": [[51, "lambeq.StronglyEntanglingAnsatz.params_shape"]], "placeholder() (lambeq.simplerewriterule class method)": [[51, "lambeq.SimpleRewriteRule.placeholder"]], "project (lambeq.spsaoptimizer attribute)": [[51, "lambeq.SPSAOptimizer.project"]], "remove_cups() (in module lambeq)": [[51, "lambeq.remove_cups"]], "remove_swaps() (in module lambeq)": [[51, "lambeq.remove_swaps"]], "rewrite() (lambeq.coordinationrewriterule method)": [[51, "lambeq.CoordinationRewriteRule.rewrite"]], "rewrite() (lambeq.curryrewriterule method)": [[51, "lambeq.CurryRewriteRule.rewrite"]], "rewrite() (lambeq.rewriterule method)": [[51, "lambeq.RewriteRule.rewrite"]], "rewrite() (lambeq.simplerewriterule method)": [[51, "lambeq.SimpleRewriteRule.rewrite"]], "right (lambeq.ccgtree property)": [[51, "lambeq.CCGTree.right"]], "save() (lambeq.model method)": [[51, "lambeq.Model.save"]], "save_checkpoint() (lambeq.trainer method)": [[51, "lambeq.Trainer.save_checkpoint"]], "section2diagrams() (lambeq.ccgbankparser method)": [[51, "lambeq.CCGBankParser.section2diagrams"]], "section2diagrams_gen() (lambeq.ccgbankparser method)": [[51, "lambeq.CCGBankParser.section2diagrams_gen"]], "section2trees() (lambeq.ccgbankparser method)": [[51, "lambeq.CCGBankParser.section2trees"]], "section2trees_gen() (lambeq.ccgbankparser method)": [[51, "lambeq.CCGBankParser.section2trees_gen"]], "sentence2diagram() (lambeq.ccgparser method)": [[51, "lambeq.CCGParser.sentence2diagram"]], "sentence2diagram() (lambeq.depccgparser method)": [[51, "lambeq.DepCCGParser.sentence2diagram"]], "sentence2diagram() (lambeq.linearreader method)": [[51, "lambeq.LinearReader.sentence2diagram"]], "sentence2diagram() (lambeq.reader method)": [[51, "lambeq.Reader.sentence2diagram"]], "sentence2diagram() (lambeq.treereader method)": [[51, "lambeq.TreeReader.sentence2diagram"]], "sentence2tree() (lambeq.ccgparser method)": [[51, "lambeq.CCGParser.sentence2tree"]], "sentence2tree() (lambeq.depccgparser method)": [[51, "lambeq.DepCCGParser.sentence2tree"]], "sentences2diagrams() (lambeq.ccgparser method)": [[51, "lambeq.CCGParser.sentences2diagrams"]], "sentences2diagrams() (lambeq.reader method)": [[51, "lambeq.Reader.sentences2diagrams"]], "sentences2trees() (lambeq.bobcatparser method)": [[51, "lambeq.BobcatParser.sentences2trees"]], "sentences2trees() (lambeq.ccgbankparser method)": [[51, "lambeq.CCGBankParser.sentences2trees"]], "sentences2trees() (lambeq.ccgparser method)": [[51, "lambeq.CCGParser.sentences2trees"]], "sentences2trees() (lambeq.depccgparser method)": [[51, "lambeq.DepCCGParser.sentences2trees"]], "sentences2trees() (lambeq.webparser method)": [[51, "lambeq.WebParser.sentences2trees"]], "shuffle_data() (lambeq.dataset static method)": [[51, "lambeq.Dataset.shuffle_data"]], "size (lambeq.symbol property)": [[51, "lambeq.Symbol.size"]], "sort_key() (lambeq.symbol method)": [[51, "lambeq.Symbol.sort_key"]], "split_sentences() (lambeq.spacytokeniser method)": [[51, "lambeq.SpacyTokeniser.split_sentences"]], "split_sentences() (lambeq.tokeniser method)": [[51, "lambeq.Tokeniser.split_sentences"]], "state_dict() (lambeq.optimizer method)": [[51, "lambeq.Optimizer.state_dict"]], "state_dict() (lambeq.spsaoptimizer method)": [[51, "lambeq.SPSAOptimizer.state_dict"]], "step() (lambeq.optimizer method)": [[51, "lambeq.Optimizer.step"]], "step() (lambeq.spsaoptimizer method)": [[51, "lambeq.SPSAOptimizer.step"]], "symbol (lambeq.ccgrule property)": [[51, "lambeq.CCGRule.symbol"]], "symbols (lambeq.numpymodel attribute)": [[51, "lambeq.NumpyModel.symbols"]], "symbols (lambeq.pennylanemodel attribute)": [[51, "lambeq.PennyLaneModel.symbols"]], "symbols (lambeq.pytorchmodel attribute)": [[51, "lambeq.PytorchModel.symbols"]], "symbols (lambeq.quantummodel attribute)": [[51, "lambeq.QuantumModel.symbols"]], "symbols (lambeq.tketmodel attribute)": [[51, "lambeq.TketModel.symbols"]], "text (lambeq.ccgtree property)": [[51, "lambeq.CCGTree.text"]], "to_biclosed_diagram() (lambeq.ccgtree method)": [[51, "lambeq.CCGTree.to_biclosed_diagram"]], "to_diagram() (lambeq.ccgtree method)": [[51, "lambeq.CCGTree.to_diagram"]], "to_file() (lambeq.checkpoint method)": [[51, "lambeq.Checkpoint.to_file"]], "to_json() (lambeq.ccgtree method)": [[51, "lambeq.CCGTree.to_json"]], "tokenise_sentence() (lambeq.tokeniser method)": [[51, "lambeq.Tokeniser.tokenise_sentence"]], "tokenise_sentences() (lambeq.spacytokeniser method)": [[51, "lambeq.SpacyTokeniser.tokenise_sentences"]], "tokenise_sentences() (lambeq.tokeniser method)": [[51, "lambeq.Tokeniser.tokenise_sentences"]], "train_costs (lambeq.pytorchtrainer attribute)": [[51, "lambeq.PytorchTrainer.train_costs"]], "train_costs (lambeq.quantumtrainer attribute)": [[51, "lambeq.QuantumTrainer.train_costs"]], "train_epoch_costs (lambeq.pytorchtrainer attribute)": [[51, "lambeq.PytorchTrainer.train_epoch_costs"]], "train_epoch_costs (lambeq.quantumtrainer attribute)": [[51, "lambeq.QuantumTrainer.train_epoch_costs"]], "train_results (lambeq.pytorchtrainer attribute)": [[51, "lambeq.PytorchTrainer.train_results"]], "train_results (lambeq.quantumtrainer attribute)": [[51, "lambeq.QuantumTrainer.train_results"]], "training (lambeq.pennylanemodel attribute)": [[51, "lambeq.PennyLaneModel.training"]], "training (lambeq.pytorchmodel attribute)": [[51, "lambeq.PytorchModel.training"]], "training_step() (lambeq.pytorchtrainer method)": [[51, "lambeq.PytorchTrainer.training_step"]], "training_step() (lambeq.quantumtrainer method)": [[51, "lambeq.QuantumTrainer.training_step"]], "training_step() (lambeq.trainer method)": [[51, "lambeq.Trainer.training_step"]], "tree2diagram() (lambeq.treereader static method)": [[51, "lambeq.TreeReader.tree2diagram"]], "update_hyper_params() (lambeq.spsaoptimizer method)": [[51, "lambeq.SPSAOptimizer.update_hyper_params"]], "val_costs (lambeq.pytorchtrainer attribute)": [[51, "lambeq.PytorchTrainer.val_costs"]], "val_costs (lambeq.quantumtrainer attribute)": [[51, "lambeq.QuantumTrainer.val_costs"]], "val_results (lambeq.pytorchtrainer attribute)": [[51, "lambeq.PytorchTrainer.val_results"]], "val_results (lambeq.quantumtrainer attribute)": [[51, "lambeq.QuantumTrainer.val_results"]], "validation_step() (lambeq.pytorchtrainer method)": [[51, "lambeq.PytorchTrainer.validation_step"]], "validation_step() (lambeq.quantumtrainer method)": [[51, "lambeq.QuantumTrainer.validation_step"]], "validation_step() (lambeq.trainer method)": [[51, "lambeq.Trainer.validation_step"]], "weights (lambeq.numpymodel attribute)": [[51, "lambeq.NumpyModel.weights"]], "weights (lambeq.pennylanemodel attribute)": [[51, "lambeq.PennyLaneModel.weights"]], "weights (lambeq.pytorchmodel attribute)": [[51, "lambeq.PytorchModel.weights"]], "weights (lambeq.quantummodel attribute)": [[51, "lambeq.QuantumModel.weights"]], "weights (lambeq.tketmodel attribute)": [[51, "lambeq.TketModel.weights"]], "without_trivial_unary_rules() (lambeq.ccgtree method)": [[51, "lambeq.CCGTree.without_trivial_unary_rules"]], "zero_grad() (lambeq.optimizer method)": [[51, "lambeq.Optimizer.zero_grad"]]}})