{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "672c7718",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Classical pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bd8ae721-637c-47a0-b8a2-b966f2da492e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from discopy.tensor import Tensor\n",
    "import tensornetwork as tn\n",
    "import torch\n",
    "\n",
    "np = Tensor.np = torch\n",
    "tn.set_default_backend('pytorch')\n",
    "torch.array = torch.as_tensor\n",
    "torch.cuda.set_device(0)\n",
    "torch.manual_seed(0)\n",
    "torch.set_default_tensor_type(torch.cuda.FloatTensor)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f13b020a-1b9f-442a-8a3f-370cf57ac45c",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Input data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2dc5185b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_data(filename):\n",
    "    labels, sentences = [], []\n",
    "    with open(filename) as f:\n",
    "        for line in f:\n",
    "            labels.append(int(line[0]))\n",
    "            sentences.append(line[1:].strip())\n",
    "    return torch.as_tensor(labels, dtype=torch.float32), sentences\n",
    "\n",
    "\n",
    "train_labels, train_data = read_data('datasets/mc_train_data.txt')\n",
    "dev_labels, dev_data = read_data('datasets/mc_dev_data.txt')\n",
    "test_labels, test_data = read_data('datasets/mc_test_data.txt')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "color-reservoir",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Create diagrams"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "540e07d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "from lambeq.ccg2discocat import DepCCGParser\n",
    "\n",
    "reader = DepCCGParser(possible_root_cats=['S[dcl]'])\n",
    "\n",
    "train_diagrams = reader.sentences2diagrams(train_data)\n",
    "dev_diagrams = reader.sentences2diagrams(dev_data)\n",
    "test_diagrams = reader.sentences2diagrams(test_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "organizational-dominant",
   "metadata": {},
   "source": [
    "### Create circuits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4c55e29a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from discopy import Dim\n",
    "\n",
    "from lambeq.tensor import SpiderAnsatz\n",
    "from lambeq.core.types import AtomicType\n",
    "\n",
    "ansatz = SpiderAnsatz({AtomicType.NOUN: Dim(2),\n",
    "                       AtomicType.SENTENCE: Dim(2)})\n",
    "\n",
    "train_circuits = [ansatz(diagram) for diagram in train_diagrams]\n",
    "dev_circuits =  [ansatz(diagram) for diagram in dev_diagrams]\n",
    "test_circuits = [ansatz(diagram) for diagram in test_diagrams]\n",
    "\n",
    "train_circuits[0].draw()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a02dd1f",
   "metadata": {},
   "source": [
    "### Parameterise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "867c15fc-9695-42ff-959c-1415bc2a7653",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sympy import default_sort_key\n",
    "\n",
    "all_circuits = train_circuits + dev_circuits + test_circuits\n",
    "\n",
    "# sort the symbols since they are returned as a set\n",
    "parameters = sorted(\n",
    "    {s for circ in all_circuits for s in circ.free_symbols},\n",
    "    key=default_sort_key)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "exact-coating",
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_pred_fn(circuits):\n",
    "    def predict(params):\n",
    "        return torch.stack(\n",
    "            [c.lambdify(*parameters)(*params).eval(contractor=tn.contractors.auto).array\n",
    "             for c in circuits])\n",
    "    return predict\n",
    "\n",
    "\n",
    "train_pred_fn = make_pred_fn(train_circuits)\n",
    "dev_pred_fn = make_pred_fn(dev_circuits)\n",
    "test_pred_fn = make_pred_fn(test_circuits)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "architectural-mainland",
   "metadata": {},
   "source": [
    "### Train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1ef339b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def train(func, x0, niter, callback, optimizer_fn, lr):\n",
    "    x = [t.detach().requires_grad_() for t in x0]\n",
    "    optimizer = optimizer_fn(x, lr=lr)\n",
    "    for _ in range(niter):\n",
    "        loss = func(x)\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        with torch.no_grad():\n",
    "            callback(x)\n",
    "    return x\n",
    "\n",
    "\n",
    "def make_cost_fn(pred_fn, labels):\n",
    "    def cost_fn(params, **kwargs):\n",
    "        predictions = pred_fn(params)\n",
    "        \n",
    "        logits = predictions[:, 1] - predictions[:, 0]\n",
    "\n",
    "        loss_fn = torch.nn.BCEWithLogitsLoss()\n",
    "        cost = loss_fn(logits, labels)\n",
    "        costs.append(cost.item())\n",
    "        \n",
    "        with torch.no_grad():\n",
    "            acc = np.sum((logits > 0) == labels) / len(labels)\n",
    "            accuracies.append(acc.item())\n",
    "            \n",
    "        return cost\n",
    "\n",
    "    costs, accuracies = [], []\n",
    "    return cost_fn, costs, accuracies\n",
    "\n",
    "\n",
    "x0 = [torch.nn.init.uniform_(torch.empty(p.size)) for p in parameters]\n",
    "\n",
    "train_cost_fn, train_costs, train_accs = make_cost_fn(train_pred_fn, train_labels)\n",
    "dev_cost_fn, dev_costs, dev_accs = make_cost_fn(dev_pred_fn, dev_labels)\n",
    "\n",
    "result = train(train_cost_fn, x0, niter=20, callback=dev_cost_fn,\n",
    "               optimizer_fn=torch.optim.AdamW, lr=0.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "beautiful-jesus",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Show results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "connected-dominican",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test accuracy: 1.0\n"
     ]
    },
    {
     "data": {
      "image/png": "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s1HAKIAWLVoEK6+IZ8yM5PgYkuNjaJ2atM/ly3yO7cWlbC8uo6Bot+fiUrYXBZ6Ly8gvKqW41EdpmY8Sn6O0zEdpmdv1uqTMUeoLzCvzUVjio8xXhnMOB/icw+fzPzsXmP7da3D4pwF2/wq18zuV47f3UxIi55ogtV9SE0VZFKm1UkmtlcqhDQ/9w/vOOTYXbmZt/lryivMoLC1kR9kOikqLKCwrpLC08LfnwOui0iJ2lO6gxJXg8/nwOR9lroxSXyk+99t0+eedD9jZzrjfPe/Msuv9wHu7clKuQfrdyz0sU0kntDxhvz9TkRrREjrnngeeB3+fCo/jiHguOspISYglJUE39g11ar8kHJnZriJNDlwwO4usAZqXm04PzKtwGTOLAerg76AvIiIiEtaCWYTNBNqbWWsziwPOBibutsxE4MLA6zOAL9QfTERERCJB0E5HBvp4XQV8jH+IipeccwvN7C4gwzk3EXgReM3MlgFb8BdqIiIiImEvqH3CnHNTgCm7zbu93OtC4MxgZhAREREJRRpASERERMQDNe62RWaWDazaj4+kstuQF2Eu0vYXtM+RoKVzrsbfT0XtV6VE2j5H2v5C5O3zHtuvGleE7S8zywiH251UVqTtL2ifJXxF4s850vY50vYXInOf90SnI0VEREQ8oCJMRERExAORUIQ973WAahZp+wvaZwlfkfhzjrR9jrT9hcjc5wqFfZ8wERERkVAUCUfCREREREKOijARERERD6gIExEREfGAijARERERD6gIExEREfGAijARERERD6gIExEREfGAijARERERD6gIExEREfGAijARERERD6gIExEREfGAijARERERD6gIExEREfGAijARERERD6gIExEREfGAijARERERD6gIExEREfGAijARERERD6gIExEREfGAijARERERD6gIExEREfGAijARERERD6gIExEREfGAijARERERD8R4HWB/paamulatWnkdQ0Sq0axZszY55xp6neNgqf0SiTx7a79qXBHWqlUrMjIyvI4hItXIzFZ5naEqqP0SiTx7a790OlJERETEA0ErwszsJTPbaGYL9vC+mdnjZrbMzOaZWa9gZREREREJNcE8EjYeGLyX94cA7QOPUcAzQcwiIiIiElKC1ifMOfeNmbXayyIjgFedcw6YbmZ1zaypc25dsDJJGFr+Naz9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\n",
      "text/plain": [
       "<Figure size 720x432 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, ((ax_tl, ax_tr), (ax_bl, ax_br)) = plt.subplots(2, 2, sharex=True, sharey='row', figsize=(10, 6))\n",
    "ax_tl.set_title('Training set')\n",
    "ax_tr.set_title('Development set')\n",
    "ax_bl.set_xlabel('Iterations')\n",
    "ax_br.set_xlabel('Iterations')\n",
    "ax_bl.set_ylabel('Accuracy')\n",
    "ax_tl.set_ylabel('Loss')\n",
    "\n",
    "colours = iter(plt.rcParams['axes.prop_cycle'].by_key()['color'])\n",
    "ax_tl.plot(train_costs, color=next(colours))\n",
    "ax_bl.plot(train_accs, color=next(colours))\n",
    "ax_tr.plot(dev_costs, color=next(colours))\n",
    "ax_br.plot(dev_accs, color=next(colours))\n",
    "\n",
    "# print test accuracy\n",
    "test_cost_fn, _, test_accs = make_cost_fn(test_pred_fn, test_labels)\n",
    "test_cost_fn(result)\n",
    "print('Test accuracy:', test_accs[0])"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
