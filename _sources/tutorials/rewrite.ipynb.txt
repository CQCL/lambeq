{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Step 2. Diagram rewriting"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Syntactic derivations in pregroup form can become extremely complicated, which may lead to excessive use of hardware resources and prohibitively long training times. The purpose of the :py:mod:`~lambeq.rewrite` module is to provide a means to the user to address some of these problems, via :term:`rewriting rules <rewrite rule>` that simplify the :term:`string diagram`. As an example, consider again the sentence \"John walks in the park\".\n",
   "\n",
   ":download:`Download code <../_code/rewrite.ipynb>`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 792x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from lambeq import BobcatParser\n",
    "\n",
    "# Parse the sentence\n",
    "parser = BobcatParser(verbose='suppress')\n",
    "diagram = parser.sentence2diagram(\"John walks in the park\")\n",
    "\n",
    "diagram.draw(figsize=(11,5), fontsize=13)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Note that the representation of the preposition is a tensor of order 5 in the \"classical\" case, or a state of 5 quantum systems in the quantum case. Applying the ``prepositional_phrase`` :term:`rewriting rule <rewrite rule>` to the diagram takes advantage of the underlying :term:`compact-closed <compact closed category>` monoidal structure, by using a \":term:`cap`\" to bridge the discontinued subject noun wire within the preposition tensor. Furthermore, the ``determiner`` :term:`rewriting rule <rewrite rule>` will apply a :term:`cap` on type :math:`n \\cdot n^l`, eliminating completely the determiner \"the\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAyYAAAF2CAYAAACbJozsAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAjDklEQVR4nO3df5TddX3v+9ebhDCB/BQkoCIcAatgcZ2orQpVhGituA4takv9VYq/eu6ysbqqnKILeyuL5e9Wj9XiZdF6XN5e6r3WWrC9hgCH+usW2qP88CeFBEQIKiQhkIEkfO4fswNDksnPmfnMTB6PtT5rf2fvPTPvvcMevs/57r2nWmsBAADo6YDeAwAAAAgTAACgO2ECAAB0J0wAAIDuhAkAANCdMAEAALoTJgAAQHfCBAAA6E6YAAAA3QkTAACgO2ECAAB0J0wAAIDuhAkAANCdMAEAALoTJgAAQHfCBAAA6E6YAAAA3QkTAACgO2ECAAB0J0wAAIDuhAkAANCdMAEAALoTJgAAQHfCBAAA6E6YAAAA3QkTAACgO2ECAAB0J0wAAIDuhAkAANCdMAEAALoTJgAAQHfCBAAA6E6YAAAA3QkTAACgO2ECAAB0J0wAAIDuZvceYE/MnTv37uHh4SW95xgaGlqzcePGI3rPAQAAM8W0OmIyPDy8pLWWvVm33XZbkuSOO+7Yq88fvaZCHAEAwEwyrcJkR0499dRceOGFvccAAAD2wbQPEwAAYPqbUWFyww035LTTTsvixYvztKc9LRdeeGG2bNnyuOtcffXVOeGEEzJ//vy87GUvy1133fXoZcccc0wuuuiinH766Zk3b16e9axn5Zvf/OZk3wwAANjvzJgwWbduXV760pfmJS95Se6+++5cccUVufTSS/Pxj3/8cde77LLLcu211+bOO+/MAw88kAsuuOBxl1966aX55Cc/+ejX+73f+73JvBkAALBfmjFhcsUVV2TOnDl53/vel4MOOijPfOYzc9555+WSSy553PXe//7357DDDsuCBQvy2te+Ntdff/3jLn/b296WE088MbNmzcqb3/zm3HLLLVm3bt1k3hQAANjvzJgwueOOO3L00Uenqh4979hjj80dd9zxuOsdeeSRj24fcsghuf/++3d6eZLtrgMAAIyvGRMmRx11VFavXp3W2qPn3XrrrTnqqKM6TgUAAOyOGRMmZ5xxRh566KFcdNFFefjhh/PDH/4wH/rQh/KmN72p92gAAMAuzIgwqaosXLgwX/va13LllVdmyZIl+fVf//W88Y1vzLve9a7e4wEAALtQo5/6NNVVVdt23qVLl+Ztb3tb3va2t03mHGmt1a6vCQAA7I5pfcTkO9/5Tm666aY8//nP7z0KAACwD2b3HmBvnX322fn617+eiy66KM9+9rN7jwMAAOyDafVUrrlz5949PDy8pPccQ0NDazZu3HhE7zkAAGCmmFZhsq+q6hlJvtxae0bvWQAAgMdM69eYAAAAM4MwAQAAuhMmAABAd8IEAADoTphso6pWVdX5VbWyqjZU1U1V9cLecwEAwEwmTHbs3CTLkyxMsiLJ5/qOAwAAM5sw2bGLW2s3t9a2JLkkyXFVtbD3UAAAMFMJkx27a9T2A4PT+T0GAQCA/YEwAQAAuhMmAABAd8IEAADobnbvAaaa1tox23y8Kkl1GQYAAPYTwmSamzt37t3Dw8NLes/B9oaGhtZs3LjxiN5zAABMB8JkmhseHl7SWus9xri45pprsmzZsmzevDlJcs4552T27Nm55JJLOk+2d6pKMAIA7CavMQEAALoTJgAAQHfChH32pS99KU9/+tMf/fiCCy5IVeXWW29Nkvzrv/5rFi5cmPXr1+ess87KEUcckQULFmTp0qVZsWLFbn+fCy+8ME9/+tPz4x//OA899FDe+ta35vDDD8+CBQty/PHH54tf/OK43zYAACaHMGGfnXbaabn11ltz++23J0lWrFiR4447LldeeeWjH7/4xS/OAQcckLPOOis//vGP84tf/CK/+7u/m1e96lX52c9+ttOvv2nTppx77rn56le/mm9+85s5/vjj87nPfS7XXXddvv/972f9+vW56qqrcuKJJ074bQUAYGIIE/bZokWLsnTp0lx55ZVZv359br755rz3ve999GjIlVdemWXLlmXevHl5/etfn/nz5+fAAw/Mu9/97syZMyfXXXfdmF973bp1+Y3f+I1H4+Owww5LksyZMycbNmzI9773vWzevDlHHXVUTjjhhEm5vQAAjD9hwrhYtmxZrrzyylx99dV5wQtekFe84hW5+uqrs2HDhnzrW9/KsmXLsnHjxrz97W/P0572tCxYsCCLFi3Kfffdt9MjJv/yL/+Sb3zjG/nABz6QoaGhR89//etfnze/+c15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\n",
      "text/plain": [
       "<Figure size 792x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from lambeq import Rewriter\n",
    "\n",
    "# Apply rewrite rule for prepositional phrases\n",
    "\n",
    "rewriter = Rewriter(['prepositional_phrase', 'determiner'])\n",
    "rewritten_diagram = rewriter(diagram)\n",
    "\n",
    "rewritten_diagram.draw(figsize=(11,5), fontsize=13)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will now ask `lambeq` to normalise the diagram, by \"stretching\" the wires and re-arranging the boxes if required:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "normalised_diagram = rewritten_diagram.normal_form()\n",
    "normalised_diagram.draw(figsize=(9,4), fontsize=13)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the simplified diagram, the order of the preposition tensor is reduced by 2, which at least for a classical experiment, is a substantial improvement. Note also that the determiner is now eliminated, equating the meaning of the noun phrase \"the park\" with that of the noun \"park\"."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "These examples clearly demonstrate the flexibility of :term:`string diagrams <string diagram>` compared to simple :term:`tensor networks <tensor network>`, which was one of the main reasons for choosing them as ``lambeq``'s representation format. ``lambeq`` comes with a number of standard :term:`rewrite rules <rewrite rule>` covering auxiliary verbs, connectors, coordinators, adverbs, determiners, relative pronouns, and prepositional phrases."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "+--------------------------+--------------------------------------------------------------------------------+\n",
    "| Rewrite rule             | Description                                                                    |\n",
    "+==========================+================================================================================+\n",
    "| ``auxiliary``            | Removes auxiliary verbs (such as \"do\") by replacing them with caps.            |\n",
    "+--------------------------+--------------------------------------------------------------------------------+\n",
    "| ``connector``            | Removes sentence connectors (such as \"that\") by replacing them with caps.      |\n",
    "+--------------------------+--------------------------------------------------------------------------------+\n",
    "| ``coordination``         | Simplifies \"and\" by replacing it with a layer of interleaving spiders.         |\n",
    "+--------------------------+--------------------------------------------------------------------------------+\n",
    "| ``determiner``           | Removes determiners (such as \"the\") by replacing them with caps.               |\n",
    "+--------------------------+--------------------------------------------------------------------------------+\n",
    "| ``object_rel_pronoun``   | Simplifies relative pronouns (such as \"that\") using cups, spiders and a loop.  |\n",
    "|                          |                                                                                |\n",
    "| ``subject_rel_pronoun``  |                                                                                |\n",
    "+--------------------------+--------------------------------------------------------------------------------+\n",
    "| ``postadverb``           | Simplifies adverbs by passing through the noun wire transparently using a cap. |\n",
    "|                          |                                                                                |\n",
    "| ``preadverb``            |                                                                                |\n",
    "+--------------------------+--------------------------------------------------------------------------------+\n",
    "| ``prepositional_phrase`` | Simplifies prepositions by passing through the noun wire using a cap.          |\n",
    "+--------------------------+--------------------------------------------------------------------------------+"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. rubric:: See also:\n",
    "\n",
    "- :ref:`lambeq.rewrite package <api_rewrite>`\n",
    "- `Example notebook rewrite.ipynb <../examples/rewrite.ipynb>`_\n",
    "- `DisCoCat in DisCoPy <./discocat.ipynb>`_\n",
    "- `Extending lambeq <./extend-lambeq.ipynb>`_"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
