{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DisCoCat in DisCoPy"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "In the previous tutorial, we learnt the basics of :term:`monoidal categories <monoidal category>` and how to represent them in :term:`DisCoPy`. In this tutorial, we look at the `Distributional Compositional Categorical` model [CSC2010]_, which uses functors to map diagrams from the `rigid category <monoidal.ipynb#Rigid-monoidal-categories>`_ of `pregroup grammars <../string_diagrams.rst#Pregroup-grammars>`_ to vector space semantics.\n",
    "\n",
    ":download:`Download code <../_code/discocat.ipynb>`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pregroup grammars"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "`Pregroup grammar <../string_diagrams.rst#Pregroup-grammars>`_ is a grammatical formalism devised by Joachim Lambek in 1999 [Lam1999]_. In pregroups, each word is a morphism with type :math:`I \\to T` where :math:`I` is the monoidal unit and :math:`T` is a rigid type, referred to as the *pregroup type*. Here are some examples for pregroup type assignments:\n",
    "\n",
    "* a noun is given the base type :math:`n`.\n",
    "* an adjective consumes a noun on the noun's left to return another noun, so it is given the type :math:`n\\cdot n^l`.\n",
    "* a transitive verb consumes a noun on its left and another noun on its right to give a sentence, so is given the type :math:`n^r \\cdot s \\cdot n^l`.\n",
    "\n",
    "In the context of pregroups, the :term:`adjoints <adjoint>` :math:`n^l` and :math:`n^r` can be thought of as the left and right inverses of a type :math:`n` respectively. In a pregroup derivation, the words are concatenated using the monoidal product :math:`\\otimes` and linked using :term:`cups <cup>`, which are special morphisms that exist in any :term:`rigid category`. A sentence is grammatically sound if its derivation has a single uncontracted sentence wire.\n",
    "\n",
    "In :term:`DisCoPy`, words are defined using the :py:class:`~discopy.grammar.pregroup.Word` class. A :py:class:`~discopy.grammar.pregroup.Word` is just a :py:class:`~discopy.rigid.Box` where the input type is fixed to be the monoidal unit :math:`I` (or ``Ty()``). A pregroup derivation diagram can be drawn using either the :py:meth:`monoidal.Diagram.draw() <discopy.monoidal.Diagram.draw>` method or the :py:class:`grammar.draw() <discopy.grammar.pregroup.draw>` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from discopy import grammar\n",
    "from discopy.grammar import Word\n",
    "from discopy.rigid import Cap, Cup, Id, Ty\n",
    "\n",
    "n, s = Ty('n'), Ty('s')\n",
    "\n",
    "words = [\n",
    "    Word('she', n),\n",
    "    Word('goes', n.r @ s @ n.l),\n",
    "    Word('home', n)\n",
    "]\n",
    "\n",
    "cups = Cup(n, n.r) @ Id(s) @ Cup(n.l, n)\n",
    "\n",
    "assert Id().tensor(*words) == words[0] @ words[1] @ words[2]\n",
    "assert Ty().tensor(*[n.r, s, n.l]) == n.r @ s @ n.l\n",
    "\n",
    "diagram = Id().tensor(*words) >> cups\n",
    "grammar.draw(diagram)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. note::\n",
    "\n",
    "  In ``lambeq``, method :py:meth:`~lambeq.create_pregroup_diagram` provides an alternative, more compact way to create pregroup diagrams, by explicitly defining a list of :term:`cups <cup>` and :term:`swaps <swap>`. For example, the above diagram can be also generated using the following code:\n",
    "\n",
    "  .. code-block:: python \n",
    "     \n",
    "     from lambeq import create_pregroup_diagram\n",
    "     from discopy import Ty\n",
    "     \n",
    "     words = [Word('she', n), Word('goes', n.r @ s @ n.l), Word('home', n)]\n",
    "     morphisms = [(Cup, 0, 1), (Cup, 3, 4)]\n",
    "     diagram = create_pregroup_diagram(words, Ty('s'), morphisms)\n",
    "     \n",
    "  where the numbers in ``morphisms`` define the indices of the corresponding wires at the top of the diagram\n",
    "  ``(n @ n.r @ s @ n.l @ n)``. In contrast, the ``.cup()`` method in :term:`DisCoPy` can be used to define\n",
    "  diagrams using chaining, and uses indices at the bottom of the diagram:\n",
    "\n",
    "  .. code-block:: python\n",
    "\n",
    "    words = Word('she', n) @ Word('goes', n.r @ s @ n.l) @ Word('home', n)\n",
    "    same_diagram = words.cup(0, 1).cup(1, 2)\n",
    "\n",
    "  The ``.cup()`` method can be applied to non-adjacent qubits, which implicitly introduces swaps. For example:\n",
    "\n",
    "  .. code-block:: python\n",
    "\n",
    "    n, s, p = map(Ty, \"nsp\")\n",
    "    words = Word('A', n @ p) @ Word('V', n.r @ s @ n.l) @ Word('B', p.r @ n)\n",
    "\n",
    "    words.cup(1, 5).cup(0, 1).cup(1, 2).draw()\n",
    "\n",
    "  .. image:: ../../_static/images/string_diagram_with_swaps.png\n",
    "     :width: 350\n",
    "\n",
    "Note that only diagrams of the form ``word @ ... @ word >> cups_and_swaps`` can be drawn using :py:class:`grammar.draw() <discopy.grammar.pregroup.draw>`. Applying functors or normal forms will often cause the diagram to deviate from this form, in which case :py:meth:`monoidal.Diagram.draw() <discopy.monoidal.Diagram.draw>` should be used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before normal form: [Word('she', Ty('n')), Word('goes', Ty(Ob('n', z=1), 's', Ob('n', z=-1))), Word('home', Ty('n')), Cup(Ty('n'), Ty(Ob('n', z=1))), Cup(Ty(Ob('n', z=-1)), Ty('n'))]\n",
      "After normal form: [Word('she', Ty('n')), Word('goes', Ty(Ob('n', z=1), 's', Ob('n', z=-1))), Cup(Ty('n'), Ty(Ob('n', z=1))), Word('home', Ty('n')), Cup(Ty(Ob('n', z=-1)), Ty('n'))]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from discopy import drawing\n",
    "from pytest import raises\n",
    "\n",
    "# In the original diagram, words appear before the cups\n",
    "print(\"Before normal form:\", diagram.boxes)\n",
    "\n",
    "diagram_nf = diagram.normal_form()\n",
    "print(\"After normal form:\", diagram_nf.boxes)\n",
    "\n",
    "drawing.equation(diagram, diagram_nf, figsize=(10, 4), symbol='->')\n",
    "\n",
    "# In the normalised diagram, boxes are not in the right order\n",
    "# anymore, so cannot be drawn using grammar.draw()\n",
    "with raises(ValueError):\n",
    "    grammar.draw(diagram_nf)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "In the example above, the application of normal form to the diagram introduces a :term:`cup` before the word \"home\", so the normalised version cannot be drawn with :py:class:`grammar.draw() <discopy.grammar.pregroup.draw>` anymore."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Functors"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Given :term:`monoidal categories <monoidal category>` :math:`\\mathcal{C}` and :math:`\\mathcal{D}`, a monoidal :term:`functor` :math:`F: \\mathcal{C} \\to \\mathcal{D}` satisfies the following properties:\n",
    "\n",
    "- monoidal structure of objects is preserved: :math:`F(A \\otimes B) = F(A) \\otimes F(B)`\n",
    "- :term:`adjoints <adjoint>` are preserved: :math:`F(A^l) = F(A)^l`, :math:`F(A^r) = F(A)^r`\n",
    "- monoidal structure of morphism is preserved: :math:`F(g \\otimes f) = F(g) \\otimes F(f)`\n",
    "- compositonal structure of morphisms is preserved: :math:`F(g \\circ f) = F(g) \\circ F(f)`\n",
    "\n",
    "Put simply, a :term:`functor` is a structure-preserving transformation. In a free :term:`monoidal category`, applying a :term:`functor` to a diagram amounts to simply providing a mapping for each generating object and morphism. In :term:`DisCoPy`, a :term:`functor` is defined by passing mappings (dictionaries or functions) as arguments ``ob`` and ``ar`` to the :py:class:`~discopy.monoidal.Functor` class.\n",
    "\n",
    ":term:`Functors <functor>` are one of the most powerful concepts in category theory. In fact, the encoding, rewriting and parameterisation steps of ``lambeq``'s :ref:`pipeline <sec-pipeline>` are implemented individually as :term:`functors <functor>`, resulting in an overall functorial transformation from :term:`parse trees <syntax tree>` to :term:`tensor networks <tensor network>` and :term:`circuits <quantum circuit>`. More specifically:\n",
    "\n",
    "- :py:class:`lambeq.CCGParser` uses a :term:`functor` to transform a biclosed CCG diagram to a rigid DisCoCat diagram [YK2021]_.\n",
    "- :py:class:`lambeq.Rewriter` functorially transforms a rigid DisCoCat diagram to a simpler rigid DisCoCat diagram.\n",
    "- :py:class:`lambeq.TensorAnsatz` functorially transforms a rigid DisCoCat diagram to a tensor diagram, which can be evaluated as a tensor network using NumPy, JAX or PyTorch.\n",
    "- :py:class:`lambeq.CircuitAnsatz` functorially transforms a rigid DisCoCat diagram to a :term:`quantum circuit`, for evaluation on a quantum device.\n",
    "\n",
    "Below we present two examples of :term:`functors <functor>`, implemented in :term:`DisCoPy`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 1: \"Very\" functor"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "This :term:`functor` adds the word \"very\" in front of every adjective in a :term:`DisCoCat` diagram. \n",
    "Since the mapping is from a :py:class:`rigid.Diagram <discopy.rigid.Diagram>` to another :py:class:`rigid.Diagram <discopy.rigid.Diagram>`, a :py:class:`rigid.Functor <discopy.rigid.Functor>` should be used. Further, the word \"very\" modifies an adjective to return another adjective, so it should have type \n",
    ":math:`(n \\otimes n^l) \\otimes (n \\otimes n^l)^l = n \\otimes n^l \\otimes n^{ll} \\otimes n^l`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from lambeq import BobcatParser\n",
    "parser = BobcatParser(verbose='suppress')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from discopy.rigid import Diagram, Functor\n",
    "\n",
    "# determiners have the same type as adjectives\n",
    "# but we shouldn't add 'very' behind them\n",
    "determiners = ['a', 'the', 'my', 'his', 'her', 'their']\n",
    "\n",
    "# type for an adjective\n",
    "adj = n @ n.l\n",
    "very = Word('very', adj @ adj.l)\n",
    "cups = Diagram.cups(adj.l, adj)\n",
    "\n",
    "def very_ob(ty):\n",
    "    return ty\n",
    "\n",
    "def very_ar(box):\n",
    "    if box != very:\n",
    "        if box.name not in determiners:\n",
    "            if box.cod == adj:\n",
    "                return very @ box >> Id(adj) @ cups\n",
    "    return box\n",
    "\n",
    "very_functor = Functor(ob=very_ob, ar=very_ar)\n",
    "\n",
    "diagram = parser.sentence2diagram('a big bad wolf')\n",
    "new_diagram = very_functor(diagram)\n",
    "\n",
    "drawing.equation(diagram, new_diagram, figsize=(10, 4), symbol='->')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 2: Twist functor"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "In this :term:`functor`, :term:`cups <cup>` and :term:`caps <cap>` are treated specially and are not passed to the ``ar`` function; instead they are passed to methods ``ar_factory.cups(left, right)`` and ``ar_factory.caps(left, right)``, respectively. By default, the :py:class:`rigid.Functor <discopy.rigid.Functor>` uses :py:class:`rigid.Diagram <discopy.rigid.Diagram>` to implement the `factory pattern <https://en.wikipedia.org/wiki/Factory_method_pattern>`_, with methods such as ``cups()``, ``caps()``, ``id()``, and ``swap()``. For example, for a functor ``F`` that uses the default arrow factory :py:class:`~discopy.rigid.Diagram`, ``F(Cup(a, a.r)) == Diagram.cups(F(a), F(a.r))``.\n",
    "\n",
    "Here is an example of how to map a :term:`cup` to a custom diagram, such as a \"twisted\" :term:`cup`. Note that it is up to the user to ensure the new :term:`cups <cup>` and :term:`caps <cap>` satisfy the :term:`snake equations`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 288x144 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from discopy.rigid import Functor\n",
    "from discopy import Diagram\n",
    "\n",
    "def twist_ob(ty):\n",
    "    return ty\n",
    "\n",
    "def twist_ar(box):\n",
    "    return box\n",
    "\n",
    "class TwistedDiagram(Diagram):\n",
    "    @staticmethod\n",
    "    def cups(left, right):\n",
    "        swaps = Diagram.swap(left, right)\n",
    "        cups = Diagram.cups(right, left)\n",
    "        return swaps >> cups\n",
    "\n",
    "    @staticmethod\n",
    "    def caps(left, right):\n",
    "        return TwistedDiagram.cups(left, right).dagger()\n",
    "\n",
    "\n",
    "twist_functor = Functor(ob=twist_ob, ar=twist_ar, ar_factory=TwistedDiagram)\n",
    "\n",
    "diagram = parser.sentence2diagram('This is twisted')\n",
    "new_diagram = twist_functor(diagram)\n",
    "\n",
    "grammar.draw(diagram)\n",
    "grammar.draw(new_diagram)\n",
    "\n",
    "snake = Id(n) @ Cap(n.r, n) >> Cup(n, n.r) @ Id(n)\n",
    "drawing.equation(twist_functor(snake), Id(n), figsize=(4, 2))"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. note::\n",
    "    \n",
    "   Twisting the nested :term:`cups <cup>` for \"is\" and \"twisted\" together is **not** a functorial operation, so it cannot be implemented using a :py:class:`rigid.Functor <discopy.rigid.Functor>`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classical DisCoCat: Tensor networks"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The classical version of :term:`DisCoCat` sends diagrams in the :term:`category` of pregroup derivations to tensors in the :term:`category` of vector spaces **FVect**. **FVect** is a :term:`monoidal category` with vector spaces (e.g. :math:`\\mathbb{R}^2 \\otimes \\mathbb{R}^2`) as objects and linear maps between vector spaces as morphisms. It is in fact a :term:`compact closed category`, which is a special case of rigid categories where :math:`A^l = A^r = A^*`.\n",
    "\n",
    "Using the :py:mod:`discopy.tensor` module, you can define a free :term:`category` of vector spaces: objects are defined with the :py:class:`~discopy.tensor.Dim` class and morphisms with the :py:class:`~discopy.tensor.Box` class. Composite morphisms are constructed by freely combining the generating morphisms using the ``<<`` and ``>>`` operators. This is similar to how :py:class:`rigid.Diagram <discopy.rigid.Diagram>`\\ s and :py:class:`monoidal.Diagram <discopy.monoidal.Diagram>`\\ s are defined. The concrete value of the tensor is passed to the ``data`` attribute as an unshaped list; :term:`DisCoPy` will reshape it later based on the input and output dimensions.\n",
    "\n",
    "Apart of diagrams, the :py:mod:`discopy.tensor` module has another class that can be tensored and composed: :py:class:`tensor.Tensor <discopy.tensor.Tensor>`. The key difference is that :py:class:`tensor.Box <discopy.tensor.Box>`\\ es in the diagrams compose together to make :py:class:`tensor.Diagram <discopy.tensor.Diagram>`\\ s, while :py:class:`tensor.Tensor <discopy.tensor.Tensor>`\\ s compose together to make another :py:class:`tensor.Tensor <discopy.tensor.Tensor>`. In other words, :py:class:`tensor.Tensor <discopy.tensor.Tensor>` computes tensor contractions directly, while :py:class:`tensor.Diagram <discopy.tensor.Diagram>` delays the computation until :py:meth:`~discopy.tensor.Diagram.eval` is called."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dim(1) @ Dim(2) @ Dim(3)=Dim(2, 3)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 288x72 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 0]\n",
      " [0 1]]\n"
     ]
    }
   ],
   "source": [
    "from discopy.tensor import Box, Tensor, Id, Dim\n",
    "\n",
    "# Dim(1) is the unit object, so disappears when tensored with another Dim\n",
    "print(f'{Dim(1) @ Dim(2) @ Dim(3)=}')\n",
    "\n",
    "id_box = Box('Id Box', Dim(2), Dim(2), data=[1,0,0,1])\n",
    "id_tensor = Tensor(Dim(2), Dim(2), array=[1,0,0,1])\n",
    "\n",
    "# the actual values of id_box and id_tensor are equal\n",
    "assert (id_box.array == id_tensor.array).all()\n",
    "drawing.equation(id_box, id_tensor, figsize=(4, 1))\n",
    "print(id_box.array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x144 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tensor(dom=Dim(2, 2), cod=Dim(2), array=[0., 1., 2., 3., 4., 5., 6., 7.])\n",
      "[[[0. 1.]\n",
      "  [2. 3.]]\n",
      "\n",
      " [[4. 5.]\n",
      "  [6. 7.]]]\n"
     ]
    }
   ],
   "source": [
    "f_box = Box('f Box', Dim(2, 2), Dim(2), data=range(8))\n",
    "f_tensor = Tensor(Dim(2, 2), Dim(2), array=range(8))\n",
    "\n",
    "combined_diagram = id_box @ Id(Dim(2)) >> f_box\n",
    "combined_tensor = id_tensor @ Tensor.id(Dim(2)) >> f_tensor\n",
    "\n",
    "# tensor diagram evaluates to the tensor\n",
    "assert combined_diagram.eval() == combined_tensor\n",
    "drawing.equation(combined_diagram, combined_tensor, figsize=(6, 2))\n",
    "print(combined_tensor)\n",
    "print(combined_tensor.array)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "In the :term:`category` of vector spaces, :term:`cups <cup>`, :term:`caps <cap>` and :term:`swaps <swap>` take on concrete values as tensors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 0.],\n",
       "       [0., 1., 0.],\n",
       "       [0., 0., 1.]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Tensor.cups(Dim(3), Dim(3)).array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[[1., 0.],\n",
       "         [0., 0.]],\n",
       "\n",
       "        [[0., 0.],\n",
       "         [1., 0.]]],\n",
       "\n",
       "\n",
       "       [[[0., 1.],\n",
       "         [0., 0.]],\n",
       "\n",
       "        [[0., 0.],\n",
       "         [0., 1.]]]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Tensor.swap(Dim(2), Dim(2)).array"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "To implement a :term:`functor` from :py:class:`rigid.Diagram <discopy.rigid.Diagram>` to :py:class:`tensor.Tensor <discopy.tensor.Tensor>`, use a :py:class:`tensor.Functor <discopy.tensor.Functor>`. This :term:`functor` will automatically contract the resulting :term:`tensor network`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"This\" becomes\n",
      "[1. 1.]\n",
      "\"is\" becomes\n",
      "[[[[1. 1.]\n",
      "   [1. 1.]]\n",
      "\n",
      "  [[1. 1.]\n",
      "   [1. 1.]]]\n",
      "\n",
      "\n",
      " [[[1. 1.]\n",
      "   [1. 1.]]\n",
      "\n",
      "  [[1. 1.]\n",
      "   [1. 1.]]]]\n",
      "\"twisted\" becomes\n",
      "[[1. 1.]\n",
      " [1. 1.]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Tensor(dom=Dim(1), cod=Dim(2), array=[8., 8.])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from discopy.tensor import Functor\n",
    "import numpy as np\n",
    "\n",
    "def one_ob(ty):\n",
    "    dims = [2] * len(ty)\n",
    "    return Dim(*dims) # does Dim(2,2,..)\n",
    "\n",
    "def one_ar(box):\n",
    "    dom = one_ob(box.dom)\n",
    "    cod = one_ob(box.cod)\n",
    "    tensor = np.ones(dom @ cod)\n",
    "    print(f'\"{box}\" becomes')\n",
    "    print(tensor)\n",
    "    return tensor\n",
    "\n",
    "one_functor = Functor(ob=one_ob, ar=one_ar)\n",
    "one_functor(diagram)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Sometimes, defining a :term:`functor` from :py:class:`rigid.Diagram <discopy.rigid.Diagram>` to :py:class:`tensor.Diagram <discopy.tensor.Diagram>` offers more flexibility, since a :py:class:`tensor.Diagram <discopy.tensor.Diagram>` can be instantiated with concrete values to be evaluated later using a custom tensor contractor. Such a functor can be defined using a :py:class:`rigid.Functor <discopy.rigid.Functor>` with :py:class:`tensor.Dim <discopy.tensor.Dim>` and :py:class:`tensor.Diagram <discopy.tensor.Diagram>` as ``ob_factory`` and ``ar_factory``, respectively. See the implementation of :py:class:`.TensorAnsatz` for an example."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quantum DisCoCat: Quantum circuits"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The quantum version of :term:`DisCoCat` sends diagrams in the :term:`category` of pregroup derivations to :term:`circuits <quantum circuit>` in the category of Hilbert spaces **FHilb**. This is a :term:`compact closed <compact closed category>` monoidal category with Hilbert spaces (e.g. :math:`\\mathbb{C}^{2^n}`) as objects and unitary maps between Hilbert spaces as morphisms.\n",
    "\n",
    "The :py:mod:`discopy.quantum` module is a framework for the free :term:`category` of :term:`quantum circuits <quantum circuit>`: objects are generated using the :py:class:`quantum.circuit.Ob <discopy.quantum.circuit.Ob>` class and morphisms by using :py:mod:`quantum.gates <discopy.quantum.gates>`. In :term:`DisCoPy`, rotation values range from :math:`0` to :math:`1` rather than from :math:`0` to :math:`2\\pi`. The circuit can then either be evaluated using tensor contraction with the :py:meth:`~discopy.quantum.circuit.Circuit.eval` method, or exported to :term:`pytket` using the :meth:`~discopy.quantum.circuit.Circuit.to_tk` method, which supports multiple hardware backends."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "tk.Circuit(4).CX(1, 2).X(3).CX(0, 1).CX(2, 3).Rz(0.2, 0).Rz(0.4, 1).Rz(0.6, 2).Rz(0.8, 3)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from discopy.quantum import qubit, Id\n",
    "from discopy.quantum.gates import CX, Rz, X\n",
    "\n",
    "circuit = Id(4)\n",
    "circuit >>= Id(1) @ CX @ X\n",
    "circuit >>= CX @ CX\n",
    "circuit >>= Rz(0.1) @ Rz(0.2) @ Rz(0.3) @ Rz(0.4)\n",
    "\n",
    "# from discopy 0.4.1, can do:\n",
    "same_circuit = (Id(4).CX(1, 2).X(3).CX(0, 1).CX(2, 3)\n",
    "                .Rz(0.1, 0).Rz(0.2, 1).Rz(0.3, 2).Rz(0.4, 3))\n",
    "assert circuit == same_circuit\n",
    "\n",
    "circuit.draw()\n",
    "circuit.to_tk()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "To apply multi-qubit :term:`gates <quantum gate>` to non-consecutive :term:`qubits <qubit>`, use :term:`swaps <swap>` to permute the wires, apply the :term:`gate <quantum gate>`, then unpermute the wires. These :term:`swaps <swap>` are only logical swaps and do not result in more gates when converted to :term:`tket` format."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 216x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "tk.Circuit(3).CX(2, 0)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from discopy import Circuit\n",
    "from discopy.quantum.gates import SWAP\n",
    "\n",
    "# to apply a CNOT on qubits 2 and 0:\n",
    "circuit1 = Id(3)\n",
    "circuit1 >>= SWAP @ Id(1)\n",
    "circuit1 >>= Id(1) @ SWAP\n",
    "circuit1 >>= Id(1) @ CX\n",
    "circuit1 >>= Id(1) @ SWAP\n",
    "circuit1 >>= SWAP @ Id(1)\n",
    "\n",
    "# or you can do\n",
    "perm = Circuit.permutation([2, 0, 1], inverse=True)\n",
    "circuit2 = perm >> Id(1) @ CX >> perm[::-1]\n",
    "\n",
    "assert circuit1 == circuit2\n",
    "circuit1.draw(figsize=(3, 3))\n",
    "\n",
    "# no swaps introduced when converting to tket\n",
    "circuit1.to_tk()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Since discopy 0.4.0, we have long-ranged controlled gates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 216x144 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 216x144 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from discopy.quantum import Controlled, Rz, X\n",
    "(Controlled(Rz(0.5), distance=2) >> Controlled(X, distance=-2)).draw(figsize=(3, 2))\n",
    "Controlled(Controlled(X), distance=2).draw(figsize=(3, 2))"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "So far, our :term:`circuits <quantum circuit>` have been \"pure\" circuits, consisting of unitaries. Pure circuits can be evaluated locally to return a :py:class:`~discopy.tensor.Tensor`. Circuits containing :py:class:`~discopy.quantum.circuit.Discard`\\ s and :py:class:`~discopy.quantum.circuit.Measure`\\ s are considered \"mixed\", and return :py:mod:`CQMap <discopy.quantum.cqmap>`\\ s instead of :py:class:`~discopy.tensor.Tensor`\\ s when evaluated, as they are not unitaries but rather classical-quantum maps (for more details, see Chapter 5 in [HV2013]_)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C(Dim(2, 2)) @ Q(Dim(2, 3))\n",
      "CQMap(dom=Q(Dim(2)), cod=CQ(), array=[1.+0.j, 0.+0.j, 0.+0.j, 1.+0.j])\n",
      "CQMap(dom=Q(Dim(2)), cod=C(Dim(2)), array=[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j])\n",
      "Tensor(dom=Dim(1), cod=Dim(2), array=[1.+0.j, 0.+0.j])\n",
      "CQMap(dom=CQ(), cod=C(Dim(2)), array=[1.+0.j, 0.+0.j])\n"
     ]
    }
   ],
   "source": [
    "from discopy import Discard, Measure, Ket\n",
    "from discopy import C, Q\n",
    "\n",
    "print(C(Dim(2)) @ Q(Dim(2, 3)) @ C(Dim(2)))\n",
    "\n",
    "print(Discard().eval())\n",
    "print(Measure().eval())\n",
    "print(Ket(0).eval())\n",
    "# circuits that have measurements in them are no longer unitary\n",
    "# and return CQMaps\n",
    "print((Ket(0) >> Measure()).eval())"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Pure :term:`circuits <quantum circuit>` can be coerced to evaluate into a :py:mod:`CQMap <discopy.quantum.cqmap>` by setting ``mixed=True``."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CQMap(dom=Q(Dim(2, 2)), cod=Q(Dim(2, 2)), array=[1.+0.j, 0.+0.j, 0.+0.j, ..., 0.+0.j, 0.+0.j, 0.+0.j])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CX.eval(mixed=True)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Note that the tensor order of :py:mod:`CQMap <discopy.quantum.cqmap>`\\ s is doubled, compared to that of simple :py:class:`~discopy.tensor.Tensor`\\ s:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 2, 2, 2)\n",
      "(2, 2, 2, 2, 2, 2, 2, 2)\n"
     ]
    }
   ],
   "source": [
    "print(CX.eval().array.shape)\n",
    "print(CX.eval(mixed=True).array.shape)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "To implement a :term:`functor` from :py:class:`rigid.Diagram <discopy.rigid.Diagram>` to :py:class:`quantum.Circuit <discopy.quantum.circuit.Circuit>`, use a :py:class:`quantum.circuit.Functor <discopy.quantum.circuit.Functor>`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAk4AAAJOCAYAAABBWYj1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAABNQ0lEQVR4nO3deVxVdeL/8fdFliHDJnLDBc1Ax8AUA7GyBtTijguomUuDjnwznWlxYkqbgsoKZloctWxqZLIor0sN5a5kZpi4IH7FSmwhS1HDpShBUlA4vz/6yTcmscNy77ng6/l4+Mc5fD6e95k7xNvP+XCvzTAMQwAAAPhFHlYHAAAAaCooTgAAACZRnAAAAEyiOAEAAJhEcQIAADCJ4gQAAGASxQkAAMAkihMAAIBJFCcAAACTKE4AAAAmUZwAAABMojgBAACYRHECAAAwieIEAABgEsUJAADAJIoTAACASRQnAAAAkyhOAAAAJlGcAAAATKI4AQAAmERxAgAAMIniBAAAYBLFCQAAwCSKEwAAgEkUJwAAAJMoTgAAACZRnAAAAEyiOAEAAJhEcQIAADCJ4gQAAGASxQkAAMAkihMAAIBJFCcAAACTKE4AAAAmUZwAAABMojgBAACYRHECAAAwieIEAABgEsUJAADAJIoTAACASRQnAAAAkyhOAAAAJlGcAAAATKI4AQAAmERxAgAAMIniBAAAYBLFCQAAwCSKEwAAgEkUJwAAAJMoTgAAACZRnAAAAEyiOAEAAJhEcQIAADCpSRen8vJyzZw5Uxs2bLA6CgAAuAg02eJ07NgxDR48WNu3b1d8fLzmzZsnwzCsjgUAAJqxJlmcPv74Y0VGRioqKkpr167Vtm3bNH/+fP3pT3/SmTNnrI4HAACaKZvRxJZpVq5cqTvuuEPPP/+8xo8fX32+pKREt99+u8rKypSRkaErrrjCwpQAAKA5ajIrToZh6Omnn9Zdd92lNWvWaPz48crMzFSPHj0UFBSkF198UStWrFB4eLgiIyP1ySefWB0ZAAA0M01ixen06dOaOnWq9uzZoxUrVqhTp06qrKxU9+7d9e6776pTp06KiIjQkiVLdPXVVys9PV0zZszQ66+/LrvdbnV8AADQTLj9itPRo0c1cOBAnTp1Sps3b1anTp0kSTt27FBQUJC6desmb29vjRs3TitWrJAkTZo0ScuWLVNCQoLmzp3LpnEAANAo3Lo47d69W/369dMtt9yipUuX6pJLLqn+2uHDh9W5c+fq406dOunw4cPVxzfccIO2bdumV155RVOmTFFFRYVLswMAgObHbYvTsmXLdPPNN+vZZ5/VzJkz5eFR96hdu3bVli1bdOzYMd1888365ptvnJAUAABcLNyuOBmGob/97W+aNm2a1q1bpzFjxpx3XMeOHXXw4MHq40OHDqljx44/G+fn56dly5bp+uuvV2RkpPLz852WHQAANG9utTn81KlTmjx5sj7//HMtX778vEXonLNnz6p79+5677331LFjR0VERGjx4sUKCQmpdc7ChQt1//3369VXX9XQoUOdcQsAAKAZc5sVp6KiIkVFRamyslKbNm26YGmSJE9PT73wwguKiYlRz549NWbMmAuWJkmaMGGCVqxYoTvvvFOzZs1i0zgAAKgTt1hx2rVrl0aMGKE777xTycnJstlsTr1eYWGhYmNj1bdvX7300kvy8fFx6vUAAEDz4BbF6dprr9WHH36otm3b1nluZWWlPDw86ly2ysvLVVxcrNdee00TJ06s83UBAMDFxy2K03fffadTp07Va+7tt9+uO++8U9HR0fWa37p1a3l7e9drLgAAuLh4Wh1Aki6//HJdfvnl9Zr7q1/9SldccYU6dOjQyKkAAABqcpvN4QAAAO6O4gQAAGASxQkAAMAkihMAAIBJFCcAAACTKE4AAAAmUZwAAABMojgBAACYRHECAAAwieIEAABgEsUJTcLBgwd17bXXql+/fjp8+LDVcVxmyZIluvTSSzVz5kxVVVVZHcclysrKdNttt6lTp07Kzc21Oo7L5ObmqlOnTrrttttUVlZmdRwAtaA4we3l5OSof//+Gjt2rEaOHKnIyMhm/wO1qqpKjzzyiB566CEtX75c69ev17hx4/TDDz9YHc2pDh06pBtvvFGXXHKJZs+erSFDhmjp0qVWx3K6pUuXasiQIZo9e7YuueQS3XjjjTp06JDVsQCcj9HExcTEGOvWrbM6BpzE4XAYrVu3NlauXFl9btmyZUbr1q2NpUuXWpjMeU6ePGmMGjXKuOGGG4yjR48ahmEYp06dMiZMmGD07dvXOHjwoMUJnWP79u1Ghw4djKefftqoqqoyDMMwdu/ebXTp0sVITk42KisrLU7Y+CorK43k5GSjS5cuxu7duw3DMIyqqirj6aefNjp06GBs377d4oQA/hsrTnBLVVVVevjhh5WcnKyNGzfKy8tLPXr0UFBQkD799FNt2LBBM2bM0GOPPdasHmEdPHhQAwYMkJ+fn9577z3t2rVLPXr0UGhoqHr27KkxY8aof//+2rFjh9VRG9XixYs1bNgwvfTSS5oxY4beeecd9ejRQ7feeqvi4+O1ceNGjRkzplk9wiorK9OYMWO0ceNG5eTkqKioSD169FBwcLCqqqr00ksvadiwYVq8eLHVUQH8lNXNraFYcWp+SktLjREjRhg33nijcezYMePs2bNGt27djH379hnl5eXGNddcY+Tn5xtHjhwxrrvuOmP06NFGWVmZ1bEbbNu2bUaHDh2MZ5991qiqqqr1vlesWGG0bt3aWLx4sdWRG6yystJISkoyunbtanz00UeGYRjnve+8vDxj4sSJRlhYmFFYWGhx6oYrLCw0wsLCjIkTJxqnT5+u9bX+6KOPjK5duxpJSUnNcsUNaIpYcYJbOXDggG644Qb5+/trw4YNatOmjXbs2KGgoCB169ZN3t7eGjdunFasWKF27drp/fffbxZ7QhwOh2JjYzV//nw98MADstlstd53bGys3nvvPT388MN65JFHmuyK28mTJzV69Ght2rRJO3bsUK9evSTpvPe9bt06paena/z48erfv79ycnIsTl9/5/bsjR8/Xunp6fLx8an1te7Vq5d27NihTZs2afTo0Tp58qTV8YGLHsUJbmPr1q267rrrNGnSJL388svy9vaWJB0+fFidO3euHtepU6fq36zz8fFRenq6xo4dq8jIyCb3A7WqqkoPPfSQHn30UW3cuFHDhg2r/tqF7vuaa65RTk6O3n///Sb5W1iFhYUaMGCAfv3rX1cX5HNqu2+bzabp06dr/vz5Gj58uBYtWmRF9AZZtGiRhg8frvnz52v69Omy2WySLvxat2nTRhs2bNCvf/1rDRgwQIWFhZZkB/AjihPcwuuvv64RI0ZowYIFSkxMrP6BYobNZtOMGTP00ksvafjw4U1mT8jJkyc1atQobd26VTt27FBoaGid5rdt21bvvfeeWrVqpQEDBujgwYNOStq4tm3bpv79+2vChAlasGCBfHx86jR/2LBh2rhxox555BE9/PDDTWLF7dyevUceeeRnBdkMHx8fLViwQBMmTFD//v21bds2JyUF8EsoTrBUZWWlHnzwQT3xxBPKysrS7373u5+N6dixY41ScOjQIXXs2PFn4849wkpKSlJycrJb/0A990iydevWevfdd9W6deufjTFz3z4+PnrllVcUHx+v/v37a/v27U7P3hALFy5UXFycXn75Zd1///3nLchm7js0NFQ5OTnKzs7Wrbfe6taPsE6ePKlbb71V2dnZysnJOW9BNnPPNptN999/v15++WXFxcVp4cKFTs8O4Dys3mTVUGwOb7pKSkqM4cOHG1FRUcY333xT67gzZ84YV155pfHll19Wb5zds2dPreOPHTtmDBgwwBg5cqRRWlrqjOgNkp2dbQQEBBhz5syp/rX786nrfa9evdpo06aNsXDhQmfEbpDKykrjwQcfNLp163bBezCMut13eXm5cccddxjXXHONsX//fmdEb5D9+/cb11xzjXHHHXcY5eXltY6r62u9Z88eo1u3bsaDDz7IpnHAxShOsMRXX31lhIaGGlOmTLngD5Rz1qxZYwQHBxvdunUzUlJSfnH86dOnjYSEBKN3797GgQMHGiNyo0hPTzfatGljrF271tT4ut73nj17jCuvvNL461//6jY/UEtKSozY2FjjpptuMo4fP25qTl3uu6qqypg9e7YREBBgbNmypTEiN4otW7YYAQEBxuzZsy9YkM+p62t9/Phx46abbjJiY2ONkpKSxogMwASKE1xu8+bNRvv27Y3nnnvO1A+U+qqqqjJmzZplBAQEGFu3bnXadcw4e/asMX36dOOqq64y9u7d69RrnfuBGhcXZ/mK2/79+41evXoZkydPNlWQG2Lt2rVGmzZtjNdee82p1zHjtddeq1NBrq/y8nJj8uTJRq9evdxyxQ1ojmyGYRhWPy5sCLvdrvvuu092u93qKDBh8eLFmjRpkqZMmaKYmBiXXHPt2rV65ZVXtHDhQo0ZM8Yl1/yp8vJyjR49Wlu2bNHs2bN1xRVXOP2aFRUVSkpKko+Pj9555x21b9/e6df8bzt37tSQIUMUFhamu+++u04b/utr7969Sk5O1owZM5Samur0651PcnKynn76aaWkpOjqq692+vUMw9A///lP5eXlac2aNYqIiHD6NYGLmafVAXBxKS8vV0xMjA4cOKC0tLQ6zf3666/l4eFRrxJwyy23qLy8vM7zGoOXl5f8/Px0ww036K233qrz/I8//li/+c1v5OXlVad5wcHBkiQPD2t+B6S8vFyRkZGSpH//+991mnvixAl98803uuqqq+p8Xbvdbtk9Sz/+722325Wdna3s7Ow6zd23b59at26tyy67rE7zvL29FRkZadn/x4GLCStOaDIeffRReXp66tFHH7U6iksFBARo165dCggIsDqKy6xatUppaWlatWqV1VFcKjY2VpMnT1ZsbKzVUQDUgrcjAAAAMIniBAAAYBLFCQAAwCSKEwAAgEkUJwAAAJMoTgAAACZRnAAAAEyiOAEAAJhEcQIAADCJ4gQAAGASxQkAAMAkihPgpgoLC5WUlKTjx4+ra9euCg0NVVJSkgoLC62OBgAXLYoTmoxTp07p+PHjKi4utjqKUxmGoZSUFIWFhamsrEy9e/dW3759lZ6errKyMoWFhSklJUVN/PO5AaBJojjB7RUUFMhut2vOnDlKS0tThw4dZLfbVVBQYHU0p0hNTVVGRoby8/M1d+5c+fn5ycfHR+Hh4Zo7d6727NmjjIwMpaamWh0VAC46nlYHAC6koKBAERERKikpkWEYqqyslCStX79eERERys3NVXBwsMUpG09hYaHmzJmj/Px8tW/f/rxjAgIClJmZqZCQEE2cOFGBgYEuTgkAFy9WnODW7r333urS9FOGYaikpETTpk2zKJlzzJ8/XxMmTKi1NJ3Tvn17xcfHKy0tzUXJAAASK05wY8XFxcrKyqp1L49hGNq4caPy8/N1+eWXuzidc8yePVtBQUG67rrrqs9t375dkhQVFVVjbGlpqcrLy5WSkuLKiABwUaM4wW0dPXpU3t7eKi8vr3XMmTNnFBUVJS8vLxcmc57Tp0/rs88+k81m+8WxXl5eOnbsmAtSAQDOoTjBbbVr104VFRUXHOPt7a3PPvtM/v7+LkrlXKGhoUpPT1d4eHj1uXMrTVlZWTXG5ubmKiEhwYXpAADscYLb8vf3V1RUVK2rLzabTdHR0c2mNElSXFycHA6HqbEOh0MjRoxwbiAAQA0UJ7i1efPmqVWrVj8rTzabTa1atdLzzz9vUTLnmDp1qhYuXKgjR45ccFxRUZEcDoemTJniomQAAIniBDcXHBys3NxcxcTEqEWLFvL29paPj49iYmKa3VsRSFJgYKASExNlt9trLU9FRUWy2+1KTEzkrQgAwMXY4wS3FxwcrHXr1mn69Ok6ffq0Hn/88Wb1eO6/JSUlSZJCQkIUHx+v0tJSeXl5KTc3Vw6HQw6HQ4mJidXjAACuw4oTmgx/f38FBgY269Ik/fgYMjk5WXl5efLz81NhYaEOHjyohIQE+fn5KS8vT8nJyaZ+8w4A0LhYcUKTcerUKXl6Xjz/lw0MDFRKSooWLFignTt3KiAgwOpIAHDRY8UJAADAJIoTAACASRQnAAAAkyhOAAAAJlGcAAAATKI4AQAAmERxAgAAMIniBAAAYBLFCQAAwCSKEwAAgEkUJwAAAJMoToCbCwsLk2EYVsdwKU9PT3Xu3NnqGADwMxfPJ6YCTVReXp5sNpvVMVyisLBQ8+fP1+zZs3XmzBl98MEHiouL09SpUxUYGGh1PABgxQlwd1VVVSooKFBxcbHVUZzGMAylpKQoLCxMZWVluvrqqxUREaH09HSVlZUpLCxMKSkpF93KGwD3Q3EC3FRBQYHsdruOHTumIUOGqEOHDrLb7SooKLA6WqNLTU1VRkaG8vPzNXfuXPn5+cnHx0fh4eGaO3eu9uzZo4yMDKWmplodFcBFjkd1gBsqKChQRESESkpKJEllZWWSpPXr1ysiIkK5ubkKDg62MmKjKSws1Jw5c5Sfn6/27dufd0xAQIAyMzMVEhKiiRMn8tgOgGVYcQLc0L333quSkpKfPZoyDEMlJSWaNm2aRcka3/z58zVhwoRaS9M57du3V3x8vNLS0lyUDAB+jhUnwM0UFxcrKyur1v08hmHo3Xff1YMPPihfX18Xp2t8zzzzjFq3bq3ly5dXnztw4IAkKSoqqsbY0tJSlZeXKyUlxYUJAeD/sOIEuJmjR4/K29v7gmNatGihkydPuiiRc1VVValFixamxnp5eenEiRNOTgQAtWPFCXAz7dq1U0VFxQXH2Gw2Pfnkk/L393dRKufJyMhQenq6wsPDq8+dW2nKysqqMTY3N1cJCQkuTAcANbHiBLgZf39/RUVF1freTTabTdHR0c2iNElSXFycHA6HqbEOh0MjRoxwbiAAuACKE+CG5s2bp1atWv2sPNlsNrVq1UrPP/+8Rcka39SpU7Vw4UIdOXLkguOKiorkcDg0ZcoUFyUDgJ+jOAFuKDg4WLm5uYqJiZEktWzZUj4+PoqJiWlWb0UgSYGBgUpMTJTdbq+1PBUVFclutysxMZG3IgBgKfY4AW4qODhY69atU7t27fSf//xHoaGhzebx3H9LSkqSJIWEhCg+Pl6lpaXy8vJSbm6uHA6HHA6HEhMTq8cBgFVYcQLc3LXXXqugoKBmW5qkHx9BJicnKy8vT35+fvr+++9VUFCghIQE+fn5KS8vT8nJyRfNZ/YBcF+sOAFu7mL6kN/AwEClpKQoMjJSaWlpWrVqldWRAKAGVpwAAABMojgBAACYRHECAAAwieIEAABgEsUJAADAJIoTAACASRQnAAAAkyhOAAAAJlGcAAAATKI4AQAAmERxAgAAMIniBMDteHh46IorrrA6hstdccUVatGihdUxAFwAxQmA26mqqtK3335rdQyXKSwsVFJSkhYtWqSRI0cqNDRUSUlJKiwstDoagP9CcQLgdkpLS1VaWqri4mKroziVYRhKSUlRWFiYysrK1KtXL1177bVKT09XWVmZwsLClJKSIsMwrI4K4P+jOAFwGwUFBbLb7frDH/6g7OxsdejQQXa7XQUFBVZHc4rU1FRlZGQoPz9fc+fOlZ+fn3x8fBQeHq65c+dqz549ysjIUGpqqtVRAfx/nlYHAADpx9IUERGhkpKS6hWWyspKrV+/XhEREcrNzVVwcLDFKRtPYWGh5syZo/z8fLVv3/68YwICApSZmamQkBBNnDhRgYGBLk4J4L+x4gTALdx77701StM5hmGopKRE06ZNsyiZc8yfP18TJkyotTSd0759e8XHxystLc1FyQBcCCtOACxXXFysrKysWvfyGIahzMxMtW/fXh4ezePfe0eOHJGnp6deeuml6nMVFRWSpKioqBpjS0tLVV5erpSUFFdGBHAeFCcAljt69Ki8vb1VXl5e65iWLVvqjTfeaDaP67p27apevXrJ29u7+tz27dvPO9bLy0vHjh1zVTQAF0BxAmC5du3aVa+21Obs2bPq1auX/P39XZTKubp376758+crPDy8+ty5laasrKwaY3Nzc5WQkODCdABq0zzWvAE0af7+/oqKipLNZjvv1202m6Kjo5tNaZKkuLg4ORwOU2MdDodGjBjh3EAATKE4AXAL8+bNU6tWrX5Wnmw2m1q1aqXnn3/eomTOMXXqVC1cuFBHjhy54LiioiI5HA5NmTLFRckAXAjFCYBbCA4OVm5urmJiYuTl5aUWLVrIx8dHMTExze6tCCQpMDBQiYmJstvttZanoqIi2e12JSYm8lYEgJtgjxMAtxEcHKx169Zp8eLFSktL09tvv92sHs/9t6SkJElSSEiI4uPjVVpaKi8vL+Xm5srhcMjhcCgxMbF6HADrseIEwO34+fnJz8+vWZcm6cfHkMnJycrLy5Ofn58OHTqk/fv3KyEhQX5+fsrLy1NycnKte78AuB4rTgBgscDAQKWkpOijjz7S5MmTFRsba3UkALVgxQkAAMAkihMAAIBJFCcAAACTKE4AAAAmUZwAAABMojgBAACYRHECAAAwieIEAABgEsUJAADAJIoTAACASRQnAABcyDAMvfzyy5o/f74Mw7A6jst8++23uv/++7Vnzx6rozQIxQkAABepqKjQ1KlT9dxzz+mll17SHXfcofLycqtjOd0nn3yi/v37q7CwUNHR0Vq9erXVkeqN4gQAgAt8++23uuWWW3TkyBFt3bpV2dnZ+u677zR48GAdP37c6nhOk5mZqd/+9rd6+OGH9Z///EerVq3S1KlT9eyzzzbJFTeKEwAATrZ3717169dPkZGRWrZsmfz8/HTppZfqrbfe0k033aR+/frp448/tjpmozIMQ88995wSEhL09ttvKyEhQZLUv39/bd++XYsXL1ZCQkKTW3GjOAEA4ERr165VVFSUHn30UT399NNq0aKFMjMz1aNHD3Xv3l1+fn5KSUnRwIEDtWrVKqvjNoqKigpNmTJFL7/8srZt26YBAwZU33NQUJAWLVqk7OxslZaWauDAgTp27JjVkU2jOAEA4ASGYWj27NmaPHmyli9frj/84Q+SpMrKSt19991at26d9u7dqyVLligsLEyrV6/WH//4Rz3zzDNN8hHWOd98841uueUWHT16VFu3blXXrl3Pe88HDhzQf/7zHw0aNEj9+vXTRx99ZHV0UyhOAAA0soqKCk2ePFmvvfaatm3bpuuvv776azt27FBQUJC6desmb29vjRs3TitWrFBkZKS2b9+upUuXatKkSU3uEZYk5efnKzIyUv37969+JCnVfs8eHh564okn9NRTT2nQoEFasWKFxXfwyyhOAAA0ouPHj2vw4MEqLi7Wli1b1KVLlxpfP3z4sDp37lx93KlTJx0+fFiS1LlzZ23evFllZWWKjo7W0aNHXZq9IdasWaPo6Gg99thjeuqpp9SiRYvqr13oniVp3LhxWrNmje6++279/e9/d+sVN4oTAACNZM+ePYqMjNSAAQP01ltv6dJLL63z39GyZUu9+eabGjx4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du3a1Xgkdz5t2rTRiBEjGhYMqAeKEwCgwbp06SKbzWbZtQFXoTgBABps//79VkcAXII9TgAAACZRnAAAAEyiOAEAAJhEcQIAADCJ4gQAAGASxQkAAMAkihMAAIBJFCcAAACTKE4AAAAmUZwAAABM4iNXADjFN998o23bttVr7o4dO3T06FGtWrWqXvM7dOiga6+9tl5zAVzY+++/r5MnT9Zr7qlTp7Rhwwa1adOmXvNjYmLk7e1dr7mNheIEwCneeecdxcfHq0+fPurUqVOd5hqGoTZt2igtLa1O8yorK/Xuu+/quuuu0wcffFCnuQB+WUVFhW677TadPXtWN954Y53nR0RE6O23367zB0Ln5+dr//79ysvLU+/evet83cZEcQLgFLfffru++eYbPfXUU5o3b54GDBjg1OuVlpbq9ttv14ABA5SRkeHUawEXK29vb2VnZ2v48OEKDg7Ws88+qxYtWjj1mgsXLtT999+v1atXW16aJPY4AXASm82mP//5z3r11Vc1atQopaenm56bmZmpHj16KCgoSE899dQvjv/qq690/fXXq0OHDnrnnXd0xRVXNCA5gAv5zW9+o5ycHH344YcaNmyYTpw4YWpeXb+vKysr9de//lUzZ87U+++/ryFDhjQ0eqOgOAFwKrvdrk2bNiklJUUPPPCAKisrLzi+srJSd999t9atW6e9e/dqyZIl2rt3b63jN2/erOuvv1533nmn/vWvf1m+/wG4GPj7+yszM1NXXnmlrrvuOu3bt++C4+v6fV1aWqqRI0dq27ZtysnJUUhISGPfQr1RnAA4Xc+ePZWTk6Ndu3YpLi5OJSUltY7dsWOHgoKC1K1bN3l7e2vcuHFasWLFece+8soruvXWW/Xaa69p2rRpdd43AaD+vLy89OKLL+qee+7RDTfcoKysrFrH1uX7ev/+/brhhhvUrl07vfvuu2rdurWT7qB+KE4AXOKKK67QO++8o86dO+v666/Xl19+ed5xhw8fVufOnauPO3XqpMOHD9cYU1lZqfvvv19PPfWUNm/erFtuucWp2QHU7q677tKiRYs0duzYWn+hw8z3tSRlZ2fruuuu0x133KG0tDS3XEGmOAFwmXP/Qv3jH/+o66+/Xps2barz33HixAkNHz5cH374obZv364ePXo4ISmAuhg0aJCys7M1e/ZsTZs2TWfPnq3z35Genq5Ro0bp1Vdf1Z///Ge3XUGmOAFwKZvNpnvuuUcLFy7UbbfdppdffrnG1zt27KiDBw9WHx86dEgdO3aUJO3bt0/XXXedrrzySq1bt07+/v4uzQ6gdsHBwdq+fbs+++wzDR06VN9//3311y70fV1ZWakHHnhAKSkp2rRpk+x2u6uj1wnFCYAlbr75Zm3evFnPPPOMEhMTqzeNR0REqKCgQF999ZUqKiq0dOlSxcbGKisrSzfccIPuuece/fOf/5SXl5fFdwDgv/3617/WmjVr9Jvf/Eb9+/dXQUGBpNq/r0tKShQXF6ddu3YpJydHPXv2tPgOfhnFCYBlevTooZycHO3Zs6f615o9PT31wgsvKCYmRj179tSYMWO0detWjR07VosWLdJdd91ldWwAF+Dp6annnntOf/nLXzRgwABt3LjxvN/Xvr6+uv7669W5c+cm9TYiFCcAlrr88su1du1aXXXVVdW/1jxkyBB9/vnn+uyzz3Ts2DH94x//UHZ2tgYNGmR1XAAmTZkyRUuXLtXtt9+ul156qfr7et++fbrxxht1ww036I9//KNefPHFJrWCTHECYDkvLy+98MILuvfee6t/rfn777/XsGHD9Omnn2r79u0KDg62OiaAOoqOjlZ2drbmzZune+65R2fPntWCBQt022236fXXX9c999zjtpvAa8NHrgBwG3/605/Uo0cPjR07Vr6+voqLi9M//vEPeXrynyqgqQoKCtK2bds0fvx49ezZUx4eHtq8ebO6d+9udbR64b9GANzKwIEDtXXrVn322Wdu8xELABrmsssu06pVq/Tmm2/Kbrfr8ssvtzpSvVGcALidq666SldddZXVMQA0ohYtWmj8+PFWx2gw9jgBAACYRHECAAAwieIEAABgEsUJAADAJIoTAACASRQnAAAAkyhOAAAAJlGcAAAATKI4AQAAmERxAgAAMKnJf+RK69at5eFB/7sY+Pr68mGvAABLNfmfQt98842qqqqsjgEnKiws1Pz58zVr1ixVVVXptddeU1xcnKZOnarAwECr4wEALiJNfqmmoqJChYWFKi4utjoKGplhGEpJSVFYWJjKysoUGhqq8PBwpaenq6ysTGFhYUpJSZFhGFZHBQBcJJpscSooKJDdbldWVpbuu+8+dejQQXa7XQUFBVZHQyNJTU1VRkaG8vPzNXfuXPn5+cnHx0fh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3YrTT40dO1Zr1qzR3Xffrb///e/66TsndOzYUQcPHqw+PnTokDp27Fjj+MYbb9SvfvUrvf/++5QmNxceHq7t27dr2bJlio+P16lTp6q/9kuv9Q8//KBx48Zp7dq1ysnJoTQBAJzGrYuTJEVERCgnJ0dvv/22Jk6cqNOnT1efLygo0FdffaWKigotXbpUsbGxkn7cE9O/f3+NGTNGr732mn71q19ZeQswqWPHjvrggw9UVVWlqKgoFRUVSbrwa3348GH99re/lZeXl7KysijIAACncvviJP34A3XTpk06c+aMoqOjdeTIEXl6euqFF15QTEyMevbsqTFjxigkJERLlizR0KFD9eKLL+rBBx9kj0sT4+vrq8WLF2vYsGGKjIzUrl27an2tc3Nz1b9/f916661auHAhBRkA4HRu8c7hZhmGoZSUFL388stavnx5jUcyVVVVeuyxx+RwOLRixQpdc801FiZFY3jrrbf0xz/+Uf/6179066231vjaG2+8oXvvvbfe+9+aEt45HADch1tuDq+NzWbTI488op49eyomJkb/+te/NGrUKJWVlWnixIk6evSocnJy1LZtW6ujohHceuut6tatm+Li4pSfn69HHnlEhmFo5syZev311/Xuu++qd+/eVscEAFxEmlRxOmf06NHq1q2bRowYoZ07d2rdunXq06ePFi9ebOpdqNF0hIWFKScnRyNHjtTevXt19uxZFRUVKScnR+3atbM6HgDgItMk9jidT9++fZWTk6M9e/YoPj5er7zyCqWpmQoICFBWVpYuu+wytWnTRhs3bqQ0AQAs0aT2OAEXI/Y4AYD7aLIrTgAAAK5GcQIAADCJ4gQAAGASxQkAAMAkihPg5q655hp5ejbJdw4BgGaH36oDAAAwiRUnAAAAkyhOAAAAJlGcAAAATKI4AQAAmERxAgAAMIniBAAAYBLFCQAAwCSKEwAAgEkUJwAAAJMoTgAAACZRnAAAAEyiOAEAAJhEcQIAADCJ4gQAAGASxQkAAMAkihMAAIBJFCcAAACTKE4AAAAmUZwAAABMojgBAACYRHECAAAwieIEAABgEsUJAADAJIoTAACASRQnAAAAkyhOAAAAJlGcAAAATKI4AQAAmERxAgAAMIniBAAAYBLFCQAAwCSKEwAAgEkUJwAAAJMoTgAAACZRnAAAAEyiOAEAAJhEcQIAADCJ4gQAAGASxQkAAMAkihMAAIBJFCcAAACTKE4AAAAmUZwAAABMojgBAACYRHECAAAwieIEAABgEsUJAADAJIoTAACASRQnAAAAkyhOAAAAJlGcAAAATKI4AQAAmERxAgAAMIniBAAAYNL/A06hoE6RWkgeAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from discopy.quantum.circuit import Functor, Id\n",
    "\n",
    "def cnot_ob(ty):\n",
    "    # this implicitly maps all rigid types to 1 qubit\n",
    "    return qubit ** len(ty)\n",
    "\n",
    "def cnot_ar(box):\n",
    "    dom = len(box.dom)\n",
    "    cod = len(box.cod)\n",
    "    width = max(dom, cod)\n",
    "    circuit = Id(width)\n",
    "    for i in range(width - 1):\n",
    "        circuit >>= Id(i) @ CX @ Id(width - i - 2)\n",
    "\n",
    "    # Add Bras (post-selection) and Kets (states)\n",
    "    # to get a circuit with the right amount of\n",
    "    # input and output wires\n",
    "    if cod <= dom:\n",
    "        circuit >>= Id(cod) @ Bra(*[0]*(dom - cod))\n",
    "    else:\n",
    "        circuit <<= Id(dom) @ Ket(*[0]*(cod - dom))\n",
    "    return circuit\n",
    "\n",
    "cnot_functor = Functor(ob=cnot_ob, ar=cnot_ar)\n",
    "diagram.draw()\n",
    "cnot_functor(diagram).draw(figsize=(8, 8))"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
