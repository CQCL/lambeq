{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DisCoCat in lambeq"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "In the previous tutorial, we learnt the basics of :term:`monoidal categories <monoidal category>` and how to represent them in ``lambeq``. In this tutorial, we look at the `Distributional Compositional Categorical` model [CSC2010]_, which uses functors to map diagrams from the `rigid category <monoidal.ipynb#Rigid-monoidal-categories>`_ of `pregroup grammars <../string-diagrams.rst#Pregroup-grammars>`_ to vector space semantics.\n",
    "\n",
    ":download:`Download code <../_code/discocat.ipynb>`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pregroup grammars"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "`Pregroup grammar <../string-diagrams.rst#Pregroup-grammars>`_ is a grammatical formalism devised by Joachim Lambek in 1999 [Lam1999]_. In pregroups, each word is a morphism with type :math:`I \\to T` where :math:`I` is the monoidal unit and :math:`T` is a rigid type, referred to as the *pregroup type*. Here are some examples for pregroup type assignments:\n",
    "\n",
    "* a noun is given the base type :math:`n`.\n",
    "* an adjective consumes a noun on the noun's left to return another noun, so it is given the type :math:`n\\cdot n^l`.\n",
    "* a transitive verb consumes a noun on its left and another noun on its right to give a sentence, so is given the type :math:`n^r \\cdot s \\cdot n^l`.\n",
    "\n",
    "In the context of pregroups, the :term:`adjoints <adjoint>` :math:`n^l` and :math:`n^r` can be thought of as the left and right inverses of a type :math:`n` respectively. In a pregroup derivation, the words are concatenated using the monoidal product :math:`\\otimes` and linked using :term:`cups <cup>`, which are special morphisms that exist in any :term:`rigid category`. A sentence is grammatically sound if its derivation has a single uncontracted sentence wire.\n",
    "\n",
    "In ``lambeq``, words are defined using the :py:class:`~lambeq.backend.grammar.Word` class. A :py:class:`~lambeq.backend.grammar.Word` is just a :py:class:`~lambeq.backend.grammar.Box` where the input type is fixed to be the monoidal unit :math:`I` (or ``Ty()``). A pregroup derivation diagram can be drawn using either the :py:meth:`.backend.grammar.Diagram.draw` method or the :py:func:`.backend.drawing.draw` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from lambeq.backend.drawing import draw\n",
    "from lambeq.backend.grammar import Cap, Cup, Id, Ty, Word\n",
    "\n",
    "\n",
    "n, s = Ty('n'), Ty('s')\n",
    "\n",
    "words = [\n",
    "    Word('she', n),\n",
    "    Word('goes', n.r @ s @ n.l),\n",
    "    Word('home', n)\n",
    "]\n",
    "\n",
    "cups = Cup(n, n.r) @ Id(s) @ Cup(n.l, n)\n",
    "\n",
    "assert Id().tensor(*words) == words[0] @ words[1] @ words[2]\n",
    "assert Ty().tensor(*[n.r, s, n.l]) == n.r @ s @ n.l\n",
    "\n",
    "diagram = Id().tensor(*words) >> cups\n",
    "draw(diagram)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. note::\n",
    "\n",
    "  In ``lambeq``, method :py:meth:`~lambeq.backend.grammar.Diagram.create_pregroup_diagram` provides an alternative, more compact way to create pregroup diagrams, by explicitly defining a list of :term:`cups <cup>` and :term:`swaps <swap>`. For example, the above diagram can be also generated using the following code:\n",
    "\n",
    "  .. code-block:: python\n",
    "\n",
    "     from lambeq.backend.grammar import Diagram, Ty\n",
    "\n",
    "     words = [Word('she', n), Word('goes', n.r @ s @ n.l), Word('home', n)]\n",
    "     morphisms = [(Cup, 0, 1), (Cup, 3, 4)]\n",
    "     diagram = Diagram.create_pregroup_diagram(words, morphisms)\n",
    "     \n",
    "  where the numbers in ``morphisms`` define the indices of the corresponding wires at the top of the diagram\n",
    "  ``(n @ n.r @ s @ n.l @ n)``."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before normal form: she, goes, home, CUP, CUP\n",
      "After normal form: she, goes, CUP, home, CUP\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from lambeq.backend.drawing import draw_equation\n",
    "\n",
    "# In the original diagram, words appear before the cups\n",
    "print('Before normal form:', ', '.join(map(str, diagram.boxes)))\n",
    "\n",
    "diagram_nf = diagram.normal_form()\n",
    "print('After normal form:', ', '.join(map(str, diagram_nf.boxes)))\n",
    "\n",
    "draw_equation(diagram, diagram_nf, symbol='->', figsize=(10, 4), draw_as_pregroup=False, foliated=True)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "In the example above, the application of normal form to the diagram introduces a :term:`cup` before the word \"home\"."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Functors"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Given :term:`monoidal categories <monoidal category>` :math:`\\mathcal{C}` and :math:`\\mathcal{D}`, a monoidal :term:`functor` :math:`F: \\mathcal{C} \\to \\mathcal{D}` satisfies the following properties:\n",
    "\n",
    "- monoidal structure of objects is preserved: :math:`F(A \\otimes B) = F(A) \\otimes F(B)`\n",
    "- :term:`adjoints <adjoint>` are preserved: :math:`F(A^l) = F(A)^l`, :math:`F(A^r) = F(A)^r`\n",
    "- monoidal structure of morphism is preserved: :math:`F(g \\otimes f) = F(g) \\otimes F(f)`\n",
    "- compositonal structure of morphisms is preserved: :math:`F(g \\circ f) = F(g) \\circ F(f)`\n",
    "\n",
    "Put simply, a :term:`functor` is a structure-preserving transformation. In a free :term:`monoidal category`, applying a :term:`functor` to a diagram amounts to simply providing a mapping for each generating object and morphism. In ``lambeq``, a :term:`functor` is defined by passing mappings (dictionaries or functions) as arguments ``ob`` and ``ar`` to the :py:class:`~lambeq.backend.grammar.Functor` class.\n",
    "\n",
    ":term:`Functors <functor>` are one of the most powerful concepts in category theory. In fact, the encoding, rewriting and parameterisation steps of ``lambeq``'s :ref:`pipeline <sec-pipeline>` are implemented individually as :term:`functors <functor>`, resulting in an overall functorial transformation from :term:`parse trees <syntax tree>` to :term:`tensor networks <tensor network>` and :term:`circuits <quantum circuit>`. More specifically:\n",
    "\n",
    "- :py:class:`lambeq.CCGParser` uses a :term:`functor` to transform a biclosed CCG diagram to a pregroup diagram [YK2021]_.\n",
    "- :py:class:`lambeq.Rewriter` functorially transforms a pregroup diagram to a simpler pregroup diagram.\n",
    "- :py:class:`lambeq.TensorAnsatz` functorially transforms a pregroup diagram to a tensor diagram, which can be evaluated as a tensor network using NumPy, JAX or PyTorch.\n",
    "- :py:class:`lambeq.CircuitAnsatz` functorially transforms a pregroup diagram to a :term:`quantum circuit`, for evaluation on a quantum device.\n",
    "\n",
    "Below we present two examples of :term:`functors <functor>`, implemented in ``lambeq``."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 1: \"Very\" functor"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "This :term:`functor` adds the word \"very\" in front of every adjective in a :term:`DisCoCat` diagram. \n",
    "Since the mapping is from a :py:class:`.grammar.Diagram` to another :py:class:`.grammar.Diagram`, a :py:class:`.grammar.Functor` should be used. Further, the word \"very\" modifies an adjective to return another adjective, so it should have type \n",
    ":math:`(n \\otimes n^l) \\otimes (n \\otimes n^l)^l = n \\otimes n^l \\otimes n^{ll} \\otimes n^l`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from lambeq import BobcatParser\n",
    "parser = BobcatParser(verbose='suppress')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from lambeq.backend.drawing import draw_equation\n",
    "from lambeq.backend.grammar import Diagram, grammar, Functor\n",
    "\n",
    "# determiners have the same type as adjectives\n",
    "# but we shouldn't add 'very' behind them\n",
    "determiners = ['a', 'the', 'my', 'his', 'her', 'their']\n",
    "\n",
    "# type for an adjective\n",
    "adj = n @ n.l\n",
    "very = Word('very', adj @ adj.l)\n",
    "cups = Diagram.cups(adj.l, adj)\n",
    "\n",
    "def very_ob(_, ty):\n",
    "    return ty\n",
    "\n",
    "def very_ar(_, box):\n",
    "    if box != very:\n",
    "        if box.name not in determiners:\n",
    "            if box.cod == adj:\n",
    "                return very @ box >> Id(adj) @ cups\n",
    "    return box\n",
    "\n",
    "very_functor = Functor(grammar,\n",
    "                       ob=very_ob,\n",
    "                       ar=very_ar,)\n",
    "\n",
    "diagram = parser.sentence2diagram('a big bad wolf')\n",
    "new_diagram = very_functor(diagram)\n",
    "\n",
    "draw_equation(diagram, new_diagram, symbol='->', figsize=(10, 4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 2: Twist functor"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "In this :term:`functor`, :term:`cups <cup>` and :term:`caps <cap>` are treated specially and are not passed to the ``ar`` function; instead they are passed to :py:meth:`.grammar.Diagram.register_special_box` method.\n",
    "\n",
    "Here is an example of how to map a :term:`cup` to a custom diagram, such as a \"twisted\" :term:`cup`. Note that it is up to the user to ensure the new :term:`cups <cup>` and :term:`caps <cap>` satisfy the :term:`snake equations`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 400x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from lambeq.backend.grammar import Category, Ty, Layer, Diagram, Functor, Box, Cup, Cap, Swap\n",
    "\n",
    "\n",
    "twisted = Category('twisted')\n",
    "\n",
    "@twisted('Diagram')\n",
    "class TwistedDiagram(Diagram): ...\n",
    "\n",
    "@twisted('Ty')\n",
    "class TwistedTy(Ty): ...\n",
    "\n",
    "@twisted('Box')\n",
    "class TwistedBox(Box): ...\n",
    "\n",
    "@twisted('Layer')\n",
    "class TwistedLayer(Layer): ...\n",
    "\n",
    "class TwistedCup(Cup, TwistedBox): ...\n",
    "\n",
    "class TwistedCap(Cap, TwistedBox): ...\n",
    "\n",
    "@TwistedDiagram.register_special_box('swap')\n",
    "class TwistedSwap(Swap, TwistedBox): ...\n",
    "\n",
    "@TwistedDiagram.register_special_box('cap')\n",
    "def twisted_cap_factory(left, right, is_reversed=False):\n",
    "    caps = TwistedCap(right, left, is_reversed=not is_reversed)\n",
    "    swaps = TwistedSwap(right, left)\n",
    "    return caps >> swaps\n",
    "\n",
    "@TwistedDiagram.register_special_box('cup')\n",
    "def twisted_cup_factory(left, right, is_reversed=False):\n",
    "    swaps = TwistedSwap(left, right)\n",
    "    cups = TwistedCup(right, left, is_reversed=not is_reversed)\n",
    "    return swaps >> cups\n",
    "\n",
    "\n",
    "twist_functor = Functor(\n",
    "    ob=lambda _, ty: TwistedTy(ty.name),\n",
    "    ar=lambda func, box: TwistedBox(box.name, func(box.dom), func(box.cod)),\n",
    "    target_category=twisted)\n",
    "\n",
    "diagram = parser.sentence2diagram('This is twisted')\n",
    "twisted_diagram = twist_functor(diagram)\n",
    "\n",
    "draw(diagram)\n",
    "draw(twisted_diagram)\n",
    "\n",
    "snake = Id(n) @ Cap(n.r, n) >> Cup(n, n.r).to_diagram() @ Id(n)\n",
    "draw_equation(twist_functor(snake), Id(n), figsize=(4, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 200x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 200x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "TwistedDiagram.cups(n, n.r).draw(figsize=(2, 2))\n",
    "TwistedDiagram.caps(n.r, n).draw(figsize=(2, 2))"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. note::\n",
    "    \n",
    "   Twisting the nested :term:`cups <cup>` for \"is\" and \"twisted\" together is **not** a functorial operation, so it cannot be implemented using :py:class:`.grammar.Functor`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classical DisCoCat: Tensor networks"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The classical version of :term:`DisCoCat` sends diagrams in the :term:`category` of pregroup derivations to tensors in the :term:`category` of vector spaces **FVect**. **FVect** is a :term:`monoidal category` with vector spaces (e.g. :math:`\\mathbb{R}^2 \\otimes \\mathbb{R}^2`) as objects and linear maps between vector spaces as morphisms. It is in fact a :term:`compact closed category`, which is a special case of rigid categories where :math:`A^l = A^r = A^*`.\n",
    "\n",
    "Using the :py:mod:`lambeq.backend.tensor` module, you can define a free :term:`category` of vector spaces: objects are defined with the :py:class:`lambeq.backend.tensor.Dim` class and morphisms with the :py:class:`lambeq.backend.tensor.Box` class. Composite morphisms are constructed by freely combining the generating morphisms using the ``>>`` operator. This is similar to how :term:`rigid categories <rigid category>` and :term:`monoidal categories <monoidal category>` are defined. The concrete value of the tensor is passed to the ``data`` attribute as an unshaped list; ``lambeq`` will reshape it later based on the input and output dimensions.\n",
    "\n",
    "It is worth noting that :py:class:`lambeq.backend.tensor.Diagram` delays the computation of tensor contractions until :py:meth:`.tensor.Diagram.eval` is called."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dim(1) @ Dim(2) @ Dim(3)=Dim(2, 3)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from lambeq.backend.tensor import Box, Diagram, Dim, Id\n",
    "\n",
    "# Dim(1) is the unit object, so disappears when tensored with another Dim\n",
    "print(f'{Dim(1) @ Dim(2) @ Dim(3)=}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id_box.eval()=array([[1., 0.],\n",
      "       [0., 1.]])\n"
     ]
    }
   ],
   "source": [
    "id_box = Box('Id Box', Dim(2), Dim(2), data=[1,0,0,1])\n",
    "id_tensor = np.array([1, 0, 0, 1]).reshape((2, 2))\n",
    "\n",
    "# the actual values of id_box and id_tensor are equal\n",
    "assert (id_box.array == id_tensor).all()\n",
    "print(f'{id_box.eval()=}')"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "In the :term:`category` of vector spaces, :term:`cups <cup>`, :term:`caps <cap>` and :term:`swaps <swap>` take on concrete values as tensors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 0, 0],\n",
       "       [0, 1, 0],\n",
       "       [0, 0, 1]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Diagram.cups(Dim(3), Dim(3)).eval(dtype=np.int64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[[1, 0],\n",
       "         [0, 0]],\n",
       "\n",
       "        [[0, 0],\n",
       "         [1, 0]]],\n",
       "\n",
       "\n",
       "       [[[0, 1],\n",
       "         [0, 0]],\n",
       "\n",
       "        [[0, 0],\n",
       "         [0, 1]]]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Diagram.swap(Dim(2), Dim(2)).eval(dtype=np.int64)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "To implement a :term:`functor` from :py:class:`.grammar.Diagram` to :py:class:`.tensor.Diagram`, use a :py:class:`.grammar.Functor` with ``target_category = lambeq.backend.tensor.tensor``, and with :py:class:`.tensor.Dim` and :py:class:`.tensor.Diagram` as ``cod``, respectively. In addition, :py:class:`.tensor.Diagram`\\ s can be instantiated with concrete values to be evaluated later using a custom tensor contractor. See the implementation of :py:class:`~lambeq.ansatz.tensor.TensorAnsatz` for an example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"This\" becomes\n",
      "[1. 1.]\n",
      "\"is\" becomes\n",
      "[[[[1. 1.]\n",
      "   [1. 1.]]\n",
      "\n",
      "  [[1. 1.]\n",
      "   [1. 1.]]]\n",
      "\n",
      "\n",
      " [[[1. 1.]\n",
      "   [1. 1.]]\n",
      "\n",
      "  [[1. 1.]\n",
      "   [1. 1.]]]]\n",
      "\"twisted\" becomes\n",
      "[[1. 1.]\n",
      " [1. 1.]]\n",
      "one_diagram = Diagram(dom=Dim(1), cod=Dim(2), layers=[Layer(left=Dim(1), box=[This; Dim(1) -> Dim(2)], right=Dim(1)), Layer(left=Dim(2), box=[is; Dim(1) -> Dim(2, 2, 2, 2)], right=Dim(1)), Layer(left=Dim(2, 2, 2, 2, 2), box=[twisted; Dim(1) -> Dim(2, 2)], right=Dim(1)), Layer(left=Dim(2, 2, 2, 2), box=[CUP; Dim(2, 2) -> Dim(1)], right=Dim(2)), Layer(left=Dim(2, 2, 2), box=[CUP; Dim(2, 2) -> Dim(1)], right=Dim(1)), Layer(left=Dim(1), box=[CUP; Dim(2, 2) -> Dim(1)], right=Dim(2))])\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from lambeq.backend.grammar import Functor\n",
    "from lambeq.backend import tensor\n",
    "\n",
    "\n",
    "def one_ob(_, ty):\n",
    "    dims = [2] * len(ty)\n",
    "    return Dim(*dims) # does Dim(2,2,..)\n",
    "\n",
    "def one_ar(_, box):\n",
    "    dom = one_ob(_, box.dom)\n",
    "    cod = one_ob(_, box.cod)\n",
    "    box = Box(box.name, dom, cod, np.ones((dom @ cod).dim))\n",
    "    print(f'\"{box}\" becomes')\n",
    "    print(box.data)\n",
    "    return box\n",
    "\n",
    "one_functor = Functor(\n",
    "    target_category=tensor.tensor,\n",
    "    ob=one_ob, ar=one_ar,\n",
    ")\n",
    "one_diagram = one_functor(diagram)\n",
    "print(f'{one_diagram = }')\n",
    "one_diagram.draw()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quantum DisCoCat: Quantum circuits"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The quantum version of :term:`DisCoCat` sends diagrams in the :term:`category` of pregroup derivations to :term:`circuits <quantum circuit>` in the category of Hilbert spaces **FHilb**. This is a :term:`compact closed <compact closed category>` monoidal category with Hilbert spaces (e.g. :math:`\\mathbb{C}^{2^n}`) as objects and unitary maps between Hilbert spaces as morphisms.\n",
    "\n",
    "The :py:mod:`lambeq.backend.quantum` module is a framework for the free :term:`category` of :term:`quantum circuits <quantum circuit>`: objects are generated using the :py:class:`.quantum.Ty` class and morphisms by using the available :term:`quantum gates <quantum gate>` which are subclasses of :py:class:`.quantum.Box`. In ``lambeq``, rotation values range from :math:`0` to :math:`1` rather than from :math:`0` to :math:`2\\pi`. The circuit can then either be evaluated using tensor contraction with the :py:meth:`~lambeq.backend.quantum.Diagram.eval` method, or exported to :term:`pytket` using the :meth:`~lambeq.backend.quantum.Diagram.to_tk` method, which supports multiple hardware backends."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "tk.Circuit(4).CX(1, 2).X(3).CX(0, 1).CX(2, 3).Rz(0.2, 0).Rz(0.4, 1).Rz(0.6, 2).Rz(0.8, 3)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from lambeq.backend.quantum import CX, Id, qubit, Rz, X\n",
    "\n",
    "\n",
    "circuit = Id(4)\n",
    "circuit >>= Id(1) @ CX @ X\n",
    "circuit >>= CX @ CX\n",
    "circuit >>= Rz(0.1) @ Rz(0.2) @ Rz(0.3) @ Rz(0.4)\n",
    "\n",
    "same_circuit = (Id(4).CX(1, 2).X(3).CX(0, 1).CX(2, 3)\n",
    "                .Rz(0.1, 0).Rz(0.2, 1).Rz(0.3, 2).Rz(0.4, 3))\n",
    "assert circuit == same_circuit\n",
    "\n",
    "circuit.draw(draw_type_labels=False)\n",
    "circuit.to_tk()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "To apply multi-qubit :term:`gates <quantum gate>` to non-consecutive :term:`qubits <qubit>`, use :term:`swaps <swap>` to permute the wires, apply the :term:`gate <quantum gate>`, then unpermute the wires. These :term:`swaps <swap>` are only logical swaps and do not result in more gates when converted to :term:`tket` format."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 300x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "tk.Circuit(3).CX(2, 0)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from lambeq.backend.quantum import Diagram as Circuit, SWAP\n",
    "\n",
    "# to apply a CNOT on qubits 2 and 0:\n",
    "circuit1 = Id(3)\n",
    "circuit1 >>= SWAP @ Id(1)\n",
    "circuit1 >>= Id(1) @ SWAP\n",
    "circuit1 >>= Id(1) @ CX\n",
    "circuit1 >>= Id(1) @ SWAP\n",
    "circuit1 >>= SWAP @ Id(1)\n",
    "\n",
    "# or you can do\n",
    "perm = Circuit.permutation(circuit1.dom, [2, 0, 1])\n",
    "circuit2 = perm[::-1] >> Id(1) @ CX >> perm\n",
    "\n",
    "assert circuit1 == circuit2\n",
    "circuit1.draw(figsize=(3, 3), draw_type_labels=False)\n",
    "\n",
    "# no swaps introduced when converting to tket\n",
    "circuit1.to_tk()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "We also have long-ranged controlled gates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAUAAAADcCAYAAAABQ3gmAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/SrBM8AAAACXBIWXMAAA9hAAAPYQGoP6dpAAASLElEQVR4nO3da0xcZQKH8f8wtCCFWiutqBVr8Aa0yFATix92bdKsNuBCYoofHLUG6g1jrFfUGo27trpW3d1IWVnrlpRmV/jSpmO9tElNSCqpwpSMBW80LdUWFC8tA6WW4eyHZiaLXSrMnNMZfJ9fMkk5M3PeF6Y8nJlz5ozLsixLAGCgpHhPAADihQACMBYBBGAsAgjAWAQQgLEIIABjEUAAxiKAAIxFAAEYiwACMBYBBGAsAgjAWAQQgLEIIABjEUAAxiKAAIxFAAEYiwACMBYBBGAsAgjAWAQQgLEIIABjEUAAxiKAAIxFAAEYy7EAnjx5Us3NzTp06JBTQyCBDA8Pq7m5WYcPH473VHAWDA4Oqrm5WX19ffGeSkwcC+DQ0JAqKirU2trq1BBIIEePHlVFRYXa29vjPRWcBd99950qKioUCATiPZWY8BQYgLEIIABjEUAAxiKAAIxFAAEYiwACMBYBBGAsAgjAWAQQgLEIIABjEUAAxiKAAIxFAAEYiwACMBYBBGAsAgjAWAQQgLEIIABjEUAAxiKAAIxFAAEYiwACMBYBBGAsAgjAWAQQgLEIIABjEUAAxiKAAIxFAAEYiwACMBYBBGAsAgjAWAQQgLEIIABjEUAAxiKAAIxFAAEYiwACMBYBBGCs5HhPAIAzenp61N/f78i6Dx8+LEn68ssvNXv2bEfGkKTMzExlZ2c7tn7HAmhZlhYvXqxp06Y5NQQSSPjxTk7mb2oi6OnpUW5uroaGhhwd5/7773d0/Wlpaerq6nIsgo79b3W5XGptbdXJkyedGgIJJPx4j4yMxHsqkNTf36+hoSE1NjYqNzc33tOJSldXl7xer/r7+6deAAHEX25uroqKiuI9jYTFThAAxiKAAIzlWAAHBgYkSV988YUCgUDkawBIFLYH0O/3q6qqSjk5OZKk1atXq6CgQHPmzFFVVZX27t1r95AAEBXbAhgMBlVeXq6ioiI1NDTo559/HnP9iRMn1NDQII/Ho/Lycg0ODto1NABExZYABoNBLVmyRD6fT5LGPRQivNzn8+mGG25QMBi0Y3gADvr+++81d+5cHThwwNFx3nvvPRUWFmp0dNTRcf6XLQH0er3y+/0KhUITun0oFJLf75fX67VjeADjePbZZ+VyueRyuTRt2jRddtllevzxxzU8PDzhdbzwwgsqKyvT/PnzI8t6enpUUlKitLQ0zZ07V4899tivHgM6f/78yFzClxdffDFy/U033aRp06Zp8+bNk/4+oxXzcYB+v19bt26d9P1CoZC2bt2qvXv3qrCwMNZpABjHTTfdpH/96186efKk2tradOedd8rlcumll1761fsODQ1pw4YNev/99yPLQqGQSkpKlJWVpd27d+vIkSO64447NG3aNK1Zs+aM63v++ee1cuXKyNcZGRljrl+xYoX+/ve/6/bbb5/kdxmdmLcAa2tro377U3Jysmpra2OdAoAzSElJUVZWli655BKVl5dr6dKl2rFjhyTpueeeO22rzOVyaePGjZKk7du3KyUlRYsXL46s74MPPlBnZ6caGxtVWFioZcuW6U9/+pNqa2tPe+3/lzIyMpSVlRW5zJgxY8z1N998sz755BN1d3fb+0MYR0wBHBgYUGNjY9RvfxoZGVFjYyOHyABnyaeffqrdu3dr+vTpkqRHH31UR44ciVzWrVuntLQ0XXvttZKklpYWLVq0aMw6PvroIy1cuFAXXHBBZNmNN96oY8eOad++fWcc/8UXX9T5558vj8ejl19++bR2ZGdn64ILLlBLS4sd3+6viukp8IEDB3TixImYJjA8PKxnnnlmzA8TU094h1Zzc7MCgUCcZ4P/3RLz+XxKT0/XyMiITpw4oaSkJL3++uuSpPT0dKWnp0uSWltbtXr1ajU0NGjBggWSpIMHD+qiiy4as+7e3t7Tfl/DX/f29o47pwcffFBFRUWaPXu2du/erSeffFJHjhzRq6++OuZ2F110kQ4ePKiCgoIov/uJiymAdu3FbWho4CwiU1x4z92WLVsiWxeInyuvvDLy7yVLlqiurk6Dg4N67bXXlJycrFtuuWXM7Xt6elReXq5HH31UFRUVkeXHjx9XamqqLXN6+OGHI/8uKCjQ9OnTdc8992jt2rVKSUmJXHfOOec4fhabsJiqE/7LEauWlpbIXxxMTX19fcrKytLmzZtVWloa7+kYr729PfLUdcaMGbr88sslSW+99ZauueYabdiw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\n",
      "text/plain": [
       "<Figure size 300x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 300x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from lambeq.backend.quantum import Controlled, Rz, X\n",
    "\n",
    "(Controlled(Rz(0.5), distance=2) >> Controlled(X, distance=-2)).draw(figsize=(3, 2), draw_type_labels=False)\n",
    "Controlled(Controlled(X), distance=2).draw(figsize=(3, 2), draw_type_labels=False)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "So far, our :term:`circuits <quantum circuit>` have been \"pure\" circuits, consisting of unitaries. Pure circuits can be evaluated locally to return a unitary ``numpy`` array. Circuits containing :py:class:`~lambeq.backend.quantum.Discard`\\ s and :py:class:`~lambeq.backend.quantum.Measure`\\ s are considered \"mixed\", and return non-unitary ``numpy`` arrays when evaluated, as they are classical-quantum maps (for more details, see Chapter 5 in [HV2013]_)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.+0.j 0.+0.j]\n",
      " [0.+0.j 1.+0.j]]\n",
      "\n",
      "[[[1.+0.j 0.+0.j]\n",
      "  [0.+0.j 0.+0.j]]\n",
      "\n",
      " [[0.+0.j 0.+0.j]\n",
      "  [0.+0.j 1.+0.j]]]\n",
      "\n",
      "[1. 0.]\n",
      "\n",
      "[1.+0.j 0.+0.j]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from lambeq.backend.quantum import Discard, Measure, Ket, Bra\n",
    "\n",
    "\n",
    "print(f'{Discard().eval()}\\n')\n",
    "print(f'{Measure().eval()}\\n')\n",
    "print(f'{Ket(0).eval()}\\n')\n",
    "# circuits that have measurements in them are no longer unitary\n",
    "print(f'{(Ket(0) >> Measure()).eval()}\\n')"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Pure :term:`circuits <quantum circuit>` can be coerced to evaluate into a classical-quantum map representation by setting ``mixed=True``."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[[[[[[1.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]],\n",
       "\n",
       "\n",
       "           [[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]]],\n",
       "\n",
       "\n",
       "\n",
       "          [[[[0.+0.j, 1.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]],\n",
       "\n",
       "\n",
       "           [[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]]]],\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "         [[[[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 1.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]],\n",
       "\n",
       "\n",
       "           [[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]]],\n",
       "\n",
       "\n",
       "\n",
       "          [[[[0.+0.j, 0.+0.j],\n",
       "             [1.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]],\n",
       "\n",
       "\n",
       "           [[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]]]]],\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "        [[[[[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[1.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]],\n",
       "\n",
       "\n",
       "           [[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]]],\n",
       "\n",
       "\n",
       "\n",
       "          [[[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 1.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]],\n",
       "\n",
       "\n",
       "           [[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]]]],\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "         [[[[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 1.+0.j]]],\n",
       "\n",
       "\n",
       "           [[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]]],\n",
       "\n",
       "\n",
       "\n",
       "          [[[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [1.+0.j, 0.+0.j]]],\n",
       "\n",
       "\n",
       "           [[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]]]]]],\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "       [[[[[[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]],\n",
       "\n",
       "\n",
       "           [[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[1.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]]],\n",
       "\n",
       "\n",
       "\n",
       "          [[[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]],\n",
       "\n",
       "\n",
       "           [[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 1.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]]]],\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "         [[[[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]],\n",
       "\n",
       "\n",
       "           [[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 1.+0.j]]]],\n",
       "\n",
       "\n",
       "\n",
       "          [[[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]],\n",
       "\n",
       "\n",
       "           [[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [1.+0.j, 0.+0.j]]]]]],\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "        [[[[[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]],\n",
       "\n",
       "\n",
       "           [[[1.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]]],\n",
       "\n",
       "\n",
       "\n",
       "          [[[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]],\n",
       "\n",
       "\n",
       "           [[[0.+0.j, 1.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]]]],\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "         [[[[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]],\n",
       "\n",
       "\n",
       "           [[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 1.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]]],\n",
       "\n",
       "\n",
       "\n",
       "          [[[[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]],\n",
       "\n",
       "\n",
       "           [[[0.+0.j, 0.+0.j],\n",
       "             [1.+0.j, 0.+0.j]],\n",
       "\n",
       "            [[0.+0.j, 0.+0.j],\n",
       "             [0.+0.j, 0.+0.j]]]]]]]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CX.eval(mixed=True)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Note that the tensor order of classical-quantum maps is doubled, compared to that of pure quantum circuits:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 2, 2, 2)\n",
      "(2, 2, 2, 2, 2, 2, 2, 2)\n"
     ]
    }
   ],
   "source": [
    "print(CX.eval().shape)\n",
    "print(CX.eval(mixed=True).shape)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "We can implement a :term:`functor` from :term:`string diagrams <string diagram>` to :term:`quantum circuits <quantum circuit>` like so."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 500x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from lambeq.backend.grammar import Functor\n",
    "from lambeq.backend.quantum import quantum, Id\n",
    "\n",
    "\n",
    "def cnot_ob(_, ty):\n",
    "    # this implicitly maps all rigid types to 1 qubit\n",
    "    return qubit ** len(ty)\n",
    "\n",
    "def cnot_ar(_, box):\n",
    "    dom = len(box.dom)\n",
    "    cod = len(box.cod)\n",
    "    width = max(dom, cod)\n",
    "    circuit = Id(width)\n",
    "    for i in range(width - 1):\n",
    "        circuit >>= Id(i) @ CX.to_diagram() @ Id(width - i - 2)\n",
    "\n",
    "    # Add Bras (post-selection) and Kets (states)\n",
    "    # to get a circuit with the right amount of\n",
    "    # input and output wires\n",
    "    if cod <= dom:\n",
    "        circuit >>= Id(cod) @ Bra(*[0]*(dom - cod)).to_diagram()\n",
    "    else:\n",
    "        circuit = Id(dom) @ Ket(*[0]*(cod - dom)).to_diagram() >> circuit\n",
    "    return circuit\n",
    "\n",
    "cnot_functor = Functor(target_category=quantum, ob=cnot_ob, ar=cnot_ar)\n",
    "diagram.draw(figsize=(5, 2))\n",
    "cnot_functor(diagram).draw(figsize=(8, 8), draw_type_labels=False)"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
