{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DisCoCat in DisCoPy"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "In the previous tutorial, we learnt the basics of :term:`monoidal categories <monoidal category>` and how to represent them in :term:`DisCoPy`. In this tutorial, we look at the `Distributional Compositional Categorical` model [CSC2010]_, which uses functors to map diagrams from the `rigid category <monoidal.ipynb#Rigid-monoidal-categories>`_ of `pregroup grammars <../string_diagrams.rst#Pregroup-grammars>`_ to vector space semantics.\n",
    "\n",
    ":download:`Download code <../_code/discocat.ipynb>`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pregroup grammars"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "`Pregroup grammar <../string_diagrams.rst#Pregroup-grammars>`_ is a grammatical formalism devised by Joachim Lambek in 1999 [Lam1999]_. In pregroups, each word is a morphism with type :math:`I \\to T` where :math:`I` is the monoidal unit and :math:`T` is a rigid type, referred to as the *pregroup type*. Here are some examples for pregroup type assignments:\n",
    "\n",
    "* a noun is given the base type :math:`n`.\n",
    "* an adjective consumes a noun on the noun's left to return another noun, so it is given the type :math:`n\\cdot n^l`.\n",
    "* a transitive verb consumes a noun on its left and another noun on its right to give a sentence, so is given the type :math:`n^r \\cdot s \\cdot n^l`.\n",
    "\n",
    "In the context of pregroups, the :term:`adjoints <adjoint>` :math:`n^l` and :math:`n^r` can be thought of as the left and right inverses of a type :math:`n` respectively. In a pregroup derivation, the words are concatenated using the monoidal product :math:`\\otimes` and linked using :term:`cups <cup>`, which are special morphisms that exist in any :term:`rigid category`. A sentence is grammatically sound if its derivation has a single uncontracted sentence wire.\n",
    "\n",
    "In :term:`DisCoPy`, words are defined using the :py:class:`~discopy.grammar.pregroup.Word` class. A :py:class:`~discopy.grammar.pregroup.Word` is just a :py:class:`~discopy.rigid.Box` where the input type is fixed to be the monoidal unit :math:`I` (or ``Ty()``). A pregroup derivation diagram can be drawn using either the :py:meth:`monoidal.Diagram.draw() <discopy.monoidal.Diagram.draw>` method or the :py:meth:`lambeq.pregroups.draw() <lambeq.pregroups.draw>` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from discopy.grammar.pregroup import Cap, Cup, Id, Ty, Word\n",
    "from lambeq import pregroups\n",
    "\n",
    "n, s = Ty('n'), Ty('s')\n",
    "\n",
    "words = [\n",
    "    Word('she', n),\n",
    "    Word('goes', n.r @ s @ n.l),\n",
    "    Word('home', n)\n",
    "]\n",
    "\n",
    "cups = Cup(n, n.r) @ Id(s) @ Cup(n.l, n)\n",
    "\n",
    "assert Id().tensor(*words) == words[0] @ words[1] @ words[2]\n",
    "assert Ty().tensor(*[n.r, s, n.l]) == n.r @ s @ n.l\n",
    "\n",
    "diagram = Id().tensor(*words) >> cups\n",
    "pregroups.draw(diagram)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. note::\n",
    "\n",
    "  In ``lambeq``, method :py:meth:`~lambeq.create_pregroup_diagram` provides an alternative, more compact way to create pregroup diagrams, by explicitly defining a list of :term:`cups <cup>` and :term:`swaps <swap>`. For example, the above diagram can be also generated using the following code:\n",
    "\n",
    "  .. code-block:: python \n",
    "     \n",
    "     from lambeq import create_pregroup_diagram\n",
    "     from discopy.grammar.pregroup import Ty\n",
    "     \n",
    "     words = [Word('she', n), Word('goes', n.r @ s @ n.l), Word('home', n)]\n",
    "     morphisms = [(Cup, 0, 1), (Cup, 3, 4)]\n",
    "     diagram = create_pregroup_diagram(words, Ty('s'), morphisms)\n",
    "     \n",
    "  where the numbers in ``morphisms`` define the indices of the corresponding wires at the top of the diagram\n",
    "  ``(n @ n.r @ s @ n.l @ n)``. In contrast, the ``.cup()`` method in :term:`DisCoPy` can be used to define\n",
    "  diagrams using chaining, and uses indices at the bottom of the diagram:\n",
    "\n",
    "  .. code-block:: python\n",
    "\n",
    "    words = Word('she', n) @ Word('goes', n.r @ s @ n.l) @ Word('home', n)\n",
    "    same_diagram = words.cup(0, 1).cup(1, 2)\n",
    "\n",
    "  The ``.cup()`` method can be applied to non-adjacent qubits, which implicitly introduces swaps. For example:\n",
    "\n",
    "  .. code-block:: python\n",
    "\n",
    "    n, s, p = map(Ty, \"nsp\")\n",
    "    words = Word('A', n @ p) @ Word('V', n.r @ s @ n.l) @ Word('B', p.r @ n)\n",
    "\n",
    "    words.cup(1, 5).cup(0, 1).cup(1, 2).draw()\n",
    "\n",
    "  .. image:: ../../_static/images/string_diagram_with_swaps.png\n",
    "     :width: 350\n",
    "\n",
    "Note that only diagrams of the form ``word @ ... @ word >> cups_and_swaps`` can be drawn using :py:meth:`lambeq.pregroups.draw() <lambeq.pregroups.draw>`. Applying functors or normal forms will often cause the diagram to deviate from this form, in which case :py:meth:`monoidal.Diagram.draw() <discopy.monoidal.Diagram.draw>` should be used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before normal form: she, goes, home, Cup(n, n.r), Cup(n.l, n)\n",
      "After normal form: she, goes, Cup(n, n.r), home, Cup(n.l, n)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from discopy.drawing import Equation\n",
    "from discopy import monoidal\n",
    "from pytest import raises\n",
    "\n",
    "# In the original diagram, words appear before the cups\n",
    "print('Before normal form:', ', '.join(map(str, diagram.boxes)))\n",
    "\n",
    "diagram_nf = monoidal.Diagram.normal_form(diagram)\n",
    "print('After normal form:', ', '.join(map(str, diagram_nf.boxes)))\n",
    "\n",
    "Equation(diagram, diagram_nf, symbol='->').draw(figsize=(10, 4))\n",
    "\n",
    "# In the normalised diagram, boxes are not in the right order\n",
    "# anymore, so cannot be drawn using pregroups.draw()\n",
    "with raises(ValueError):\n",
    "    pregroups.draw(diagram_nf)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "In the example above, the application of normal form to the diagram introduces a :term:`cup` before the word \"home\", so the normalised version cannot be drawn with :py:meth:`lambeq.pregroups.draw() <lambeq.pregroups.draw>` anymore."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Functors"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Given :term:`monoidal categories <monoidal category>` :math:`\\mathcal{C}` and :math:`\\mathcal{D}`, a monoidal :term:`functor` :math:`F: \\mathcal{C} \\to \\mathcal{D}` satisfies the following properties:\n",
    "\n",
    "- monoidal structure of objects is preserved: :math:`F(A \\otimes B) = F(A) \\otimes F(B)`\n",
    "- :term:`adjoints <adjoint>` are preserved: :math:`F(A^l) = F(A)^l`, :math:`F(A^r) = F(A)^r`\n",
    "- monoidal structure of morphism is preserved: :math:`F(g \\otimes f) = F(g) \\otimes F(f)`\n",
    "- compositonal structure of morphisms is preserved: :math:`F(g \\circ f) = F(g) \\circ F(f)`\n",
    "\n",
    "Put simply, a :term:`functor` is a structure-preserving transformation. In a free :term:`monoidal category`, applying a :term:`functor` to a diagram amounts to simply providing a mapping for each generating object and morphism. In :term:`DisCoPy`, a :term:`functor` is defined by passing mappings (dictionaries or functions) as arguments ``ob`` and ``ar`` to the :py:class:`~discopy.monoidal.Functor` class.\n",
    "\n",
    ":term:`Functors <functor>` are one of the most powerful concepts in category theory. In fact, the encoding, rewriting and parameterisation steps of ``lambeq``'s :ref:`pipeline <sec-pipeline>` are implemented individually as :term:`functors <functor>`, resulting in an overall functorial transformation from :term:`parse trees <syntax tree>` to :term:`tensor networks <tensor network>` and :term:`circuits <quantum circuit>`. More specifically:\n",
    "\n",
    "- :py:class:`lambeq.CCGParser` uses a :term:`functor` to transform a biclosed CCG diagram to a pregroup diagram [YK2021]_.\n",
    "- :py:class:`lambeq.Rewriter` functorially transforms a pregroup diagram to a simpler pregroup diagram.\n",
    "- :py:class:`lambeq.TensorAnsatz` functorially transforms a pregroup diagram to a tensor diagram, which can be evaluated as a tensor network using NumPy, JAX or PyTorch.\n",
    "- :py:class:`lambeq.CircuitAnsatz` functorially transforms a pregroup diagram to a :term:`quantum circuit`, for evaluation on a quantum device.\n",
    "\n",
    "Below we present two examples of :term:`functors <functor>`, implemented in :term:`DisCoPy`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 1: \"Very\" functor"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "This :term:`functor` adds the word \"very\" in front of every adjective in a :term:`DisCoCat` diagram. \n",
    "Since the mapping is from a :py:class:`pregroup.Diagram <discopy.grammar.pregroup.Diagram>` to another :py:class:`pregroup.Diagram <discopy.grammar.pregroup.Diagram>`, a :py:class:`pregroup.Functor <discopy.grammar.pregroup.Functor>` should be used. Further, the word \"very\" modifies an adjective to return another adjective, so it should have type \n",
    ":math:`(n \\otimes n^l) \\otimes (n \\otimes n^l)^l = n \\otimes n^l \\otimes n^{ll} \\otimes n^l`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from lambeq import BobcatParser\n",
    "parser = BobcatParser(verbose='suppress')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from discopy.grammar.pregroup import Diagram, Functor\n",
    "\n",
    "# determiners have the same type as adjectives\n",
    "# but we shouldn't add 'very' behind them\n",
    "determiners = ['a', 'the', 'my', 'his', 'her', 'their']\n",
    "\n",
    "# type for an adjective\n",
    "adj = n @ n.l\n",
    "very = Word('very', adj @ adj.l)\n",
    "cups = Diagram.cups(adj.l, adj)\n",
    "\n",
    "def very_ob(ty):\n",
    "    return ty\n",
    "\n",
    "def very_ar(box):\n",
    "    if box != very:\n",
    "        if box.name not in determiners:\n",
    "            if box.cod == adj:\n",
    "                return very @ box >> Id(adj) @ cups\n",
    "    return box\n",
    "\n",
    "very_functor = Functor(ob=very_ob, ar=very_ar)\n",
    "\n",
    "diagram = parser.sentence2diagram('a big bad wolf')\n",
    "new_diagram = very_functor(diagram)\n",
    "\n",
    "Equation(diagram, new_diagram, symbol='->').draw(figsize=(10, 4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 2: Twist functor"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "In this :term:`functor`, :term:`cups <cup>` and :term:`caps <cap>` are treated specially and are not passed to the ``ar`` function; instead they are passed to methods ``Functor.cod.cups(left, right)`` and ``Functor.cod.caps(left, right)``, respectively. By default, the :py:class:`pregroup.Functor <discopy.grammar.pregroup.Functor>` uses :py:class:`pregroup.Category <discopy.grammar.pregroup.Category>` as ``cod`` to implement the `factory pattern <https://en.wikipedia.org/wiki/Factory_method_pattern>`_, with methods such as ``cups()``, ``caps()``, ``id()``, and ``swap()``. For example, for a functor ``F`` that uses the default arrow factory :py:class:`~discopy.grammar.pregroup.Diagram`, ``F(Cup(a, a.r)) == Diagram.cups(F(a), F(a.r))``.\n",
    "\n",
    "Here is an example of how to map a :term:`cup` to a custom diagram, such as a \"twisted\" :term:`cup`. Note that it is up to the user to ensure the new :term:`cups <cup>` and :term:`caps <cap>` satisfy the :term:`snake equations`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from discopy.grammar.pregroup import Category, Diagram, factory, Functor, Swap\n",
    "\n",
    "@factory\n",
    "class TwistedDiagram(Diagram):\n",
    "    @classmethod\n",
    "    def cups(cls, left, right):\n",
    "        swaps = Diagram.swap.__func__(cls, left, right)\n",
    "        cups = Diagram.cups.__func__(cls, right, left)\n",
    "        return swaps >> cups\n",
    "\n",
    "    @classmethod\n",
    "    def caps(cls, left, right):\n",
    "        return cls.cups(left, right).dagger()\n",
    "\n",
    "class TwistedWord(Word, TwistedDiagram): ...\n",
    "class TwistedSwap(Swap, TwistedDiagram): ...\n",
    "class TwistedCup(Cup, TwistedDiagram): ...\n",
    "class TwistedCap(Cap, TwistedDiagram): ...\n",
    "\n",
    "TwistedDiagram.braid_factory = TwistedSwap\n",
    "TwistedDiagram.cup_factory = TwistedCup\n",
    "TwistedDiagram.cap_factory = TwistedCap\n",
    "\n",
    "twist_functor = Functor(\n",
    "    ob=lambda ty: ty,\n",
    "    ar=lambda word: TwistedWord(word.name, word.cod),\n",
    "    cod=Category(Ty, TwistedDiagram))\n",
    "\n",
    "diagram = parser.sentence2diagram('This is twisted')\n",
    "new_diagram = twist_functor(diagram)\n",
    "\n",
    "pregroups.draw(diagram)\n",
    "pregroups.draw(new_diagram)\n",
    "\n",
    "snake = Id(n) @ Cap(n.r, n) >> Cup(n, n.r) @ Id(n)\n",
    "Equation(twist_functor(snake), Id(n)).draw(figsize=(4, 2))"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. note::\n",
    "    \n",
    "   Twisting the nested :term:`cups <cup>` for \"is\" and \"twisted\" together is **not** a functorial operation, so it cannot be implemented using a :py:class:`rigid.Functor <discopy.rigid.Functor>`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classical DisCoCat: Tensor networks"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The classical version of :term:`DisCoCat` sends diagrams in the :term:`category` of pregroup derivations to tensors in the :term:`category` of vector spaces **FVect**. **FVect** is a :term:`monoidal category` with vector spaces (e.g. :math:`\\mathbb{R}^2 \\otimes \\mathbb{R}^2`) as objects and linear maps between vector spaces as morphisms. It is in fact a :term:`compact closed category`, which is a special case of rigid categories where :math:`A^l = A^r = A^*`.\n",
    "\n",
    "Using the :py:mod:`discopy.tensor` module, you can define a free :term:`category` of vector spaces: objects are defined with the :py:class:`~discopy.tensor.Dim` class and morphisms with the :py:class:`~discopy.tensor.Box` class. Composite morphisms are constructed by freely combining the generating morphisms using the ``<<`` and ``>>`` operators. This is similar to how :py:class:`rigid.Diagram <discopy.rigid.Diagram>`\\ s and :py:class:`monoidal.Diagram <discopy.monoidal.Diagram>`\\ s are defined. The concrete value of the tensor is passed to the ``data`` attribute as an unshaped list; :term:`DisCoPy` will reshape it later based on the input and output dimensions.\n",
    "\n",
    "Apart of diagrams, the :py:mod:`discopy.tensor` module has another class that can be tensored and composed: :py:class:`tensor.Tensor <discopy.tensor.Tensor>`. The key difference is that :py:class:`tensor.Box <discopy.tensor.Box>`\\ es in the diagrams compose together to make :py:class:`tensor.Diagram <discopy.tensor.Diagram>`\\ s, while :py:class:`tensor.Tensor <discopy.tensor.Tensor>`\\ s compose together to make another :py:class:`tensor.Tensor <discopy.tensor.Tensor>`. In other words, :py:class:`tensor.Tensor <discopy.tensor.Tensor>` computes tensor contractions directly, while :py:class:`tensor.Diagram <discopy.tensor.Diagram>` delays the computation until :py:meth:`~discopy.tensor.Diagram.eval` is called."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dim(1) @ Dim(2) @ Dim(3)=Dim(2, 3)\n"
     ]
    }
   ],
   "source": [
    "from discopy.tensor import Box, Dim, Id, Tensor\n",
    "\n",
    "# Dim(1) is the unit object, so disappears when tensored with another Dim\n",
    "print(f'{Dim(1) @ Dim(2) @ Dim(3)=}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id_box.eval()=Tensor[int]([1, 0, 0, 1], dom=Dim(2), cod=Dim(2))\n"
     ]
    }
   ],
   "source": [
    "id_box = Box('Id Box', Dim(2), Dim(2), data=[1,0,0,1])\n",
    "id_tensor = Tensor([1,0,0,1], Dim(2), Dim(2))\n",
    "\n",
    "# the actual values of id_box and id_tensor are equal\n",
    "assert (id_box.array == id_tensor.array).all()\n",
    "print(f'{id_box.eval()=}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tensor[int64]([0, 1, 2, 3, 4, 5, 6, 7], dom=Dim(2, 2), cod=Dim(2))\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "f_box = Box('f Box', Dim(2, 2), Dim(2), data=range(8))\n",
    "f_tensor = Tensor(range(8), Dim(2, 2), Dim(2))\n",
    "combined_diagram = id_box @ Id(Dim(2)) >> f_box\n",
    "combined_tensor = id_tensor @ Tensor.id(Dim(2)) >> f_tensor\n",
    "\n",
    "# tensor diagram evaluates to the tensor\n",
    "assert combined_diagram.eval(dtype=np.int64) == combined_tensor\n",
    "combined_diagram.draw(figsize=(4, 2))\n",
    "print(combined_tensor)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "In the :term:`category` of vector spaces, :term:`cups <cup>`, :term:`caps <cap>` and :term:`swaps <swap>` take on concrete values as tensors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 0, 0],\n",
       "       [0, 1, 0],\n",
       "       [0, 0, 1]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Tensor.cups(Dim(3), Dim(3)).array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[[1, 0],\n",
       "         [0, 0]],\n",
       "\n",
       "        [[0, 0],\n",
       "         [1, 0]]],\n",
       "\n",
       "\n",
       "       [[[0, 1],\n",
       "         [0, 0]],\n",
       "\n",
       "        [[0, 0],\n",
       "         [0, 1]]]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Tensor.swap(Dim(2), Dim(2)).array"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "To implement a :term:`functor` from :py:class:`pregroup.Diagram <discopy.grammar.pregroup.Diagram>` to :py:class:`tensor.Tensor <discopy.tensor.Tensor>`, use a :py:class:`tensor.Functor <discopy.tensor.Functor>` with ``dom = pregroup.Category()``. This :term:`functor` will automatically contract the resulting :term:`tensor network`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"This\" becomes\n",
      "[1. 1.]\n",
      "\"is\" becomes\n",
      "[[[[1. 1.]\n",
      "   [1. 1.]]\n",
      "\n",
      "  [[1. 1.]\n",
      "   [1. 1.]]]\n",
      "\n",
      "\n",
      " [[[1. 1.]\n",
      "   [1. 1.]]\n",
      "\n",
      "  [[1. 1.]\n",
      "   [1. 1.]]]]\n",
      "\"twisted\" becomes\n",
      "[[1. 1.]\n",
      " [1. 1.]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Tensor[int]([8, 8], dom=Dim(1), cod=Dim(2))"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from discopy.tensor import Functor\n",
    "import numpy as np\n",
    "\n",
    "def one_ob(ty):\n",
    "    dims = [2] * len(ty)\n",
    "    return Dim(*dims) # does Dim(2,2,..)\n",
    "\n",
    "def one_ar(box):\n",
    "    dom = one_ob(box.dom)\n",
    "    cod = one_ob(box.cod)\n",
    "    tensor = np.ones((dom @ cod).inside)\n",
    "    print(f'\"{box}\" becomes')\n",
    "    print(tensor)\n",
    "    return tensor\n",
    "\n",
    "one_functor = Functor(\n",
    "    ob=one_ob, ar=one_ar, dom=Category())\n",
    "one_functor(diagram)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Sometimes, defining a :term:`functor` from :py:class:`pregroup.Diagram <discopy.grammar.pregroup.Diagram>` to :py:class:`tensor.Diagram <discopy.tensor.Diagram>` offers more flexibility, since a :py:class:`tensor.Diagram <discopy.tensor.Diagram>` can be instantiated with concrete values to be evaluated later using a custom tensor contractor. Such a functor can be defined using a :py:class:`pregroup.Functor <discopy.grammar.pregroup.Functor>` with :py:class:`tensor.Dim <discopy.tensor.Dim>` and :py:class:`tensor.Diagram <discopy.tensor.Diagram>` as ``cod``, respectively. See the implementation of :py:class:`.TensorAnsatz` for an example."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quantum DisCoCat: Quantum circuits"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The quantum version of :term:`DisCoCat` sends diagrams in the :term:`category` of pregroup derivations to :term:`circuits <quantum circuit>` in the category of Hilbert spaces **FHilb**. This is a :term:`compact closed <compact closed category>` monoidal category with Hilbert spaces (e.g. :math:`\\mathbb{C}^{2^n}`) as objects and unitary maps between Hilbert spaces as morphisms.\n",
    "\n",
    "The :py:mod:`discopy.quantum` module is a framework for the free :term:`category` of :term:`quantum circuits <quantum circuit>`: objects are generated using the :py:class:`quantum.circuit.Ob <discopy.quantum.circuit.Ob>` class and morphisms by using :py:mod:`quantum.gates <discopy.quantum.gates>`. In :term:`DisCoPy`, rotation values range from :math:`0` to :math:`1` rather than from :math:`0` to :math:`2\\pi`. The circuit can then either be evaluated using tensor contraction with the :py:meth:`~discopy.quantum.circuit.Circuit.eval` method, or exported to :term:`pytket` using the :meth:`~discopy.quantum.circuit.Circuit.to_tk` method, which supports multiple hardware backends."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "tk.Circuit(4).CX(1, 2).X(3).CX(0, 1).CX(2, 3).Rz(0.2, 0).Rz(0.4, 1).Rz(0.6, 2).Rz(0.8, 3)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from discopy.quantum import qubit, Id\n",
    "from discopy.quantum.gates import CX, Rz, X\n",
    "\n",
    "circuit = Id(4)\n",
    "circuit >>= Id(1) @ CX @ X\n",
    "circuit >>= CX @ CX\n",
    "circuit >>= Rz(0.1) @ Rz(0.2) @ Rz(0.3) @ Rz(0.4)\n",
    "\n",
    "# from discopy 0.4.1, can do:\n",
    "same_circuit = (Id(4).CX(1, 2).X(3).CX(0, 1).CX(2, 3)\n",
    "                .Rz(0.1, 0).Rz(0.2, 1).Rz(0.3, 2).Rz(0.4, 3))\n",
    "assert circuit == same_circuit\n",
    "\n",
    "circuit.draw()\n",
    "circuit.to_tk()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "To apply multi-qubit :term:`gates <quantum gate>` to non-consecutive :term:`qubits <qubit>`, use :term:`swaps <swap>` to permute the wires, apply the :term:`gate <quantum gate>`, then unpermute the wires. These :term:`swaps <swap>` are only logical swaps and do not result in more gates when converted to :term:`tket` format."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 300x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "tk.Circuit(3).CX(2, 0)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from discopy.quantum import Circuit\n",
    "from discopy.quantum.gates import SWAP\n",
    "\n",
    "# to apply a CNOT on qubits 2 and 0:\n",
    "circuit1 = Id(3)\n",
    "circuit1 >>= SWAP @ Id(1)\n",
    "circuit1 >>= Id(1) @ SWAP\n",
    "circuit1 >>= Id(1) @ CX\n",
    "circuit1 >>= Id(1) @ SWAP\n",
    "circuit1 >>= SWAP @ Id(1)\n",
    "\n",
    "# or you can do\n",
    "perm = Circuit.permutation([2, 0, 1])\n",
    "circuit2 = perm[::-1] >> Id(1) @ CX >> perm\n",
    "\n",
    "assert circuit1 == circuit2\n",
    "circuit1.draw(figsize=(3, 3))\n",
    "\n",
    "# no swaps introduced when converting to tket\n",
    "circuit1.to_tk()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Since discopy 0.4.0, we have long-ranged controlled gates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 300x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 300x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from discopy.quantum import Controlled, Rz, X\n",
    "(Controlled(Rz(0.5), distance=2) >> Controlled(X, distance=-2)).draw(figsize=(3, 2))\n",
    "Controlled(Controlled(X), distance=2).draw(figsize=(3, 2))"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "So far, our :term:`circuits <quantum circuit>` have been \"pure\" circuits, consisting of unitaries. Pure circuits can be evaluated locally to return a :py:class:`~discopy.tensor.Tensor`. Circuits containing :py:class:`~discopy.quantum.circuit.Discard`\\ s and :py:class:`~discopy.quantum.circuit.Measure`\\ s are considered \"mixed\", and return :py:mod:`Channel <discopy.quantum.channel>`\\ s instead of :py:class:`~discopy.tensor.Tensor`\\ s when evaluated, as they are not unitaries but rather classical-quantum maps (for more details, see Chapter 5 in [HV2013]_)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C(Dim(2, 2)) @ Q(Dim(2, 3))\n",
      "Channel([1.+0.j, 0.+0.j, 0.+0.j, 1.+0.j], dom=Q(Dim(2)), cod=CQ())\n",
      "Channel([1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j], dom=Q(Dim(2)), cod=Q(Dim(2)))\n",
      "Tensor[complex]([1.+0.j, 0.+0.j], dom=Dim(1), cod=Dim(2))\n",
      "Channel([1.+0.j, 0.+0.j], dom=CQ(), cod=Q(Dim(2)))\n"
     ]
    }
   ],
   "source": [
    "from discopy.quantum import Discard, Measure, Ket, Bra\n",
    "from discopy.quantum.channel import C, Q\n",
    "\n",
    "print(C(Dim(2)) @ Q(Dim(2, 3)) @ C(Dim(2)))\n",
    "\n",
    "print(Discard().eval())\n",
    "print(Measure().eval())\n",
    "print(Ket(0).eval())\n",
    "# circuits that have measurements in them are no longer unitary\n",
    "# and return CQMaps\n",
    "print((Ket(0) >> Measure()).eval())"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Pure :term:`circuits <quantum circuit>` can be coerced to evaluate into a :py:mod:`CQMap <discopy.quantum.cqmap>` by setting ``mixed=True``."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Channel([1.+0.j, 0.+0.j, 0.+0.j, ..., 0.+0.j, 0.+0.j, 0.+0.j], dom=Q(Dim(2, 2)), cod=Q(Dim(2, 2)))"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CX.eval(mixed=True)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Note that the tensor order of :py:mod:`CQMap <discopy.quantum.cqmap>`\\ s is doubled, compared to that of simple :py:class:`~discopy.tensor.Tensor`\\ s:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 2, 2, 2)\n",
      "(2, 2, 2, 2, 2, 2, 2, 2)\n"
     ]
    }
   ],
   "source": [
    "print(CX.eval().array.shape)\n",
    "print(CX.eval(mixed=True).array.shape)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "To implement a :term:`functor` from :py:class:`rigid.Diagram <discopy.rigid.Diagram>` to :py:class:`quantum.Circuit <discopy.quantum.circuit.Circuit>`, use a :py:class:`quantum.circuit.Functor <discopy.quantum.circuit.Functor>`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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zZs3n3POxbxX09PTjVatWhne3t5GTk5OneVuyCoqKoy//vWvhiTjwQcfNE6dOnXOebV9XcvKyoxnnnnGkGQ8/vjjtbpUFQCsiDLzO5QZmOXszbt33nmncejQoXPOKSkpMZycnKo9LviRRx4x7r///nPuk5OTY7Rt29Zo3bq1kZ6ebu/YDVpRUZHRt29fo1mzZsbcuXPPO+9iX9eKigrjlVdeMSQZI0eOPO8vnY3V8uXLDTc3N6Nr167nLcmX8l7ds2eP0aVLF8Pd3d1YsWKFvWM3aMXFxcYDDzxgSDJeeeWV85bkS3ld586dazRr1szo169fjQ8RAQCr4kMzAROVlZVp0qRJeuyxxzR+/HitXr1aLVu2POfcoqIilZeXq3Xr1lW2t27dWvv37z/nPv7+/srMzNQtt9yivn376qOPPrL7MTREeXl5CgoK0s6dO7Vu3TpFR0efd+7Fvq4ODg7685//rH/+85/67LPP1KdPH/3yyy92P4aGxjAMvfnmmwoPD9eAAQOUmpoqLy+vc869lPeql5eXUlNTddddd2no0KH6v//7PxmGYffjaGh+/vln3XHHHVq5cqWSkpL05z//WQ4ODueceymva3R0tNatW6ecnBwFBQUpLy/P7scAAGaizAAmOXr0qO69917FxcVp5syZmjlzppo1a2b373Pttddq3bp1evjhh/XII4/oxRdfVEVFhd2/T0OxZs0aBQcHq3nz5srMzFSfPn3q5PsMHz5cqamp2rdvnwICApSdnV0n36chOH36tB599FG99NJL+uMf/6ikpCS5ubnZ/fu4u7srKSlJL7/8sl588UWNGTNGp0+ftvv3aSiysrIUEBCg/fv3KzU1VREREXXyffr06aOsrCw1b95cwcHBWrNmTZ18HwAwA2UGMMF3332n4OBgZWVlae3atYqNjb3gPp6ennJyclJhYWGV7YWFhWrTpk2N+7q4uGjevHl655139NZbbyk8PFwnTpy4rGNoaAzD0PTp03XvvfeqT58+Sk9Pl4+PzwX3u5zXtXv37srKytKNN96o22+/XUuWLLmsY2iI9u/fr379+unTTz/V4sWL9be//U2OjjX/T8flvKaOjo569dVXtWjRIi1ZskRhYWHV1mkMlixZoj59+sjLy0uZmZnq1q3bBfe5nNfVx8dH6enpuv3223XvvffqvffeaxJnvgA0fpQZ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BgAAAJdt27ZtCgwM1N69e/XVV1/pgQcekCR5e3srLS1N/fv31/3336+3335bhmGYnNYaKioq9Mc//lEPP/ywRo4cqQ0bNqh169aSpHHjxmndunX6z3/+o6CgIO3atcvktOagzAAAAOCyJCcnq3fv3rruuuuUlZWlnj17Vhl3d3dXcnKyXnrpJf3hD39QVFSUSkpKTEprDSdPntTw4cP1xhtv6K233tKCBQvk4uJSZc4dd9yhzMxMOTs7Kzg4WGvXrjUprXkoMwAAALgkhmHolVde0fDhwzVkyBBt2rRJ119//TnnOjo66rXXXlNiYqI++eQThYWF6cCBA/Wc2BoKCgrUu3dv/fvf/9aKFSv0/PPPy8HB4Zxz27Vrp82bNys0NFSDBg3Se++916TOfFFmAAAAcNF+/fVXPfTQQ5o6dar+9re/afHixbriiisqx2fOnKm2bduqefPmCgoKUmZmpiTp4Ycf1qZNm/Tjjz8qICBAOTk5Zh1Cg7R582YFBATo2LFjSk9P1+DBg6uMn+t19fDw0GeffaZnnnlGTz/9tB577LEm80hsygwAAAAuyi+//KI+ffro888/V1JSkv70pz9VOXOwZMkSTZ48WVOnTtW2bdvUpUsXDRw4sPJMzNlfwq+55hqFhIRoxYoVZh1Kg/LRRx+pb9++6tChgzIzM+Xv719lvKbX1cnJSe+8844SEhK0YMECDRgwQIcOHTLpSOoPZQYAAAC1lpWVpYCAAO3fv1+pqamKiIioNufdd9/VuHHjFBUVJT8/P82ePVuurq5KSEionHPTTTfpq6++0t13363w8HC98cYbTeryqN8rLy/Xiy++qEceeUSRkZFat26drr322mrzavO6RkVFaf369frmm28UGBio3Nzc+jyUekeZAQAAQK0sWbJEffr00U033aSsrCx169at2pwzZ85o69at6t+/f+U2R0dH9e/fX5s3b64y183NTZ9++qn+9Kc/6eWXX9Yjjzyi06dP1/lxNCQnTpxQeHi43n77bU2bNk1z586Vs7NztXkX87r27t1bWVlZcnV1VXBwsFatWlXnx2EWygwAAABqVFFRoSlTpujBBx9URESENm7cqDZt2pxzblFRkcrLyysfIXxW69attX///mrzHR0d9corr+iTTz5RUlKS+vXrd855jdHu3bsVGhqqjRs36vPPP9fkyZPPe6P/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VFSUHB1/+5Xpl19+0S+//KJ33nlHO3fu1IIFC7RmzRpFR0dX2S8qKkqzZs1SWVlZnWUHwD0zAADAYtatWydJCgkJkZubm7p166YVK1aoefPmev7555WQkCAnJydFR0ersLBQx44dqzzr0rdvX3Xu3Fk2m02JiYny9/dXfn6+JCk8PFyS5O3trd27d+vgwYNav3693nvvvcrv3blzZyUnJ1d+ffPNN+u1115TZGSkysrKZLP99qvVXXfdpcOHD2vbtm318ZIATRZnZgAAgGXs27dPL7/8siQpKSlJGzdu1LBhw2QYhqZNm6YFCxYoISFBqampOnz4sJYtW1ZtjYULF8rZ2VlpaWmaPXu2srKyJEnz58/Xvn37Kr9OTU2Vq6vrBZ+YduzYMXl4eFQWGUlydnZW165d9fXXX9vr0AGcA2dmAACAZezbt0/l5eWSpOuvv17+/v7y9/eXJE2fPl0vvfSShg0bJkmaPXu21q5dW22NW265RW+99Va17S1atFCbNm0qv96zZ49at25deYnZuRQVFelvf/ubxo8fX23s+uuv1759+y7uAAFcFM7MAAAAy+jSpYsCAwMlSX/4wx8UHx+vI0eO6NixY9q3b5+CgoIq59psNvXs2bPaGj169KjV9/r111/VvHnz844fP35c9957r/z8/PSXv/yl2vgVV1yh06dP1+p7Abg0lBkAAGAZTk5OiouLkyS1a9dOH3zwgTp06KDdu3fXeg03N7dazfP09NSRI0fOOXbixAndfffduvLKK7Vs2TI1a9as2pzDhw/r6quvrnUuABePMgMAACzFwcFBkvT444/r66+/lrOzs1JSUnTdddcpIyOjcl5ZWZm2bt1aqzWbNWtWefnaWd26ddP+/furFZrjx49rwIABcnZ21meffXbeszc7d+5Uhw4dLubQAFwkygwAALCMjIwMJSQkSPrt/pmlS5fq4MGD8vX11VNPPaU333xTy5cv165duxQbG6ujR4/Wat22bdsqJSWlSnnp1q2bPD09lZaWVjnvbJEpLi7WvHnzdPz4ce3fv1/79++vUoZ2796tn3/+ucplbwDsjwcAAAAAy/Dw8Kh83PGwYcPUtm1bTZs2Tffcc4/uuusu7du3T48++qgcHR01duxYhYeHV/lAy/OZNm2aJk+erPj4eN1www3avXu3nJycFBUVpUWLFum+++6TJG3b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AIAlUWYAAAAAWBJlBgAAAIAlUWYAAAAAWBJlBgAAAIAl2cwOAAAAcLEKCgpUVFRkdoxa8fT0lJeXl9kxgEaJMgMAACyloKBAvr6+OnXqlNlRasXV1VV5eXkUGqAOUGYAAIClFBUV6dSpU0pMTJSvr6/ZcWqUl5enyMhIFRUVUWaAOkCZAQAAluTr66vu3bubHQOAiXgAAAAAQA369OmjxYsX13p+bm6ubrzxRhUXF9dhKgASZQYAAEAODg5avnx5te2fffaZCgsL9eCDD0qSDh8+rCeffFIdOnTQFVdcIS8vL02aNEnHjh2r3MfPz0/BwcF699136ys+0GRRZgAAQJN15syZGsfff/99RUVFydHxt1+ZfvnlF/3yyy965513tHPnTi1YsEBr1qxRdHR0lf2ioqI0a9YslZWV1Vl2ANwzAwAALGbdunWSpJCQELm5ualbt25asWKFmjdvrueff14JCQlycnJSdHS0CgsLdezYscqzLn379lXnzp1ls9mUmJgof39/5efnS5LCw8MlSd7e3tq9e7cOHjyo9evX67333qv83p07d1ZycnLl1zfffLNee+01RUZGqqysTDbbb79a3XXXXTp8+LC2bdtWHy8J0GRxZgYAAFjGvn379PLLL0uSkpKStHHjRg0bNkyGYWjatGlasGCBEhISlJqaqsOHD2vZsmXV1li4cKGcnZ2Vlpam2bNnKysrS5I0f/587du3r/Lr1NRUubq6XvCJaceOHZOHh0dlkZEkZ2dnde3aVV9//bW9Dh3AOXBmBgAAWMa+fftUXl4uSbr++uvl7+8vf39/SdL06dP10ksvadiwYZKk2bNna+3atdXWuOWWW/TWW29V296iRQu1adOm8us9e/aodevWlZeYnUtRUZH+9re/afz48dXGrr/+eu3bt+/iDhDAReHMDAAAsIwuXbooMDBQkvSHP/xB8fHxOnLkiI4dO6Z9+/YpKCiocq7NZlPPnj2rrdGjR49afa9ff/1VzZs3P+/48ePHde+998rPz09/+ctfqo1fccUVOn36dK2+F4BLQ5kBAACW4eTkpLi4OElSu3bt9MEHH6hDhw7avXt3rddwc3Or1TxPT08dOXLknGMnTpzQ3XffrSuvvFLLli1Ts2bNqs05fPiwrr766lrnAnDxKDMAAMBSHBwcJEmPP/64vv76azk7OyslJUXXXXedMjIyKueVlZVp69attVqzWbNmlZevndWtWzft37+/WqE5fvy4BgwYIGdnZ3322WfnPXuzc+dOdejQ4WIODcBFoswAAADLyMjIUEJCgqTf7p9ZunSpDh48KF9fXz311FN68803tXz5cu3atUuxsbE6evRordZt27atUlJSqpSXbt26ydPTU2lpaZXzzhaZ4uJizZs3T8ePH9f+/fu1f//+KmVo9+7d+vnnn6tc9gbA/ngAAAAAsAwPD4/Kxx0PGzZMbdu21bRp03TPPfforrvu0r59+/Too4/K0dFRY8eOVXh4eJUPtDyfadOmafLkyYqPj9cNN9yg3bt3y8nJSVFRUVq0aJHuu+8+SdK2bdsqz/60b9++yhr5+flq27atJOnjjz/WgAEDdN1119nx6AH8L8oMAACwDF9fX82YMUM9evTQ5s2b1b1798oxm82m6dOna/r06ZXbxowZU2X/jRs3nnPdwYMHa/DgwdW2P/PMM+rUqZP27Nkjb29v9e3bV4Zh1JjxzJkzmj17thYvXlzr4wJwabjMDAAA4DzatGmjefPmqaCgoNb7FBQU6OWXX1ZoaGgdJgMgcWYGAACgRkOHDr2o+e3bt692CRqAukGZAQAAlpSXl3fBOZMmTZKkyvts6lttMgK4dJQZAABgKZ6ennJ1dVVkZKTZUWrF1dVVnp6eZscAGiXKDAAAsBQvLy/l5eWpqKjI7Ci14unpKS8vL7NjAI0SZQYAAFiOl5cXBQEATzMDAAAAYE2UGQAAAACWRJkBAAAAYEmUGQAAAACWRJkBAAAAYEmUGQAAAACWRJkBAAAAYEmUGQAAAACWRJkBAAAAYEmUGQAAAACWRJkBAAAAYEmUGQAAAACWRJkBAAAAYEk2swMAABqGvXv36vvvv7frmkVFRZKkjRs32nXd9u3b68Ybb7TrmgBgbydOnNDWrVvtuub333+vsrIyu/9c9fT0VOfOne26Zn2gzAAAJEmTJ0/WP//5zzpZu1+/fnZdb8SIEfr000/tuiYA2NuHH36oJ554ok7WtvfP1euuu04//fSTnJyc7LpuXaPMAAAkSTExMfriiy/k4uKijz76SO3atTM7UhU//PCDHnnkEZWUlGjcuHFmxwGAC7rnnnvk5+en//73v3rvvfc0YMAAsyNVcfLkSY0bN05bt27VM888I0dH692BQpkBAEiSBgwYoIyMDA0ePFijRo1ScnKy7rjjDrNjSfrtMrVRo0bpmmuu0eeff64OHTqYHQkALqhdu3bavHmzHnroIT355JP6+9//rieffFIODg5mR1NBQYHGjBmjH374QStWrNDgwYPNjnRJrFe/AAB1pkOHDtqyZYu6du2q/v37Kz4+3uxIio+P11133aXu3bsrIyODIgPAUjw8PPTZZ5/pmWee0VNPPaXHH39cpaWlpmbavHmzAgMDdezYMaWnp1u2yEiUGQDA/2jZsqVWr16t8ePHa/z48Xr66adVVlZ20evMnDlTbdu2VfPmzRUUFKTMzMyL2r+srExPPfWUxo8fr8cee0yrVq3S1VdffdE5AMBsTk5Oeuedd5SQkKD58+drwIABOnTo0CWtdbk/Wz/66CP17dtXt956qzIzM+Xv739JORoKygwAoJpmzZpp5syZmjlzpmbMmKH77rtPx44dq/X+S5Ys0eTJkzV16lRt27ZNXbp00cCBA3XgwIFa7X/06FHdd999mjlzpuLi4jRjxgw1a9bsUg8HABqEqKgorV+/Xjt37lRgYKByc3Mvav/L+dlaUVGhF198UY888ogiIyO1bt06XXvttZd6KA0GZQYAcF6xsbFau3atMjMzFRwcXOtHN7/77rsaN26coqKi5Ofnp9mzZ8vV1VUJCQkX3Pe7775TcHCwMjMz9cUXX2jChAmXexgA0GD07t1bWVlZcnV1Va9evbR69epa73upP1tPnDih8PBwvf3225o2bZrmzp0rZ2fnyz2UBoEyAwCo0Z133qmMjAwZhqHAwECtX7++xvlnzpzR1q1b1b9//8ptjo6O6t+/vzZv3lzjvuvXr1dQUJAkKSMjQ2FhYZd/AADQwLRt21bp6em64447dN999+nvf/+7DMOocZ9L/dm6Z88ehYaGasOGDfr88881efLkBvEAAnuhzAAALuiWW27Rli1bFBAQoIEDB2r27NnnnVtUVKTy8nK1bt26yvbWrVtr//79591v1qxZGjBggAICArRlyxbdcsstdssPAA3NlVdeqWXLlun555/X5MmTNW7cOJ05c+a88y/lZ2tqaqoCAgJUXFysLVu2aNCgQXY9hoaAMgMAqJUWLVroX//6l2JjYzVhwgQ98cQTl/RggP9VWlqqiRMnKjY2VhMnTtS//vUvtWjR4vIDA0AD5+TkpDfffFMLFy7URx99pP79++vgwYN2WXvBggUKCwuTn5+fMjIy5OfnZ5d1GxrKDACg1mw2m9577z3NmTNHc+bM0T333KMjR45UmePp6SknJycVFhZW2V5YWKg2bdpU2XbkyBHdc889+sc//qE5c+bovffek83GR6ABaFoeeeQRbdiwQd9++60CAwO1c+fOanNq+7O1vLxczz33nKKiojRmzBh98cUX8vT0rPNjMAtlBgBw0caPH68vvvhC27ZtU1BQkL799tvKMWdnZ/Xo0UMpKSmV2yoqKpSSkqJevXpVbvv2228VFBSkr7/+Wv/+9781fvz4ej0GAGhIQkJClJmZqauuukq9evXSypUrq4zX5mfr8ePHNWTIEP3973+v/MNTY7nR/3woMwCAS9KvXz9lZGTIZrMpODhY//73vyvHJk+erPj4eC1cuFB5eXmaMGGCiouLFRUVJUn64osvFBQUJJvNpszMTPXt29ekowCAhsPb21upqanq37+/7r//fr399ttVHgxQ08/WH3/8USEhIUpNTdWqVas0adKkRnWj//lQZgAAl6x9+/bavHmzevXqpXvuuUczZsyQYRgaOXKk3nnnHU2ZMkVdu3bV9u3btWbNGrVq1UoffPCBBg0apJCQEG3evFk333yz2YcBAA2Gu7u7kpOT9dJLL+kPf/iDoqKiVFJSIknn/dm6a9cuBQYGqqSkRFu2bNHAgQNNPor6Q5kBAFyWq666Sp9//rkmTZqkJ598UrGxsSotLdUTTzyhPXv2qKSkRBkZGerevbsmTJigSZMm6amnntLnn3+uq666yuz4ANDgODo66rXXXlNiYqI++eQThYWFVX4w5v/+bN2xY4f69++vLl26KCMjQx07djQ5ff2izAAALpuTk5PeffddzZ07V/PmzdPAgQN16NChyvFDhw5pwIABSkhI0Ny5czVt2jQ5OTmZmBgAGr6HH35YmzZt0o8//qiAgADl5ORUjpWVlemZZ57RuHHjFBMTozVr1qhly5YmpjUHZQYAYDfR0dFat26dcnJyFBQUpLy8POXl5SkoKEg7d+7UunXrFB0dbXZMALCMoKAgZWZm6pprrlFISIhWrFihY8eOafDgwfrggw80Y8YMzZo1S82aNTM7qil4/iUAwK769OmjrKwsDR48WMHBwZKkm266Sf/+97/l4+NjcjoAsJ6bbrpJX331lR599FGFh4frhhtu0MmT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bl15idn58vztb3/T+PHjq41de+21tT8wAAAANEqcmUGls2c7Ro4cqREjRig+Pl5HjhzRsWPHtG/fPgUFBVXOtdls6tmzZ7U1evToUavv9euvv6p58+bnHT9+/Ljuvfde+fn56S9/+Uu1cRcXl1p9HwAAADRelBlUcnJykvTbjfl+fn764IMP1KFDB+3evbvWa7i5udVqnqenp44cOXLOsRMnTujuu+/WlVdeqWXLlqlZs2bV5nDPDAAAACgzqKZr167661//qq+//lrOzs5KSUnRddddp4yMjMo5ZWVl2rp1a63Wa9asmcrLy6ts69atm/bv31+t0Bw/flwDBgyQs7OzPvvss/Oevfnhhx8u8qgAAADQ2FBmUGnHjh2SfvtgyoKCAi1dulQHDx6Ur6+vnnrqKb355ptavny5du3apdjYWB09erRW67Zt21YpKSlVyku3bt3k6emptLS0ynlni0xxcbHmzZun48ePa//+/dq/f3+VMrR7924dOHDAfgcOAAAAS+IBAKjk7u4uSZo0aZJOnTolb29vTZs2Tffcc4/uuusu7du3T48++qgcHR01duxYhYeHV/lAy/OZNm2aJk+erPj4eN1www3avXu3nJycFBUVpUWLFum+++6TJG3btq3y7E/79u2rrJGfn1/5UIKPP/5YwcHB2rx5sx2PHgAAAFZDmUElHx8fSdK6devUvXv3KmM2m03Tp0/X9OnTK7f97wdXbty48ZzrDh48WIMHD662/ZlnnlGnTp20Z88eeXt7q2/fvjIMo8aMZ86c0ezZszV16lTKDAAAQBPHZWYwTZs2bTRv3jwVFBTUep+CggK9/PLL6tq1a90FAwAAgCVwZgamGjp06EXNb9++vdq3b69t27bVTSAAAABYBmUG1eTl5dVq3qRJkyTJlGJR24wAAABovCgzqOTp6SlXV1dFRkaaHaVWXF1d5enpaXYMAAAAmIQyg0peXl7Ky8tTUVGR2VFqxdPTU15eXmbHAAAAgEkoM6jCy8uLggAAAABL4GlmAAAAACyJMgMAAADAkigzAAAAACyJMgMAAADAkigzAAAAACyJMgMAAADAkigzAAAAACyJMgMAAADAkigzAAAAACyJMgMAAADAkigzAAAAACyJMgMAAADAkigzAAAAACzJZnaAS1VaWqqKigq7rmkYhsrKylRSUmLXdZs1ayZHR3pjU1VWVqby8nK7rllRUaHy8nLeqwAAoElzMAzDMDvExTIMQ507d1Zubq7ZUWplyZIleuCBB8yOAZPce++9WrVqldkxauWtt97S888/b3YMU6xfv1533nmnfvjhB7Vr187sOAAAoBYseWamvLxcHTp0UG5urgICAvTkk0/KwcHB7FhV5Ofn65VXXpGrq6s8PT3NjgMTtW/fXpJ08803609/+pNstob1X7uioiL96U9/0pkzZ3TjjTeaHQcAAKDWGtZvVbVks9mUlJSkKVOm6LXXXtO6des0Z84cNW/e3OxokqSvvvpKzzzzjLy8vPT555/Lz8/P7Egw0XvvvacOHTpo0qRJ+vjjj7VkyRK1aNHC7FiSpG+++UaDBw+Wq6ur1q5dq9DQULMjAQAA1JplL453dHTUq6++qkWLFmnJkiUKCwtTYWGh2bGUkJCgO++8U507d1ZmZiZFBpKk2NhYrV27VllZWQoODtZ3331ndiT961//Uq9eveTu7q7MzEyKDAAAsBzLlpmzRo0apU2bNik/P18BAQHavn27KTnKy8v17LPPKjo6WlFRUVq7dq2uueYaU7KgYbrzzjuVkZEhSQoKClJKSoopOQzD0LRp0zR48GD169dPaWlpatu2rSlZAAAALofly4z02y+GWVlZuvbaaxUaGqply5Zd9BozZ85U27Zt1bx5cwUFBSkzM7PW+x47dkyDBw/W9OnT9d5772n27Nlydna+6Axo/G655RZt2bJFAQEBGjhwoOLi4i56jct5r5aUlCg6OlrPPfecXnjhBS1btkxXXnnlRWcAAABoCBpFmZGkG2+8UV9++aUGDRqkYcOG6fXXX1dtH9S2ZMkSTZ48WVOnTtW2bdvUpUsXDRw4UAcOHLjgvj/88IN69eql9PR0rV69WpMmTWpwDyNAw9KiRQv961//0sSJEyv/lZaW1mrfy3mvHjx4UP3799eiRYv04Ycf6o033uAxzAAAwNqMRqa8vNyYMmWKIckYNWqUcerUqQvuExgYaEycOLHKGtdff73xxhtv1Ljfhg0bjJYtWxrt27c38vLyLjs7mp45c+YYNpvNuPPOO43Dhw9fcP6lvldzcnIMb29vo1WrVkZ6evpl526MUlJSDEnGDz/8YHYUAABQS43uz7KOjo7661//qk8++URLly5V3759tW/fvvPOP3PmjLZu3ar+/ftXWaN///7avHnzefeLj4/XXXfdpa5duyojI0MdO3a063GgaRg/fry++OILff311woKCtK333573rmX+l79/PPPFRISohYtWigrK0u9evWy6zEAAACYpdGVmbNGjhypr776Snv37lVgYKC2bdt2znlFRUUqLy9X69atq2xv3bq19u/fX21+WVmZnnrqKY0fP17jxo3TmjVr1LJlyzo5BjQN/fr1U0ZGhmw2m4KCgvTFF1+cc97FvlcNw9Bbb72lIUOG6K677lJqaqq8vLzq5BgAAADM0GjLjCT17NlTmZmZatOmjXr37q3k5OTLWu/o0aO67777NHPmTM2cOVNxcXFq1qyZndKiKWvfvr02b96skJAQDRo0SDNmzKj1PV/nUlJSojFjxuiFF17Qyy+/rKSkJLm7u9sxMQAAgPkadZmRpBtuuEGbNm3S/fffr+HDh+tvf/tblV8SPT095eTkVO0zagoLC9WmTZvKr7///nv16tVLGRkZWrNmjWJjY+vtGNA0XHXVVfr88881adIkPfnkk4qNja3yYIDavlcLCwvVr18/LVmyRIsWLdKrr77Kjf4AAKBRahK/4bi6uurjjz/WK6+8oilTpmjUqFH69ddfJUnOzs7q0aNHlc/8qKioUEpKSuW9BevXr1dgYKAqKiqUkZFR5Z4FwJ6cnJz07rvvau7cuZo3b54GDhyoQ4cOSarde/U///mPAgMDlZ+fr02bNmnUqFGmHAcAAEB9aBJlRpIcHBz05z//Wf/85z+1YsUK3XHHHfrll18kSZMnT1Z8fLwWLlyovLw8TZgwQcXFxYqKitLs2bM1cOBA9ezZU1u2bNGtt95q8pGgKYiOjta6deuUk5OjoKAg5eXlSar5vbp8+XKFhobK09NTWVlZCgoKMvkoAAAA6laTKTNnDR8+XKmpqfrll18UEBCg7OxsjRw5Uu+8846mTJmirl27avv27Vq5cqVeffVVTZgwQRMmTNCqVat09dVXmx0fTUifPn2UlZWl5s2bKzg4WGvWrDnne3X16tVKSEhQeHi47rnnHn355Ze68cYbzY4PAABQ5xyMy7nL2ML27dunoUOHaseOHVqwYIEeeOCByrEjR47ogQce0MaNGzVjxgw99thjJiZFU3f8+HGNGjVKq1ev1rvvvlvlg1lPnz6tmJgYLVq0SFOmTNHUqVO5P+YSrV+/Xnfeead++OEHtWvXzuw4AACgFmxmBzDLddddp40bNyomJkYjR45Ubm6upkyZou+//16DBw/WwYMH9cUXX6hfv35mR0UT5+HhoRUrVujFF1/U008/rZ07d2rmzJk6fPiwwsPDtX37dn3yyScaOXKk2VEBAADqVZMtM5J0xRVXKDExUZ06ddIf//hHZWRkaMuWLWrTpo0yMzPVvn17syMCkn57MMDbb7+tTp06afz48crLy1NBQYHKysr05ZdfKiAgwOyIAAAA9a7JX4/i4OCgl19+WUuXLtWXX36p4OBgbdmyhSKDBmnMmDHasGGD/vvf/6pVq1bKysqiyAAAgCarSZ+Z+b3w8HDl5OTI29tbNhsvCxqu0NBQbdu2TS1btpSrq6vZcQAAAEzDb+2/c/PNN5sdAagVnlYGAADAZWYAAAAALIoyAwAAAMCSKDMAAAAALIkyAwAAAMCSKDMAAAAALIkyAwAAAMCSKDMAIKlz58769NNP1apVK7OjAACAWnIwDMMwOwQAAAAAXCzOzAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAAAAACwJMoMAAAAAEuizAD4/9qvAxIAAAAAQf9ftyPQFwIALMkMAACwJDMAAMBSNUjV4xRgKO4AAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from discopy.quantum.circuit import Functor, Id\n",
    "\n",
    "def cnot_ob(ty):\n",
    "    # this implicitly maps all rigid types to 1 qubit\n",
    "    return qubit ** len(ty)\n",
    "\n",
    "def cnot_ar(box):\n",
    "    dom = len(box.dom)\n",
    "    cod = len(box.cod)\n",
    "    width = max(dom, cod)\n",
    "    circuit = Id(width)\n",
    "    for i in range(width - 1):\n",
    "        circuit >>= Id(i) @ CX @ Id(width - i - 2)\n",
    "\n",
    "    # Add Bras (post-selection) and Kets (states)\n",
    "    # to get a circuit with the right amount of\n",
    "    # input and output wires\n",
    "    if cod <= dom:\n",
    "        circuit >>= Id(cod) @ Bra(*[0]*(dom - cod))\n",
    "    else:\n",
    "        circuit <<= Id(dom) @ Ket(*[0]*(cod - dom))\n",
    "    return circuit\n",
    "\n",
    "cnot_functor = Functor(ob=cnot_ob, ar=cnot_ar, dom=Category())\n",
    "diagram.draw()\n",
    "cnot_functor(diagram).draw(figsize=(8, 8))"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
