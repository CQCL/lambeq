{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "# Training: Classical case"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "In this section, we present a complete use case of ``lambeq``'s :py:mod:`.training` module, implementing a classical pipeline on the meaning classification dataset introduced in [Lea2021]_. The goal is to classify simple sentences (such as \"skillful programmer creates software\" and \"chef prepares delicious meal\") into two categories, food or IT. The dataset consists of 130 sentences created using a simple context-free grammar.\n",
    "\n",
    "We will use a :py:class:`.SpiderAnsatz` to split large tensors into chains of smaller ones. The pipeline uses PyTorch as a backend.\n",
    "\n",
    ":download:`Download code <../_code/trainer_classical.ipynb>`\n",
    "\n",
    "Preparation\n",
    "-----------\n",
    "\n",
    "We start with importing PyTorch and specifying some training hyperparameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "\n",
    "BATCH_SIZE = 30\n",
    "EPOCHS = 30\n",
    "LEARNING_RATE = 3e-2\n",
    "SEED = 0"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext",
    "tags": []
   },
   "source": [
    "Input data\n",
    "----------\n",
    "\n",
    "Let's read the data and print some example sentences."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_data(filename):\n",
    "    labels, sentences = [], []\n",
    "    with open(filename) as f:\n",
    "        for line in f:\n",
    "            t = float(line[0])\n",
    "            labels.append([t, 1-t])\n",
    "            sentences.append(line[1:].strip())\n",
    "    return labels, sentences\n",
    "\n",
    "\n",
    "train_labels, train_data = read_data('../examples/datasets/mc_train_data.txt')\n",
    "val_labels, val_data = read_data('../examples/datasets/mc_dev_data.txt')\n",
    "test_labels, test_data = read_data('../examples/datasets/mc_test_data.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['skillful man prepares sauce .',\n",
       " 'skillful man bakes dinner .',\n",
       " 'woman cooks tasty meal .',\n",
       " 'man prepares meal .',\n",
       " 'skillful woman debugs program .']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[:5]"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Targets are represented as 2-dimensional arrays:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [0.0, 1.0]]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_labels[:5]"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Creating and parameterising diagrams\n",
    "------------------------------------\n",
    "\n",
    "The first step is to convert sentences into :term:`string diagrams <string diagram>`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Tagging sentences.\n",
      "Parsing tagged sentences.\n",
      "Turning parse trees to diagrams.\n",
      "Tagging sentences.\n",
      "Parsing tagged sentences.\n",
      "Turning parse trees to diagrams.\n",
      "Tagging sentences.\n",
      "Parsing tagged sentences.\n",
      "Turning parse trees to diagrams.\n"
     ]
    }
   ],
   "source": [
    "from lambeq import BobcatParser\n",
    "\n",
    "parser = BobcatParser(verbose='text')\n",
    "\n",
    "train_diagrams = parser.sentences2diagrams(train_data)\n",
    "val_diagrams = parser.sentences2diagrams(val_data)\n",
    "test_diagrams = parser.sentences2diagrams(test_data)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The produced diagrams need to be parameterised by a specific :term:`ansatz <ansatz (plural: ansÃ¤tze)>`. For this experiment we will use a :py:class:`.SpiderAnsatz`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from discopy import Dim\n",
    "\n",
    "from lambeq import AtomicType, SpiderAnsatz\n",
    "\n",
    "ansatz = SpiderAnsatz({AtomicType.NOUN: Dim(2),\n",
    "                       AtomicType.SENTENCE: Dim(2)})\n",
    "\n",
    "train_circuits = [ansatz(diagram) for diagram in train_diagrams]\n",
    "val_circuits =  [ansatz(diagram) for diagram in val_diagrams]\n",
    "test_circuits = [ansatz(diagram) for diagram in test_diagrams]\n",
    "\n",
    "train_circuits[0].draw()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Instantiate the model\n",
    "---------------------\n",
    "\n",
    "We can now initialise the model by importing the :py:class:`.PytorchModel` class, and passing all diagrams to the class method :py:meth:`.PytorchModel.from_diagrams`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from lambeq import PytorchModel\n",
    "\n",
    "all_circuits = train_circuits + val_circuits + test_circuits\n",
    "model = PytorchModel.from_diagrams(all_circuits)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. note::\n",
    "\n",
    "   The model can also be instantiated by using the :py:meth:`.PytorchModel.from_checkpoint` method, if an existing checkpoint is available."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Define evaluation metric\n",
    "------------------------\n",
    "\n",
    "Optionally, we can provide a dictionary of callable evaluation metrics with the signature ``metric(y_hat, y)``."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "sig = torch.sigmoid\n",
    "\n",
    "def accuracy(y_hat, y):\n",
    "    return torch.sum(torch.eq(torch.round(sig(y_hat)), y))/len(y)/2  # half due to double-counting\n",
    "\n",
    "eval_metrics = {\"acc\": accuracy}"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Initialise trainer\n",
    "------------------\n",
    "\n",
    "Next step is to initialise a :py:class:`.PytorchTrainer` object. Because this is a binary classification task, we will use binary cross-entropy as the loss. As an optimizer, we choose Adam with weight decay."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from lambeq import PytorchTrainer\n",
    "\n",
    "trainer = PytorchTrainer(\n",
    "        model=model,\n",
    "        loss_function=torch.nn.BCEWithLogitsLoss(),\n",
    "        optimizer=torch.optim.AdamW,\n",
    "        learning_rate=LEARNING_RATE,\n",
    "        epochs=EPOCHS,\n",
    "        evaluate_functions=eval_metrics,\n",
    "        evaluate_on_train=True,\n",
    "        verbose='text',\n",
    "        seed=SEED)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Creating the datasets\n",
    "---------------------\n",
    "\n",
    "To facilitate batching and data shuffling, lambeq provides a :py:class:`.Dataset` interface. Shuffling is enabled by default, and if not specified, the batch size is set to the length of the dataset. In our example we will use the :py:attr:`BATCH_SIZE` we have set above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from lambeq import Dataset\n",
    "\n",
    "train_dataset = Dataset(\n",
    "            train_circuits,\n",
    "            train_labels,\n",
    "            batch_size=BATCH_SIZE)\n",
    "\n",
    "val_dataset = Dataset(val_circuits, val_labels, shuffle=False)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Train the model\n",
    "---------------\n",
    "\n",
    "Now we can pass the datasets to the :py:meth:`~lambeq.Trainer.fit` method of the :term:`trainer` to start the training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 1:   train/loss: 0.7098   valid/loss: 0.6910   train/acc: 0.5000   valid/acc: 0.5000\n",
      "Epoch 5:   train/loss: 0.6114   valid/loss: 0.6300   train/acc: 0.6714   valid/acc: 0.6500\n",
      "Epoch 10:  train/loss: 0.4002   valid/loss: 0.5396   train/acc: 0.8286   valid/acc: 0.7833\n",
      "Epoch 15:  train/loss: 0.2053   valid/loss: 0.3814   train/acc: 0.8786   valid/acc: 0.7833\n",
      "Epoch 20:  train/loss: 0.1330   valid/loss: 0.3323   train/acc: 0.9071   valid/acc: 0.8167\n",
      "Epoch 25:  train/loss: 0.0926   valid/loss: 0.2886   train/acc: 0.9571   valid/acc: 0.8833\n",
      "Epoch 30:  train/loss: 0.0354   valid/loss: 0.0874   train/acc: 0.9929   valid/acc: 0.9500\n",
      "\n",
      "Training completed!\n"
     ]
    }
   ],
   "source": [
    "trainer.fit(train_dataset, val_dataset, evaluation_step=1, logging_step=5)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. note::\n",
    "\n",
    "   The :py:attr:`evaluation_step` controls the interval in which the model is evaluated on the validation dataset. Default is 1. If evaluation on the validation dataset is expensive, we recommend setting it to a higher value."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Show results\n",
    "------------\n",
    "\n",
    "Finally, we visualise the results and evaluate the model on the test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test accuracy: 0.9833333492279053\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x432 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig1, ((ax_tl, ax_tr), (ax_bl, ax_br)) = plt.subplots(2, 2, sharey='row', figsize=(10, 6))\n",
    "\n",
    "ax_tl.set_title('Training set')\n",
    "ax_tr.set_title('Development set')\n",
    "ax_bl.set_xlabel('Epochs')\n",
    "ax_br.set_xlabel('Epochs')\n",
    "ax_bl.set_ylabel('Accuracy')\n",
    "ax_tl.set_ylabel('Loss')\n",
    "\n",
    "colours = iter(plt.rcParams['axes.prop_cycle'].by_key()['color'])\n",
    "ax_tl.plot(trainer.train_epoch_costs, color=next(colours))\n",
    "ax_bl.plot(trainer.train_results['acc'], color=next(colours))\n",
    "ax_tr.plot(trainer.val_costs, color=next(colours))\n",
    "ax_br.plot(trainer.val_results['acc'], color=next(colours))\n",
    "\n",
    "# print test accuracy\n",
    "test_acc = accuracy(model(test_circuits), torch.tensor(test_labels))\n",
    "print('Test accuracy:', test_acc.item())"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Adding custom layers to the model\n",
    "---------------------------------\n",
    "\n",
    "In the default setting, the forward pass of a :py:class:`.PytorchModel` performs a simple tensor contraction of the tensorised diagrams. However, if one likes to add additional custom layers, one can create a custom model that inherits from :py:class:`.PytorchModel` and overwrite the :py:meth:`.PytorchModel.forward` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "class MyCustomModel(PytorchModel):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.net = torch.nn.Linear(2, 2)\n",
    "\n",
    "    def forward(self, input):\n",
    "        \"\"\"define a custom forward pass here\"\"\"\n",
    "        preds = self.get_diagram_output(input)\n",
    "        preds = self.net(preds)\n",
    "        return preds"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The rest follows the same procedure as explained above. I.e. initialise a trainer, fit the model and visualise the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 1:   train/loss: 0.7148   valid/loss: 0.6871   train/acc: 0.4143   valid/acc: 0.5833\n",
      "Epoch 5:   train/loss: 0.4211   valid/loss: 0.5144   train/acc: 0.8714   valid/acc: 0.8167\n",
      "Epoch 10:  train/loss: 0.2201   valid/loss: 0.3550   train/acc: 0.9714   valid/acc: 0.9000\n",
      "Epoch 15:  train/loss: 0.1201   valid/loss: 0.3603   train/acc: 1.0000   valid/acc: 0.9667\n",
      "Epoch 20:  train/loss: 0.0426   valid/loss: 0.4961   train/acc: 1.0000   valid/acc: 0.9500\n",
      "Epoch 25:  train/loss: 0.0073   valid/loss: 0.6688   train/acc: 1.0000   valid/acc: 0.9000\n",
      "Epoch 30:  train/loss: 0.0018   valid/loss: 0.8141   train/acc: 1.0000   valid/acc: 0.9000\n",
      "\n",
      "Training completed!\n"
     ]
    }
   ],
   "source": [
    "custom_model = MyCustomModel.from_diagrams(all_circuits)\n",
    "custom_model_trainer = PytorchTrainer(\n",
    "        model=custom_model,\n",
    "        loss_function=torch.nn.BCEWithLogitsLoss(),\n",
    "        optimizer=torch.optim.AdamW,\n",
    "        learning_rate=LEARNING_RATE,\n",
    "        epochs=EPOCHS,\n",
    "        evaluate_functions=eval_metrics,\n",
    "        evaluate_on_train=True,\n",
    "        verbose='text',\n",
    "        seed=SEED)\n",
    "custom_model_trainer.fit(train_dataset, val_dataset, logging_step=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test accuracy: 0.9833333492279053\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 720x432 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig1, ((ax_tl, ax_tr), (ax_bl, ax_br)) = plt.subplots(2, 2, sharey='row', figsize=(10, 6))\n",
    "\n",
    "ax_tl.set_title('Training set')\n",
    "ax_tr.set_title('Development set')\n",
    "ax_bl.set_xlabel('Epochs')\n",
    "ax_br.set_xlabel('Epochs')\n",
    "ax_bl.set_ylabel('Accuracy')\n",
    "ax_tl.set_ylabel('Loss')\n",
    "\n",
    "colours = iter(plt.rcParams['axes.prop_cycle'].by_key()['color'])\n",
    "ax_tl.plot(custom_model_trainer.train_epoch_costs, color=next(colours))\n",
    "ax_bl.plot(custom_model_trainer.train_results['acc'], color=next(colours))\n",
    "ax_tr.plot(custom_model_trainer.val_costs, color=next(colours))\n",
    "ax_br.plot(custom_model_trainer.val_results['acc'], color=next(colours))\n",
    "\n",
    "# print test accuracy\n",
    "test_acc = accuracy(model(test_circuits), torch.tensor(test_labels))\n",
    "print('Test accuracy:', test_acc.item())"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. rubric:: See also:\n",
    "\n",
    "- `Training: Quantum case <./trainer_quantum.ipynb>`_\n",
    "- `Advanced: Manual training <../manual_training.rst>`_"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
