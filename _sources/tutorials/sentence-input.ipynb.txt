{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Step 1. Sentence input"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The first part of the process in ``lambeq`` given a sentence, is to convert it into a :term:`string diagram`, according to a given :term:`compositional scheme <compositional model>`. ``lambeq`` can accommodate any :term:`compositional model` that can encode sentences as :term:`string diagrams <string diagram>`, its native data structure. The toolkit currently includes three :term:`compositional models <compositional model>`, each using syntactic information to a different degree: a :term:`bag-of-words` model with no syntactic information present, a :term:`word-sequence model` which respects the order of words, and a fully syntax-based model."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Syntax-based model\n",
    "------------------\n",
    "\n",
    "In order to obtain a :term:`DisCoCat`\\ -like output, we first use the :py:class:`.DepCCGParser` class from :py:mod:`.ccg2discocat` package, which, in turn,  calls the :term:`parser`, obtains a :term:`CCG <Combinatory Categorial Grammar (CCG)>` derivation for the sentence, and converts it into a :term:`string diagram`. The code below uses the default :term:`depccg` parser in order to produce a :term:`string diagram` for the sentence \"John walks in the park\".\n",
    "\n",
    ".. note::\n",
    "            \n",
    "   ``lambeq``'s string diagrams are objects of the class :py:class:`discopy.rigid.Diagram`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from lambeq.ccg2discocat import DepCCGParser\n",
    "from discopy import grammar\n",
    "\n",
    "sentence = 'John walks in the park'\n",
    "\n",
    "# Parse the sentence and convert it into a string diagram\n",
    "depccg_parser = DepCCGParser()\n",
    "diagram = depccg_parser.sentence2diagram(sentence)\n",
    "\n",
    "grammar.draw(diagram, figsize=(14,3), fontsize=12)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. note::\n",
    "\n",
    "   Drawing a pregroup diagram in ``lambeq`` like the one above can be done using the :py:meth:`discopy.grammar.draw` method."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Bag-of-words model\n",
    "------------------\n",
    "\n",
    ":term:`DisCoCat` is not the only :term:`compositional model` that ``lambeq`` supports. In fact, any compositional scheme that manifests sentences as :term:`string diagrams <string diagram>`\\ /:term:`tensor networks <tensor network>` can be added to the toolkit via the module :py:mod:`.reader`. For example, the ``spiders_reader`` object of the :py:class:`.LinearReader` class represents a sentence as a \":term:`bag-of-words`\", composing the words using a :term:`spider` (a commutative operation)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from lambeq.reader import spiders_reader\n",
    "\n",
    "# Create string diagrams based on spiders reader\n",
    "spiders_diagram = spiders_reader.sentence2diagram(sentence)\n",
    "\n",
    "# Not a pregroup diagram, we can't use grammar.draw()\n",
    "spiders_diagram.draw(figsize=(13,5), fontsize=12)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. note::\n",
    "\n",
    "   Note that this time the drawing is performed with diagram's own method :py:meth:`monoidal.Diagram.draw() <discopy.monoidal.Diagram.draw>`, which renders simple monoidal structures consisting of boxes and wires, instead of the pregroup-specific form we obtained by using :py:func:`grammar.draw() <discopy.grammar.pregroup.draw>` in the previous section, which can only be used in pregroup diagrams.\n",
    "\n",
    "Word-sequence model\n",
    "-------------------\n",
    "\n",
    "The ``cups_reader`` object of the :py:class:`.LinearReader` class composes words in sequence, from left to right, generating a \":term:`tensor train`\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from lambeq.reader import cups_reader\n",
    "\n",
    "# Create string diagrams based on cups reader\n",
    "cups_diagram = cups_reader.sentence2diagram(sentence)\n",
    "\n",
    "grammar.draw(cups_diagram, figsize=(12,3), fontsize=12)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note the use of a `START` symbol in the beginning of the sentence, represented as an order-1 tensor (a vector). This ensures that the final result of the computation (that is, the representation of the sentence) will be again a tensor of order 1."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. rubric:: See also:\n",
    "\n",
    "- `Example notebook ccg2discocat.ipynb <../examples/ccg2discocat.ipynb>`_\n",
    "- `Example notebook reader.ipynb <../examples/reader.ipynb>`_\n",
    "- `DisCoCat in DisCoPy <./discocat.ipynb>`_\n",
    "- `Extending lambeq <./extend-lambeq.ipynb>`_"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
