{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Step 1. Sentence input"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The first part of the process in ``lambeq`` given a sentence, is to convert it into a :term:`string diagram`, according to a given :term:`compositional scheme <compositional model>`. ``lambeq`` can accommodate any :term:`compositional model` that can encode sentences as :term:`string diagrams <string diagram>`, its native data structure. The toolkit currently includes a number of :term:`compositional models <compositional model>`, using various degrees of syntactic information: :term:`bag-of-words` models do not use any syntactic information, :term:`word-sequence models <word-sequence model>` respect the order of words, while fully syntax-based models are based on grammatical derivations provided by a parser.\n",
    "\n",
    ":download:`Download code <../_code/sentence-input.ipynb>`"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Syntax-based model: DisCoCat\n",
    "----------------------------\n",
    "\n",
    "In order to obtain a :term:`DisCoCat`\\ -like output, we first use the :py:class:`.BobcatParser` class from :py:mod:`~lambeq.ccg2discocat` package, which, in turn,  calls the :term:`parser`, obtains a :term:`CCG <Combinatory Categorial Grammar (CCG)>` derivation for the sentence, and converts it into a :term:`string diagram`. The code below uses the default :term:`Bobcat` parser in order to produce a :term:`string diagram` for the sentence \"John walks in the park\".\n",
    "\n",
    ".. note::\n",
    "            \n",
    "   ``lambeq``'s string diagrams are objects of the class :py:class:`discopy.rigid.Diagram`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from lambeq import BobcatParser\n",
    "from discopy import grammar\n",
    "\n",
    "sentence = 'John walks in the park'\n",
    "\n",
    "# Parse the sentence and convert it into a string diagram\n",
    "parser = BobcatParser(verbose='suppress')\n",
    "diagram = parser.sentence2diagram(sentence)\n",
    "\n",
    "grammar.draw(diagram, figsize=(14,3), fontsize=12)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. note::\n",
    "\n",
    "   Drawing a pregroup diagram in ``lambeq`` like the one above can be done using the :py:class:`discopy.grammar.draw() <discopy.grammar.pregroup.draw>` method.\n",
    "   \n",
    "Another case of syntax-based models in ``lambeq`` is :ref:`tree readers <sec-tree_readers>`, which will be presented later in this tutorial."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Bag-of-words: Spiders reader\n",
    "----------------------------\n",
    "\n",
    ":term:`DisCoCat` is not the only :term:`compositional model` that ``lambeq`` supports. In fact, any compositional scheme that manifests sentences as :term:`string diagrams <string diagram>`\\ /:term:`tensor networks <tensor network>` can be added to the toolkit via the module :py:mod:`.reader`. For example, the :py:obj:`~lambeq.reader.spiders_reader` object of the :py:class:`.LinearReader` class represents a sentence as a \":term:`bag-of-words`\", composing the words using a :term:`spider` (a commutative operation)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from lambeq import spiders_reader\n",
    "\n",
    "# Create string diagrams based on spiders reader\n",
    "spiders_diagram = spiders_reader.sentence2diagram(sentence)\n",
    "\n",
    "# Not a pregroup diagram, we can't use grammar.draw()\n",
    "spiders_diagram.draw(figsize=(13,5), fontsize=12)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. note::\n",
    "\n",
    "   Note that this time the drawing is performed with diagram's own method :py:meth:`monoidal.Diagram.draw() <discopy.monoidal.Diagram.draw>`, which renders simple monoidal structures consisting of boxes and wires, instead of the pregroup-specific form we obtained by using :py:class:`grammar.draw() <discopy.grammar.pregroup.draw>` in the previous section, which can only be used in pregroup diagrams.\n",
    "\n",
    "Word-sequence models: Cups and stairs readers\n",
    "---------------------------------------------\n",
    "\n",
    "The :py:class:`.LinearReader` class can be used to create any kind of model where words are composed in sequence, from left to right. For example, the :py:obj:`~lambeq.reader.cups_reader` instance of this class generates a \":term:`tensor train`\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from lambeq import cups_reader\n",
    "\n",
    "# Create string diagrams based on cups reader\n",
    "cups_diagram = cups_reader.sentence2diagram(sentence)\n",
    "\n",
    "grammar.draw(cups_diagram, figsize=(12,3), fontsize=12)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note the use of a `START` symbol in the beginning of the sentence, represented as an order-1 tensor (a vector). This ensures that the final result of the computation (that is, the representation of the sentence) will be again a tensor of order 1."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Another pre-made word-sequence model is provided by the :py:obj:`~lambeq.reader.stairs_reader` instance. This model combines consecutive words using a box (\"cell\") in a recurrent fashion, similarly to a recurrent neural network. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from lambeq import stairs_reader\n",
    "\n",
    "stairs_diagram = stairs_reader.sentence2diagram(sentence)\n",
    "stairs_diagram.draw(figsize=(12,5), fontsize=12)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. _sec-tree_readers:\n",
    "\n",
    "Tree readers\n",
    "------------\n",
    "\n",
    "A :term:`CCG <combinatory categorial grammar (CCG)>` derivation follows a biclosed form [YK2021]_ , which can be directly interpreted as a series of compositions without any explicit conversion into a :term:`pregroup <pregroup grammar>` form. Class :py:class:`.TreeReader` implements a number of compositional models by taking advantage of this fact. In order to demonstrate the way they work, it would be useful to first examine how a CCG diagram looks like:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>\n",
    "<img src=\"../_static/images/ccg-diagram.png\" width=350>\n",
    "</center>"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Even without knowing the specifics of CCG syntax, it is not difficult to see that the verb \"gave\" is first composed with the indirect object \"Mary\", then the result is composed with the noun phrase \"a flower\" which correspond to the direct object, and finally the entire verb phrase \"gave Mary a flower\" is further composed with the subject \"John\" to return a sentence. A :py:class:`.TreeReader` follows this order of composition, as demonstrated below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from lambeq import TreeReader\n",
    "\n",
    "reader = TreeReader()\n",
    "sentence = \"John gave Mary a flower\"\n",
    "\n",
    "tree_diagram = reader.sentence2diagram(sentence)\n",
    "tree_diagram.draw(figsize=(12,5), fontsize=12)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Note that in this default call, composition is handled by a single \"cell\" named ``UNIBOX``. This can be changed by passing an explicit argument of type :py:class:`.TreeReaderMode` to the reader's constructor. There are three possible choices:\n",
    "\n",
    "- :py:obj:`NO_TYPE` is the default, where all compositions are handled by the same ``UNIBOX`` cell (above diagram).\n",
    "- :py:obj:`RULE_ONLY` creates a different cell for each CCG rule.\n",
    "- :py:obj:`RULE_TYPE` creates a different cell for each (rule, type) pair.\n",
    "\n",
    "For example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from lambeq import TreeReader, TreeReaderMode\n",
    "\n",
    "reader = TreeReader(mode=TreeReaderMode.RULE_ONLY)\n",
    "sentence = \"John gave Mary a flower\"\n",
    "\n",
    "tree_diagram = reader.sentence2diagram(sentence)\n",
    "tree_diagram.draw(figsize=(12,5), fontsize=12)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "In the above, each unique CCG rule gets its own box: FA boxes correspond to forward application, and BA boxes to backward application. For certain tasks, making the composition box rule-specific might lead to better generalisation and overall performance."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. rubric:: See also:\n",
    "\n",
    "- :ref:`lambeq.ccg2discocat package <api_ccg2discocat>`\n",
    "- :ref:`lambeq.reader package <api_reader>`\n",
    "- `Example notebook ccg2discocat.ipynb <../examples/ccg2discocat.ipynb>`_\n",
    "- `Example notebook reader.ipynb <../examples/reader.ipynb>`_\n",
    "- `Example notebook tree_reader.ipynb <../examples/tree_reader.ipynb>`_\n",
    "- `DisCoCat in DisCoPy <./discocat.ipynb>`_\n",
    "- `Extending lambeq <./extend-lambeq.ipynb>`_"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
