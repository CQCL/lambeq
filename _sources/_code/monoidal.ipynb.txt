{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from discopy.cat import Box, Ob, Id \n",
    "\n",
    "A, B, C, D = Ob('A'), Ob('B'), Ob('C'), Ob('D')\n",
    "\n",
    "f = Box('f', A, B)\n",
    "g = Box('g', B, C)\n",
    "h = Box('h', C, D)\n",
    "\n",
    "# the codomain of f and domain of g match, so f and g compose\n",
    "g << f\n",
    "assert f.cod == g.dom == B\n",
    "assert g << f == f >> g\n",
    "\n",
    "# associativity\n",
    "assert h << (g << f) == h << g << f == (h << g) << f\n",
    "\n",
    "# identity\n",
    "assert f << Id(A) == f == Id(B) << f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Arrow(dom=Ob('A'), cod=Ob('D'), boxes=[Box('f', Ob('A'), Ob('B')), Box('g', Ob('B'), Ob('C')), Box('h', Ob('C'), Ob('D'))])\n"
     ]
    }
   ],
   "source": [
    "# only arrows that 'type-check' can be composed\n",
    "arrow = h << g << f\n",
    "assert arrow == f >> g >> h\n",
    "\n",
    "print(repr(arrow))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f >> g >> h\n",
      "Indexing: f\n",
      "Slicing: g >> h\n",
      "Reversing (dagger): h[::-1] >> g[::-1] >> f[::-1]\n"
     ]
    }
   ],
   "source": [
    "print(arrow)\n",
    "print(f'Indexing:', arrow[0])\n",
    "print(f'Slicing:', arrow[1:])\n",
    "print(f'Reversing (dagger):', arrow[::-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from discopy.monoidal import Box, Id, Ty\n",
    "\n",
    "A, B, C = Ty('A'), Ty('B'), Ty('C')\n",
    "\n",
    "f = Box('f', A, B)\n",
    "g = Box('g', B, C)\n",
    "h = Box('h', B, A)\n",
    "\n",
    "# combining objects\n",
    "A @ B\n",
    "# combining arrows\n",
    "f @ g\n",
    "\n",
    "# associativity\n",
    "assert (A @ B) @ C == A @ B @ C == A @ (B @ C)\n",
    "assert (f @ g) @ h == f @ g @ h == f @ (g @ h) \n",
    "\n",
    "# monoidal unit\n",
    "assert A @ Ty() == A == Ty() @ A\n",
    "assert f @ Id(Ty()) == f == Id(Ty()) @ f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Diagram(dom=Ty('A', 'A'), cod=Ty('B'), boxes=[Box('x', Ty('A'), Ty('A')), Box('y', Ty('A', 'A'), Ty('B'))], offsets=[0, 0])\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXYAAADmCAYAAADBT66SAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAHrElEQVR4nO3dz4vd1RnH8c/TUblDpYixxIJiFgYsaaQiShuUkrjoyh+Ii8RNQUP/AxeS4LZblfwBNm4CIm5duRIrCtGCuFBK3JlZhFJU5hJJTjdR6o+Fmc7X753nvl6bmdzFPc/mvOfMYXK/NcYIAH38Yu4BANhdwg7QjLADNCPsAM0IO0Azwg7QjLADNCPsAM0IO0Azwg7QjLADNCPsAM0IO0Azwg7QjLADNCPsAM0IO0Azwg7QjLADNCPsAM0IO0Azwg7QjLADNCPsO1BVt1XVgbnngM6q6pdV9du559iLhH1nnkhyesoFquqJqhpVdc+U68AKO5Tk71Mu0HWfCfvqOpHk7WtfgWm03GfCvoKq6uYkDyV5NsnxmceBljrvM2FfTY8neXOM8UmSS1V1/9wDQUNt95mwr6YTSc5d+/5cmv2aCCui7T67Ye4B+K6qujXJsSSHq2ok2Ugyquq5McaYdzroofs+c2JfPU8leXWMcdcY48AY484kF5I8PPNc0EnrfSbsq+dEkje+99rrafRrIqyA1vvMVcyKGWMc/ZHXXp5jFuiq+z5zYgdoRtgBmhF2gGaEHaAZYQdoRtgBmhF2gGaEHaAZYQdoRtgBmhF2gGaEHaAZYQdoZvJPd9zc3Ly4XC73T73OHKrq2blnmMJisdja3t6+fe45gJ2ZPOzL5XJ/gweSrJWqavmDGNaFqxiAZoQdoBlhB2hG2AGaEXaAZoQdoBlhB2hG2AGaEXaAZoQdoBlhB2hG2AGaEXaAZoQdoBlhB2hG2AGaEXaAZoQdoBlhvw7vv/9+7r333iyXy3z11Vc5dOhQPvroo7nHAviOmvp5pFU1Oj3z9PTp01kul9ne3s4dd9yR559/fu6Rdl1VZYxRc8/BequqB5OcGWM8OPcse42wX6fLly/ngQceyGKxyDvvvJONjY25R9p1ws4qEPadcxVznS5dupQvv/wyX3zxRZbL5dzjAPyAE/t1euyxx3L8+PFcuHAhn3/+ec6cOTP3SLvOiZ1V4MS+czfMPcBecvbs2dx44415+umnc+XKlRw5ciRvvfVWjh07NvdoAN9yYucHnNhZBU7sO+eOHaAZYQdoRtgBmhF2gGaEHaAZYQdoRtgBmhF2gGaEHaAZYQdoRtgBmhF2gGaEHaAZYQdoRtgBmhF2gGaEHaAZYQdoZvJnni4Wi62q2j/1OuyexWKxNfcMwM5NHvbt7e3bp17j51ZVJ5P8YYxxcu5ZAL7PVQxAM8IO0IywAzQj7ADNCDtAM8IO0IywAzQj7ADNCPuKqqonqmpU1T1zzwLsLcK+uk4kefvaV4CfTNhXUFXdnOShJM8mOT7zOMAeI+yr6fEkb44xPklyqarun3sgYO8Q9tV0Ism5a9+fi+sY4DpM/umOXJ+qujXJsSSHq2ok2Ugyquq5McaYdzpgL3BiXz1PJXl1jHHXGOPAGOPOJBeSPDzzXMAeIeyr50SSN7732utxHQP8RK5iVswY4+iPvPbyHLMAe5MTO0Azwg7QjLADNCPsAM0IO0Azwg7QjLADNCPsAM0IO0Azwg7QjLADNCPsAM0IO0Azwg7QjLADNCPsAM0IO0Azwg7QjLADNCPsAM0IO0Azwg7QjLADNCPsAM0IO0Azwg7QTI0xJl1gc3Pz4nK53D/pIgB7zGKx2Nre3r59iveePOxVNaZeA2CvqaqMMWqK93YVA9CMsAM0I+wAzQg7QDPCDtCMsAM0I+wAzQg7QDPCDtCMsAM0I+wAzQg7QDPCDtCMsAM0I+wAzQg7QDPCDtCMsAM0I+y098ILL+TFF1/89t+nTp3KSy+9NN9AMDHPPKW9zz77LE8++WTOnz+fq1ev5uDBg3nvvfeyb9++uUdjjU35zNMbpnhTWCUHDhzIvn378sEHH2Rrayv33XefqNOasLMWTp48mVdeeSUXL17MM888M/c4MClXMayFy5cv5/Dhw/n666/z6aefZmNjY+6RWHOuYuD/dNNNN+Xo0aO55ZZbRJ32hJ21cPXq1bz77rt57bXX5h4FJufPHWnv448/zt13351HHnkkBw8enHscmJw7doAZTHnH7sQO0IywAzQj7ADNCDtAM8IO0IywAzQj7ADNCDtAM8IO0IywAzQj7ADNCDtAM8IO0IywAzQj7ADNCDtAM5M/Gm+xWGxV1f6p1wHYSxaLxdZU7z35E5RgFVTVo0n+OsZ4dO5ZYGquYgCaEXaAZoQdoBlhB2hG2AGaEXaAZoQdoBlhB2hG2GEXVNWVqvqwqv5ZVeer6sjcM7G+Jv9IAVgT22OM3ydJVf05yd+S/GnWiVhbTuyw+36V5N9zD8H6cmKH3bFZVR8mWST5TZJj847DOhN22B3/exXzxyRnq+p3w6fsMQNXMbDLxhj/SHJbkl/PPQvrSdhhl1XVPUk2klyaexbWk6sY2B3f3LEnSSX5yxjjyozzsMaEHXbBGGNj7hngG65iAJoRdoBmhB2gGWFnXfwnyb/mHgJ+DuX/TwD04sQO0IywAzQj7ADNCDtAM8IO0IywAzQj7ADNCDtAM8IO0IywAzQj7ADNCDtAM8IO0IywAzQj7ADNCDtAM8IO0IywAzQj7ADNCDtAM8IO0IywAzQj7ADNCDtAM/8F/OacqNKKp2YAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 360x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = Box('x', A, A)\n",
    "y = Box('y', A @ A, B)\n",
    "\n",
    "diagram = x @ Id(A) >> y\n",
    "print(repr(diagram))\n",
    "diagram.draw(figsize=(5, 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A @ B @ C\n",
      "Ty('A', 'B', 'C')\n",
      "Indexing: A\n",
      "Slicing: B @ C\n",
      "Reversing: C @ B @ A\n"
     ]
    }
   ],
   "source": [
    "t = A @ B @ C\n",
    "\n",
    "print(t)\n",
    "print(repr(t))\n",
    "\n",
    "print('Indexing:', t[0])\n",
    "print(f'Slicing:', t[1:])\n",
    "print(f'Reversing:', t[::-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Indexing (Ob): Ob('A')\n",
      "Indexing (Ty): Ty('A')\n"
     ]
    }
   ],
   "source": [
    "# indexing a Ty gives an Ob back\n",
    "print('Indexing (Ob):', repr(t[0]))\n",
    "\n",
    "# trick to get a Ty with a single object\n",
    "print('Indexing (Ty):', repr(t[0:1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x @ Id(A) >> y\n",
      "Indexing: x @ Id(A)\n",
      "Slicing: y\n",
      "Reversing (dagger): y[::-1] >> x[::-1] @ Id(A)\n",
      "\n",
      "Dagger operation:\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(diagram)\n",
    "print(f'Indexing:', diagram[0])\n",
    "print(f'Slicing:', diagram[1:])\n",
    "print(f'Reversing (dagger):', diagram[::-1])\n",
    "\n",
    "from discopy import drawing\n",
    "\n",
    "print('\\nDagger operation:')\n",
    "# boxes are drawn as trapeziums to demonstrate the reflection along the horizontal axis\n",
    "drawing.equation(diagram, diagram[::-1], symbol='->', asymmetry=0.2, figsize=(8, 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from discopy.monoidal import Diagram\n",
    "\n",
    "offset_diagram = Diagram(\n",
    "    dom=Ty('A', 'A'), cod=Ty('B'),\n",
    "    boxes=[Box('x', Ty('A'), Ty('A')), Box('y', Ty('A', 'A'), Ty('B'))],\n",
    "    offsets=[1, 0])\n",
    "\n",
    "offset_diagram.draw(figsize=(5, 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 72x72 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 144x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from discopy.monoidal import Swap\n",
    "\n",
    "Swap(A, B).draw(figsize=(1, 1))\n",
    "Diagram.swap(A @ B, C).draw(figsize=(2, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A.l is represented as Ty(Ob('A', z=-1))\n",
      "A.r is represented as Ty(Ob('A', z=1))\n"
     ]
    }
   ],
   "source": [
    "from discopy.rigid import Box, Id, Ty\n",
    "\n",
    "A = Ty('A')\n",
    "\n",
    "print(A.l, 'is represented as', repr(A.l))\n",
    "print(A.r, 'is represented as', repr(A.r))\n",
    "\n",
    "assert A.r.l == A == A.l.r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x72 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x72 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from discopy.rigid import Cap, Cup\n",
    "\n",
    "drawing.equation(Cup(A.r, A.r.r), Cup(A, A.r), Cup(A.l, A), figsize=(8, 1), symbol='...')\n",
    "drawing.equation(Cap(A.l, A.l.l), Cap(A, A.l), Cap(A.r, A), figsize=(8, 1), symbol='...')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Snake Equations - For any object A :\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "snake1 = Id(A) @ Cap(A.r, A) >> Cup(A, A.r) @ Id(A)\n",
    "snake2 = Cap(A, A.l) @ Id(A) >> Id(A) @ Cup(A.l, A)\n",
    "\n",
    "assert snake1.normal_form() == Id(A) == snake2.normal_form()\n",
    "print('Snake Equations - For any object', A, ':')\n",
    "drawing.equation(snake1, Id(A), snake2, figsize=(8, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from discopy.rigid import Diagram\n",
    "\n",
    "A, B = Ty('A'), Ty('B')\n",
    "\n",
    "nested_cup = Diagram.cups(A @ B, (A @ B).r)\n",
    "nested_cap = Diagram.caps((A @ B).r, A @ B)\n",
    "\n",
    "nested_snake = Id(A @ B) @ nested_cap >> nested_cup @ Id(A @ B)\n",
    "\n",
    "assert nested_snake.normal_form() == Id(A @ B)\n",
    "drawing.equation(nested_snake, nested_snake.normal_form())"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
